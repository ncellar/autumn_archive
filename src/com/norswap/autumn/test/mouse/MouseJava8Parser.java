package com.norswap.autumn.test.mouse;

import mouse.runtime.Source;

/**
 * Parser (recognizer) for Java 8 generated by Mouse from its own Java 8 grammar.
 */
public class MouseJava8Parser extends mouse.runtime.ParserBase
{
    final mouse.runtime.SemanticsBase sem;

    //=======================================================================
    //
    //  Initialization
    //
    //=======================================================================
    //-------------------------------------------------------------------
    //  Constructor
    //-------------------------------------------------------------------
    public MouseJava8Parser()
    {
        sem = new mouse.runtime.SemanticsBase();
        sem.rule = this;
        super.sem = sem;
    }

    //-------------------------------------------------------------------
    //  Run the parser
    //-------------------------------------------------------------------
    public boolean parse(Source src)
    {
        super.init(src);
        sem.init();
        if (Compilation()) return true;
        return failure();
    }

    //-------------------------------------------------------------------
    //  Get semantics
    //-------------------------------------------------------------------
    public mouse.runtime.SemanticsBase semantics()
    { return sem; }

    //=======================================================================
    //
    //  Parsing procedures
    //
    //=======================================================================
    //=====================================================================
    //  Compilation = Spacing CompilationUnit SUB? EOT ;
    //=====================================================================
    private boolean Compilation()
    {
        begin("Compilation");
        Spacing();
        CompilationUnit();
        SUB();
        if (!EOT()) return reject();
        return accept();
    }

    //=====================================================================
    //  SUB = "\u001a" ;
    //=====================================================================
    private boolean SUB()
    {
        begin("SUB");
        if (!next('\u001a')) return reject();
        return accept();
    }

    //=====================================================================
    //  EOT = !_ ;
    //=====================================================================
    private boolean EOT()
    {
        begin("EOT");
        if (!aheadNot()) return reject();
        return accept();
    }

    //=====================================================================
    //  Spacing = ([ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n])* ;
    //=====================================================================
    private boolean Spacing()
    {
        begin("Spacing");
        while (Spacing_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  Spacing_0 = [ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n]
    //-------------------------------------------------------------------
    private boolean Spacing_0()
    {
        begin("");
        if (Spacing_1()) return acceptInner();
        if (Spacing_2()) return acceptInner();
        if (Spacing_3()) return acceptInner();
        return rejectInner();
    }

    //-------------------------------------------------------------------
    //  Spacing_1 = [ \t\r\n\f]+
    //-------------------------------------------------------------------
    private boolean Spacing_1()
    {
        begin("");
        if (!nextIn(" \t\r\n\f")) return rejectInner();
        while (nextIn(" \t\r\n\f"));
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Spacing_2 = "/*" _*+ "*/"
    //-------------------------------------------------------------------
    private boolean Spacing_2()
    {
        begin("");
        if (!next("/*")) return rejectInner();
        while (!next("*/"))
            if (!next()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Spacing_3 = "//" _*+ [\r\n]
    //-------------------------------------------------------------------
    private boolean Spacing_3()
    {
        begin("");
        if (!next("//")) return rejectInner();
        while (!nextIn("\r\n"))
            if (!next()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Identifier = !Keyword Letter LetterOrDigit* Spacing ;
    //=====================================================================
    private boolean Identifier()
    {
        begin("Identifier");
        if (!Identifier_0()) return reject();
        if (!Letter()) return reject();
        while (LetterOrDigit());
        Spacing();
        return accept();
    }

    //-------------------------------------------------------------------
    //  Identifier_0 = !Keyword
    //-------------------------------------------------------------------
    private boolean Identifier_0()
    {
        begin("","not Keyword");
        if (Keyword()) return rejectNot();
        return acceptNot();
    }

    //=====================================================================
    //  Letter = [a-z] / [A-Z] / [_$] ;
    //=====================================================================
    private boolean Letter()
    {
        begin("Letter");
        if (nextIn('a','z')) return accept();
        if (nextIn('A','Z')) return accept();
        if (nextIn("_$")) return accept();
        return reject();
    }

    //=====================================================================
    //  LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;
    //=====================================================================
    private boolean LetterOrDigit()
    {
        begin("LetterOrDigit");
        if (nextIn('a','z')) return accept();
        if (nextIn('A','Z')) return accept();
        if (nextIn('0','9')) return accept();
        if (nextIn("_$")) return accept();
        return reject();
    }

    //=====================================================================
    //  Keyword = ("abstract" / "assert" / "boolean" / "break" / "byte" /
    //    "case" / "catch" / "char" / "class" / "const" / "continue" /
    //    "default" / "double" / "do" / "else" / "enum" / "extends" /
    //    "false" / "finally" / "final" / "float" / "for" / "goto" / "if" /
    //    "implements" / "import" / "interface" / "int" / "instanceof" /
    //    "long" / "native" / "new" / "null" / "package" / "private" /
    //    "protected" / "public" / "return" / "short" / "static" /
    //    "strictfp" / "super" / "switch" / "synchronized" / "this" /
    //    "throws" / "throw" / "transient" / "true" / "try" / "void" /
    //    "volatile" / "while") !LetterOrDigit ;
    //=====================================================================
    private boolean Keyword()
    {
        begin("Keyword");
        if (!next("abstract")
            && !next("assert")
            && !next("boolean")
            && !next("break")
            && !next("byte")
            && !next("case")
            && !next("catch")
            && !next("char")
            && !next("class")
            && !next("const")
            && !next("continue")
            && !next("default")
            && !next("double")
            && !next("do")
            && !next("else")
            && !next("enum")
            && !next("extends")
            && !next("false")
            && !next("finally")
            && !next("final")
            && !next("float")
            && !next("for")
            && !next("goto")
            && !next("if")
            && !next("implements")
            && !next("import")
            && !next("interface")
            && !next("int")
            && !next("instanceof")
            && !next("long")
            && !next("native")
            && !next("new")
            && !next("null")
            && !next("package")
            && !next("private")
            && !next("protected")
            && !next("public")
            && !next("return")
            && !next("short")
            && !next("static")
            && !next("strictfp")
            && !next("super")
            && !next("switch")
            && !next("synchronized")
            && !next("this")
            && !next("throws")
            && !next("throw")
            && !next("transient")
            && !next("true")
            && !next("try")
            && !next("void")
            && !next("volatile")
            && !next("while")
            ) return reject();
        if (!Keyword_0()) return reject();
        return accept();
    }

    //-------------------------------------------------------------------
    //  Keyword_0 = !LetterOrDigit
    //-------------------------------------------------------------------
    private boolean Keyword_0()
    {
        begin("","not LetterOrDigit");
        if (LetterOrDigit()) return rejectNot();
        return acceptNot();
    }

    //=====================================================================
    //  ABSTRACT = "abstract" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean ABSTRACT()
    {
        begin("ABSTRACT");
        if (!next("abstract")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ASSERT = "assert" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean ASSERT()
    {
        begin("ASSERT");
        if (!next("assert")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BOOLEAN = "boolean" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean BOOLEAN()
    {
        begin("BOOLEAN");
        if (!next("boolean")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BREAK = "break" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean BREAK()
    {
        begin("BREAK");
        if (!next("break")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BYTE = "byte" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean BYTE()
    {
        begin("BYTE");
        if (!next("byte")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  CASE = "case" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean CASE()
    {
        begin("CASE");
        if (!next("case")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  CATCH = "catch" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean CATCH()
    {
        begin("CATCH");
        if (!next("catch")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  CHAR = "char" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean CHAR()
    {
        begin("CHAR");
        if (!next("char")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  CLASS = "class" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean CLASS()
    {
        begin("CLASS");
        if (!next("class")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  CONTINUE = "continue" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean CONTINUE()
    {
        begin("CONTINUE");
        if (!next("continue")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DEFAULT = "default" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean DEFAULT()
    {
        begin("DEFAULT");
        if (!next("default")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DOUBLE = "double" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean DOUBLE()
    {
        begin("DOUBLE");
        if (!next("double")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DO = "do" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean DO()
    {
        begin("DO");
        if (!next("do")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ELSE = "else" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean ELSE()
    {
        begin("ELSE");
        if (!next("else")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ENUM = "enum" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean ENUM()
    {
        begin("ENUM");
        if (!next("enum")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  EXTENDS = "extends" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean EXTENDS()
    {
        begin("EXTENDS");
        if (!next("extends")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  FALSE = "false" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean FALSE()
    {
        begin("FALSE");
        if (!next("false")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  FINALLY = "finally" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean FINALLY()
    {
        begin("FINALLY");
        if (!next("finally")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  FINAL = "final" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean FINAL()
    {
        begin("FINAL");
        if (!next("final")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  FLOAT = "float" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean FLOAT()
    {
        begin("FLOAT");
        if (!next("float")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  FOR = "for" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean FOR()
    {
        begin("FOR");
        if (!next("for")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  IF = "if" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean IF()
    {
        begin("IF");
        if (!next("if")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  IMPLEMENTS = "implements" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean IMPLEMENTS()
    {
        begin("IMPLEMENTS");
        if (!next("implements")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  IMPORT = "import" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean IMPORT()
    {
        begin("IMPORT");
        if (!next("import")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  INTERFACE = "interface" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean INTERFACE()
    {
        begin("INTERFACE");
        if (!next("interface")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  INT = "int" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean INT()
    {
        begin("INT");
        if (!next("int")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  INSTANCEOF = "instanceof" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean INSTANCEOF()
    {
        begin("INSTANCEOF");
        if (!next("instanceof")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LONG = "long" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean LONG()
    {
        begin("LONG");
        if (!next("long")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  NATIVE = "native" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean NATIVE()
    {
        begin("NATIVE");
        if (!next("native")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  NEW = "new" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean NEW()
    {
        begin("NEW");
        if (!next("new")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  NULL = "null" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean NULL()
    {
        begin("NULL");
        if (!next("null")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PACKAGE = "package" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean PACKAGE()
    {
        begin("PACKAGE");
        if (!next("package")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PRIVATE = "private" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean PRIVATE()
    {
        begin("PRIVATE");
        if (!next("private")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PROTECTED = "protected" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean PROTECTED()
    {
        begin("PROTECTED");
        if (!next("protected")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PUBLIC = "public" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean PUBLIC()
    {
        begin("PUBLIC");
        if (!next("public")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  RETURN = "return" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean RETURN()
    {
        begin("RETURN");
        if (!next("return")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SHORT = "short" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean SHORT()
    {
        begin("SHORT");
        if (!next("short")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  STATIC = "static" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean STATIC()
    {
        begin("STATIC");
        if (!next("static")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  STRICTFP = "strictfp" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean STRICTFP()
    {
        begin("STRICTFP");
        if (!next("strictfp")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SUPER = "super" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean SUPER()
    {
        begin("SUPER");
        if (!next("super")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SWITCH = "switch" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean SWITCH()
    {
        begin("SWITCH");
        if (!next("switch")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SYNCHRONIZED = "synchronized" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean SYNCHRONIZED()
    {
        begin("SYNCHRONIZED");
        if (!next("synchronized")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  THIS = "this" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean THIS()
    {
        begin("THIS");
        if (!next("this")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  THROWS = "throws" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean THROWS()
    {
        begin("THROWS");
        if (!next("throws")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  THROW = "throw" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean THROW()
    {
        begin("THROW");
        if (!next("throw")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  TRANSIENT = "transient" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean TRANSIENT()
    {
        begin("TRANSIENT");
        if (!next("transient")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  TRUE = "true" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean TRUE()
    {
        begin("TRUE");
        if (!next("true")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  TRY = "try" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean TRY()
    {
        begin("TRY");
        if (!next("try")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  VOID = "void" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean VOID()
    {
        begin("VOID");
        if (!next("void")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  VOLATILE = "volatile" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean VOLATILE()
    {
        begin("VOLATILE");
        if (!next("volatile")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  WHILE = "while" !LetterOrDigit Spacing ;
    //=====================================================================
    private boolean WHILE()
    {
        begin("WHILE");
        if (!next("while")) return reject();
        if (!Keyword_0()) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  Literal = FloatLiteral / IntegerLiteral / BooleanLiteral /
    //    CharLiteral / StringLiteral / NullLiteral ;
    //=====================================================================
    private boolean Literal()
    {
        begin("Literal");
        if (FloatLiteral()) return accept();
        if (IntegerLiteral()) return accept();
        if (BooleanLiteral()) return accept();
        if (CharLiteral()) return accept();
        if (StringLiteral()) return accept();
        if (NullLiteral()) return accept();
        return reject();
    }

    //=====================================================================
    //  IntegerLiteral = (HexNumeral / BinaryNumeral / OctalNumeral /
    //    DecimalNumeral) [lL]? Spacing ;
    //=====================================================================
    private boolean IntegerLiteral()
    {
        begin("IntegerLiteral");
        if (!HexNumeral()
            && !BinaryNumeral()
            && !OctalNumeral()
            && !DecimalNumeral()
            ) return reject();
        nextIn("lL");
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DecimalNumeral = "0" / [1-9] ([_]* [0-9])* ;
    //=====================================================================
    private boolean DecimalNumeral()
    {
        begin("DecimalNumeral");
        if (next('0')) return accept();
        if (DecimalNumeral_0()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  DecimalNumeral_0 = [1-9] ([_]* [0-9])*
    //-------------------------------------------------------------------
    private boolean DecimalNumeral_0()
    {
        begin("");
        if (!nextIn('1','9')) return rejectInner();
        while (DecimalNumeral_1());
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  DecimalNumeral_1 = [_]* [0-9]
    //-------------------------------------------------------------------
    private boolean DecimalNumeral_1()
    {
        begin("");
        while (next('_'));
        if (!nextIn('0','9')) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  HexNumeral = ("0x" / "0X") HexDigits ;
    //=====================================================================
    private boolean HexNumeral()
    {
        begin("HexNumeral");
        if (!next("0x")
            && !next("0X")
            ) return reject();
        if (!HexDigits()) return reject();
        return accept();
    }

    //=====================================================================
    //  OctalNumeral = "0" ([_]* [0-7])+ ;
    //=====================================================================
    private boolean OctalNumeral()
    {
        begin("OctalNumeral");
        if (!next('0')) return reject();
        if (!OctalNumeral_0()) return reject();
        while (OctalNumeral_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  OctalNumeral_0 = [_]* [0-7]
    //-------------------------------------------------------------------
    private boolean OctalNumeral_0()
    {
        begin("");
        while (next('_'));
        if (!nextIn('0','7')) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  BinaryNumeral = ("0b" / "0B") [01] ([_]* [01])* ;
    //=====================================================================
    private boolean BinaryNumeral()
    {
        begin("BinaryNumeral");
        if (!next("0b")
            && !next("0B")
            ) return reject();
        if (!nextIn("01")) return reject();
        while (BinaryNumeral_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  BinaryNumeral_0 = [_]* [01]
    //-------------------------------------------------------------------
    private boolean BinaryNumeral_0()
    {
        begin("");
        while (next('_'));
        if (!nextIn("01")) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  FloatLiteral = (HexadecimalFloatingPointLiteral /
    //    DecimalFloatingPointLiteral) Spacing ;
    //=====================================================================
    private boolean FloatLiteral()
    {
        begin("FloatLiteral");
        if (!HexadecimalFloatingPointLiteral()
            && !DecimalFloatingPointLiteral()
            ) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DecimalFloatingPointLiteral = Digits "." Digits? Exponent? [fFdD]?
    //    / "." Digits Exponent? [fFdD]? / Digits Exponent [fFdD]? / Digits
    //    Exponent? [fFdD] ;
    //=====================================================================
    private boolean DecimalFloatingPointLiteral()
    {
        begin("DecimalFloatingPointLiteral");
        if (DecimalFloatingPointLiteral_0()) return accept();
        if (DecimalFloatingPointLiteral_1()) return accept();
        if (DecimalFloatingPointLiteral_2()) return accept();
        if (DecimalFloatingPointLiteral_3()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  DecimalFloatingPointLiteral_0 = Digits "." Digits? Exponent?
    //    [fFdD]?
    //-------------------------------------------------------------------
    private boolean DecimalFloatingPointLiteral_0()
    {
        begin("");
        if (!Digits()) return rejectInner();
        if (!next('.')) return rejectInner();
        Digits();
        Exponent();
        nextIn("fFdD");
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  DecimalFloatingPointLiteral_1 = "." Digits Exponent? [fFdD]?
    //-------------------------------------------------------------------
    private boolean DecimalFloatingPointLiteral_1()
    {
        begin("");
        if (!next('.')) return rejectInner();
        if (!Digits()) return rejectInner();
        Exponent();
        nextIn("fFdD");
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  DecimalFloatingPointLiteral_2 = Digits Exponent [fFdD]?
    //-------------------------------------------------------------------
    private boolean DecimalFloatingPointLiteral_2()
    {
        begin("");
        if (!Digits()) return rejectInner();
        if (!Exponent()) return rejectInner();
        nextIn("fFdD");
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  DecimalFloatingPointLiteral_3 = Digits Exponent? [fFdD]
    //-------------------------------------------------------------------
    private boolean DecimalFloatingPointLiteral_3()
    {
        begin("");
        if (!Digits()) return rejectInner();
        Exponent();
        if (!nextIn("fFdD")) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Exponent = [eE] [+-]? Digits ;
    //=====================================================================
    private boolean Exponent()
    {
        begin("Exponent");
        if (!nextIn("eE")) return reject();
        nextIn("+-");
        if (!Digits()) return reject();
        return accept();
    }

    //=====================================================================
    //  HexadecimalFloatingPointLiteral = HexSignificand BinaryExponent
    //    [fFdD]? ;
    //=====================================================================
    private boolean HexadecimalFloatingPointLiteral()
    {
        begin("HexadecimalFloatingPointLiteral");
        if (!HexSignificand()) return reject();
        if (!BinaryExponent()) return reject();
        nextIn("fFdD");
        return accept();
    }

    //=====================================================================
    //  HexSignificand = ("0x" / "0X") HexDigits? "." HexDigits /
    //    HexNumeral "."? ;
    //=====================================================================
    private boolean HexSignificand()
    {
        begin("HexSignificand");
        if (HexSignificand_0()) return accept();
        if (HexSignificand_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  HexSignificand_0 = ("0x" / "0X") HexDigits? "." HexDigits
    //-------------------------------------------------------------------
    private boolean HexSignificand_0()
    {
        begin("");
        if (!next("0x")
            && !next("0X")
            ) return rejectInner();
        HexDigits();
        if (!next('.')) return rejectInner();
        if (!HexDigits()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  HexSignificand_1 = HexNumeral "."?
    //-------------------------------------------------------------------
    private boolean HexSignificand_1()
    {
        begin("");
        if (!HexNumeral()) return rejectInner();
        next('.');
        return acceptInner();
    }

    //=====================================================================
    //  HexDigits = HexDigit ([_]* HexDigit)* ;
    //=====================================================================
    private boolean HexDigits()
    {
        begin("HexDigits");
        if (!HexDigit()) return reject();
        while (HexDigits_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  HexDigits_0 = [_]* HexDigit
    //-------------------------------------------------------------------
    private boolean HexDigits_0()
    {
        begin("");
        while (next('_'));
        if (!HexDigit()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  HexDigit = [a-f] / [A-F] / [0-9] ;
    //=====================================================================
    private boolean HexDigit()
    {
        begin("HexDigit");
        if (nextIn('a','f')) return accept();
        if (nextIn('A','F')) return accept();
        if (nextIn('0','9')) return accept();
        return reject();
    }

    //=====================================================================
    //  BinaryExponent = [pP] [+-]? Digits ;
    //=====================================================================
    private boolean BinaryExponent()
    {
        begin("BinaryExponent");
        if (!nextIn("pP")) return reject();
        nextIn("+-");
        if (!Digits()) return reject();
        return accept();
    }

    //=====================================================================
    //  Digits = [0-9] ([_]* [0-9])* ;
    //=====================================================================
    private boolean Digits()
    {
        begin("Digits");
        if (!nextIn('0','9')) return reject();
        while (DecimalNumeral_1());
        return accept();
    }

    //=====================================================================
    //  BooleanLiteral = TRUE / FALSE ;
    //=====================================================================
    private boolean BooleanLiteral()
    {
        begin("BooleanLiteral");
        if (TRUE()) return accept();
        if (FALSE()) return accept();
        return reject();
    }

    //=====================================================================
    //  CharLiteral = "'" (Escape / !['\\n\r] _) "'" Spacing ;
    //=====================================================================
    private boolean CharLiteral()
    {
        begin("CharLiteral");
        if (!next('\'')) return reject();
        if (!Escape()
            && !CharLiteral_0()
            ) return reject();
        if (!next('\'')) return reject();
        Spacing();
        return accept();
    }

    //-------------------------------------------------------------------
    //  CharLiteral_0 = !['\\n\r] _
    //-------------------------------------------------------------------
    private boolean CharLiteral_0()
    {
        begin("");
        if (!aheadNotIn("'\\\n\r")) return rejectInner();
        if (!next()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  StringLiteral = """ (Escape / !["\\n\r] _)* """ Spacing ;
    //=====================================================================
    private boolean StringLiteral()
    {
        begin("StringLiteral");
        if (!next('"')) return reject();
        while (StringLiteral_0());
        if (!next('"')) return reject();
        Spacing();
        return accept();
    }

    //-------------------------------------------------------------------
    //  StringLiteral_0 = Escape / !["\\n\r] _
    //-------------------------------------------------------------------
    private boolean StringLiteral_0()
    {
        begin("");
        if (Escape()) return acceptInner();
        if (StringLiteral_1()) return acceptInner();
        return rejectInner();
    }

    //-------------------------------------------------------------------
    //  StringLiteral_1 = !["\\n\r] _
    //-------------------------------------------------------------------
    private boolean StringLiteral_1()
    {
        begin("");
        if (!aheadNotIn("\"\\\n\r")) return rejectInner();
        if (!next()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Escape = "\" ([btnfr"'\] / OctalEscape / UnicodeEscape) ;
    //=====================================================================
    private boolean Escape()
    {
        begin("Escape");
        if (!next('\\')) return reject();
        if (!nextIn("btnfr\"'\\")
            && !OctalEscape()
            && !UnicodeEscape()
            ) return reject();
        return accept();
    }

    //=====================================================================
    //  OctalEscape = [0-3] [0-7] [0-7] / [0-7] [0-7] / [0-7] ;
    //=====================================================================
    private boolean OctalEscape()
    {
        begin("OctalEscape");
        if (OctalEscape_0()) return accept();
        if (OctalEscape_1()) return accept();
        if (nextIn('0','7')) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  OctalEscape_0 = [0-3] [0-7] [0-7]
    //-------------------------------------------------------------------
    private boolean OctalEscape_0()
    {
        begin("");
        if (!nextIn('0','3')) return rejectInner();
        if (!nextIn('0','7')) return rejectInner();
        if (!nextIn('0','7')) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  OctalEscape_1 = [0-7] [0-7]
    //-------------------------------------------------------------------
    private boolean OctalEscape_1()
    {
        begin("");
        if (!nextIn('0','7')) return rejectInner();
        if (!nextIn('0','7')) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  UnicodeEscape = "u"+ HexDigit HexDigit HexDigit HexDigit ;
    //=====================================================================
    private boolean UnicodeEscape()
    {
        begin("UnicodeEscape");
        if (!next('u')) return reject();
        while (next('u'));
        if (!HexDigit()) return reject();
        if (!HexDigit()) return reject();
        if (!HexDigit()) return reject();
        if (!HexDigit()) return reject();
        return accept();
    }

    //=====================================================================
    //  NullLiteral = NULL ;
    //=====================================================================
    private boolean NullLiteral()
    {
        begin("NullLiteral");
        if (!NULL()) return reject();
        return accept();
    }

    //=====================================================================
    //  AT = "@" Spacing ;
    //=====================================================================
    private boolean AT()
    {
        begin("AT");
        if (!next('@')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  COLONCOLON = "::" Spacing ;
    //=====================================================================
    private boolean COLONCOLON()
    {
        begin("COLONCOLON");
        if (!next("::")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  COMMA = "," Spacing ;
    //=====================================================================
    private boolean COMMA()
    {
        begin("COMMA");
        if (!next(',')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DOT = "." Spacing ;
    //=====================================================================
    private boolean DOT()
    {
        begin("DOT");
        if (!next('.')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ELLIPSIS = "..." Spacing ;
    //=====================================================================
    private boolean ELLIPSIS()
    {
        begin("ELLIPSIS");
        if (!next("...")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LPAR = "(" Spacing ;
    //=====================================================================
    private boolean LPAR()
    {
        begin("LPAR");
        if (!next('(')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LBRK = "[" Spacing ;
    //=====================================================================
    private boolean LBRK()
    {
        begin("LBRK");
        if (!next('[')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  RBRK = "]" Spacing ;
    //=====================================================================
    private boolean RBRK()
    {
        begin("RBRK");
        if (!next(']')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  RPAR = ")" Spacing ;
    //=====================================================================
    private boolean RPAR()
    {
        begin("RPAR");
        if (!next(')')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LWING = "{" Spacing ;
    //=====================================================================
    private boolean LWING()
    {
        begin("LWING");
        if (!next('{')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  RWING = "}" Spacing ;
    //=====================================================================
    private boolean RWING()
    {
        begin("RWING");
        if (!next('}')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SEMI = ";" Spacing ;
    //=====================================================================
    private boolean SEMI()
    {
        begin("SEMI");
        if (!next(';')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  AND = "&" ![=&] Spacing ;
    //=====================================================================
    private boolean AND()
    {
        begin("AND");
        if (!next('&')) return reject();
        if (!aheadNotIn("=&")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ANDAND = "&&" Spacing ;
    //=====================================================================
    private boolean ANDAND()
    {
        begin("ANDAND");
        if (!next("&&")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ANDEQU = "&=" Spacing ;
    //=====================================================================
    private boolean ANDEQU()
    {
        begin("ANDEQU");
        if (!next("&=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  ARROW = "->" Spacing ;
    //=====================================================================
    private boolean ARROW()
    {
        begin("ARROW");
        if (!next("->")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BANG = "!" ![=] Spacing ;
    //=====================================================================
    private boolean BANG()
    {
        begin("BANG");
        if (!next('!')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BSR = ">>>" ![=] Spacing ;
    //=====================================================================
    private boolean BSR()
    {
        begin("BSR");
        if (!next(">>>")) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BSREQU = ">>>=" Spacing ;
    //=====================================================================
    private boolean BSREQU()
    {
        begin("BSREQU");
        if (!next(">>>=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  COLON = ":" ![:] Spacing ;
    //=====================================================================
    private boolean COLON()
    {
        begin("COLON");
        if (!next(':')) return reject();
        if (!aheadNot(':')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DEC = "--" Spacing ;
    //=====================================================================
    private boolean DEC()
    {
        begin("DEC");
        if (!next("--")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DIV = "/" ![=] Spacing ;
    //=====================================================================
    private boolean DIV()
    {
        begin("DIV");
        if (!next('/')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  DIVEQU = "/=" Spacing ;
    //=====================================================================
    private boolean DIVEQU()
    {
        begin("DIVEQU");
        if (!next("/=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  EQU = "=" ![=] Spacing ;
    //=====================================================================
    private boolean EQU()
    {
        begin("EQU");
        if (!next('=')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  EQUAL = "==" Spacing ;
    //=====================================================================
    private boolean EQUAL()
    {
        begin("EQUAL");
        if (!next("==")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  GE = ">=" Spacing ;
    //=====================================================================
    private boolean GE()
    {
        begin("GE");
        if (!next(">=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  GT = ">" ![=>] Spacing ;
    //=====================================================================
    private boolean GT()
    {
        begin("GT");
        if (!next('>')) return reject();
        if (!aheadNotIn("=>")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  HAT = "^" ![=] Spacing ;
    //=====================================================================
    private boolean HAT()
    {
        begin("HAT");
        if (!next('^')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  HATEQU = "^=" Spacing ;
    //=====================================================================
    private boolean HATEQU()
    {
        begin("HATEQU");
        if (!next("^=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  INC = "++" Spacing ;
    //=====================================================================
    private boolean INC()
    {
        begin("INC");
        if (!next("++")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LE = "<=" Spacing ;
    //=====================================================================
    private boolean LE()
    {
        begin("LE");
        if (!next("<=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LPOINT = "<" Spacing ;
    //=====================================================================
    private boolean LPOINT()
    {
        begin("LPOINT");
        if (!next('<')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  LT = "<" ![=<] Spacing ;
    //=====================================================================
    private boolean LT()
    {
        begin("LT");
        if (!next('<')) return reject();
        if (!aheadNotIn("=<")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  MINUS = "-" ![=->] Spacing ;
    //=====================================================================
    private boolean MINUS()
    {
        begin("MINUS");
        if (!next('-')) return reject();
        if (!aheadNotIn("=->")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  MINUSEQU = "-=" Spacing ;
    //=====================================================================
    private boolean MINUSEQU()
    {
        begin("MINUSEQU");
        if (!next("-=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  MOD = "%" ![=] Spacing ;
    //=====================================================================
    private boolean MOD()
    {
        begin("MOD");
        if (!next('%')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  MODEQU = "%=" Spacing ;
    //=====================================================================
    private boolean MODEQU()
    {
        begin("MODEQU");
        if (!next("%=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  NOTEQUAL = "!=" Spacing ;
    //=====================================================================
    private boolean NOTEQUAL()
    {
        begin("NOTEQUAL");
        if (!next("!=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  OR = "|" ![=|] Spacing ;
    //=====================================================================
    private boolean OR()
    {
        begin("OR");
        if (!next('|')) return reject();
        if (!aheadNotIn("=|")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  OREQU = "|=" Spacing ;
    //=====================================================================
    private boolean OREQU()
    {
        begin("OREQU");
        if (!next("|=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  OROR = "||" Spacing ;
    //=====================================================================
    private boolean OROR()
    {
        begin("OROR");
        if (!next("||")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PLUS = "+" ![=+] Spacing ;
    //=====================================================================
    private boolean PLUS()
    {
        begin("PLUS");
        if (!next('+')) return reject();
        if (!aheadNotIn("=+")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  PLUSEQU = "+=" Spacing ;
    //=====================================================================
    private boolean PLUSEQU()
    {
        begin("PLUSEQU");
        if (!next("+=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  QUERY = "?" Spacing ;
    //=====================================================================
    private boolean QUERY()
    {
        begin("QUERY");
        if (!next('?')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  RPOINT = ">" Spacing ;
    //=====================================================================
    private boolean RPOINT()
    {
        begin("RPOINT");
        if (!next('>')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SL = "<<" ![=] Spacing ;
    //=====================================================================
    private boolean SL()
    {
        begin("SL");
        if (!next("<<")) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SLEQU = "<<=" Spacing ;
    //=====================================================================
    private boolean SLEQU()
    {
        begin("SLEQU");
        if (!next("<<=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SR = ">>" ![=>] Spacing ;
    //=====================================================================
    private boolean SR()
    {
        begin("SR");
        if (!next(">>")) return reject();
        if (!aheadNotIn("=>")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  SREQU = ">>=" Spacing ;
    //=====================================================================
    private boolean SREQU()
    {
        begin("SREQU");
        if (!next(">>=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  STAR = "*" ![=] Spacing ;
    //=====================================================================
    private boolean STAR()
    {
        begin("STAR");
        if (!next('*')) return reject();
        if (!aheadNot('=')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  STAREQU = "*=" Spacing ;
    //=====================================================================
    private boolean STAREQU()
    {
        begin("STAREQU");
        if (!next("*=")) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  TILDE = "~" Spacing ;
    //=====================================================================
    private boolean TILDE()
    {
        begin("TILDE");
        if (!next('~')) return reject();
        Spacing();
        return accept();
    }

    //=====================================================================
    //  BasicType = BYTE / SHORT / INT / LONG / CHAR / FLOAT / DOUBLE /
    //    BOOLEAN ;
    //=====================================================================
    private boolean BasicType()
    {
        begin("BasicType");
        if (BYTE()) return accept();
        if (SHORT()) return accept();
        if (INT()) return accept();
        if (LONG()) return accept();
        if (CHAR()) return accept();
        if (FLOAT()) return accept();
        if (DOUBLE()) return accept();
        if (BOOLEAN()) return accept();
        return reject();
    }

    //=====================================================================
    //  PrimitiveType = Annotation* BasicType ;
    //=====================================================================
    private boolean PrimitiveType()
    {
        begin("PrimitiveType");
        while (Annotation());
        if (!BasicType()) return reject();
        return accept();
    }

    //=====================================================================
    //  ReferenceType = PrimitiveType Dim+ / ClassType Dim* ;
    //=====================================================================
    private boolean ReferenceType()
    {
        begin("ReferenceType");
        if (ReferenceType_0()) return accept();
        if (ReferenceType_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  ReferenceType_0 = PrimitiveType Dim+
    //-------------------------------------------------------------------
    private boolean ReferenceType_0()
    {
        begin("");
        if (!PrimitiveType()) return rejectInner();
        if (!Dim()) return rejectInner();
        while (Dim());
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ReferenceType_1 = ClassType Dim*
    //-------------------------------------------------------------------
    private boolean ReferenceType_1()
    {
        begin("");
        if (!ClassType()) return rejectInner();
        while (Dim());
        return acceptInner();
    }

    //=====================================================================
    //  ClassType = Annotation* Identifier TypeArguments? (DOT Annotation*
    //    Identifier TypeArguments?)* ;
    //=====================================================================
    private boolean ClassType()
    {
        begin("ClassType");
        while (Annotation());
        if (!Identifier()) return reject();
        TypeArguments();
        while (ClassType_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ClassType_0 = DOT Annotation* Identifier TypeArguments?
    //-------------------------------------------------------------------
    private boolean ClassType_0()
    {
        begin("");
        if (!DOT()) return rejectInner();
        while (Annotation());
        if (!Identifier()) return rejectInner();
        TypeArguments();
        return acceptInner();
    }

    //=====================================================================
    //  Type = PrimitiveType / ClassType ;
    //=====================================================================
    private boolean Type()
    {
        begin("Type");
        if (PrimitiveType()) return accept();
        if (ClassType()) return accept();
        return reject();
    }

    //=====================================================================
    //  ArrayType = PrimitiveType Dim+ / ClassType Dim+ ;
    //=====================================================================
    private boolean ArrayType()
    {
        begin("ArrayType");
        if (ReferenceType_0()) return accept();
        if (ArrayType_0()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  ArrayType_0 = ClassType Dim+
    //-------------------------------------------------------------------
    private boolean ArrayType_0()
    {
        begin("");
        if (!ClassType()) return rejectInner();
        if (!Dim()) return rejectInner();
        while (Dim());
        return acceptInner();
    }

    //=====================================================================
    //  TypeVariable = Annotation* Identifier ;
    //=====================================================================
    private boolean TypeVariable()
    {
        begin("TypeVariable");
        while (Annotation());
        if (!Identifier()) return reject();
        return accept();
    }

    //=====================================================================
    //  Dim = Annotation* LBRK RBRK ;
    //=====================================================================
    private boolean Dim()
    {
        begin("Dim");
        while (Annotation());
        if (!LBRK()) return reject();
        if (!RBRK()) return reject();
        return accept();
    }

    //=====================================================================
    //  TypeParameter = TypeParameterModifier* Identifier TypeBound? ;
    //=====================================================================
    private boolean TypeParameter()
    {
        begin("TypeParameter");
        while (TypeParameterModifier());
        if (!Identifier()) return reject();
        TypeBound();
        return accept();
    }

    //=====================================================================
    //  TypeParameterModifier = Annotation ;
    //=====================================================================
    private boolean TypeParameterModifier()
    {
        begin("TypeParameterModifier");
        if (!Annotation()) return reject();
        return accept();
    }

    //=====================================================================
    //  TypeBound = EXTENDS (ClassType AdditionalBound* / TypeVariable) ;
    //=====================================================================
    private boolean TypeBound()
    {
        begin("TypeBound");
        if (!EXTENDS()) return reject();
        if (!TypeBound_0()
            && !TypeVariable()
            ) return reject();
        return accept();
    }

    //-------------------------------------------------------------------
    //  TypeBound_0 = ClassType AdditionalBound*
    //-------------------------------------------------------------------
    private boolean TypeBound_0()
    {
        begin("");
        if (!ClassType()) return rejectInner();
        while (AdditionalBound());
        return acceptInner();
    }

    //=====================================================================
    //  AdditionalBound = AND ClassType ;
    //=====================================================================
    private boolean AdditionalBound()
    {
        begin("AdditionalBound");
        if (!AND()) return reject();
        if (!ClassType()) return reject();
        return accept();
    }

    //=====================================================================
    //  TypeArguments = LPOINT TypeArgumentList RPOINT ;
    //=====================================================================
    private boolean TypeArguments()
    {
        begin("TypeArguments");
        if (!LPOINT()) return reject();
        if (!TypeArgumentList()) return reject();
        if (!RPOINT()) return reject();
        return accept();
    }

    //=====================================================================
    //  TypeArgumentList = TypeArgument (COMMA TypeArgument)* ;
    //=====================================================================
    private boolean TypeArgumentList()
    {
        begin("TypeArgumentList");
        if (!TypeArgument()) return reject();
        while (TypeArgumentList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  TypeArgumentList_0 = COMMA TypeArgument
    //-------------------------------------------------------------------
    private boolean TypeArgumentList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!TypeArgument()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  TypeArgument = ReferenceType / Wildcard ;
    //=====================================================================
    private boolean TypeArgument()
    {
        begin("TypeArgument");
        if (ReferenceType()) return accept();
        if (Wildcard()) return accept();
        return reject();
    }

    //=====================================================================
    //  Wildcard = Annotation* QUERY WildcardBounds? ;
    //=====================================================================
    private boolean Wildcard()
    {
        begin("Wildcard");
        while (Annotation());
        if (!QUERY()) return reject();
        WildcardBounds();
        return accept();
    }

    //=====================================================================
    //  WildcardBounds = EXTENDS ReferenceType / SUPER ReferenceType ;
    //=====================================================================
    private boolean WildcardBounds()
    {
        begin("WildcardBounds");
        if (WildcardBounds_0()) return accept();
        if (WildcardBounds_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  WildcardBounds_0 = EXTENDS ReferenceType
    //-------------------------------------------------------------------
    private boolean WildcardBounds_0()
    {
        begin("");
        if (!EXTENDS()) return rejectInner();
        if (!ReferenceType()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  WildcardBounds_1 = SUPER ReferenceType
    //-------------------------------------------------------------------
    private boolean WildcardBounds_1()
    {
        begin("");
        if (!SUPER()) return rejectInner();
        if (!ReferenceType()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  QualIdent = Identifier (DOT Identifier)* ;
    //=====================================================================
    private boolean QualIdent()
    {
        begin("QualIdent");
        if (!Identifier()) return reject();
        while (QualIdent_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  QualIdent_0 = DOT Identifier
    //-------------------------------------------------------------------
    private boolean QualIdent_0()
    {
        begin("");
        if (!DOT()) return rejectInner();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  CompilationUnit = PackageDeclaration? ImportDeclaration*
    //    TypeDeclaration* ;
    //=====================================================================
    private boolean CompilationUnit()
    {
        begin("CompilationUnit");
        PackageDeclaration();
        while (ImportDeclaration());
        while (TypeDeclaration());
        return accept();
    }

    //=====================================================================
    //  PackageDeclaration = PackageModifier* PACKAGE Identifier (DOT
    //    Identifier)* SEMI ;
    //=====================================================================
    private boolean PackageDeclaration()
    {
        begin("PackageDeclaration");
        while (PackageModifier());
        if (!PACKAGE()) return reject();
        if (!Identifier()) return reject();
        while (QualIdent_0());
        if (!SEMI()) return reject();
        return accept();
    }

    //=====================================================================
    //  PackageModifier = Annotation ;
    //=====================================================================
    private boolean PackageModifier()
    {
        begin("PackageModifier");
        if (!Annotation()) return reject();
        return accept();
    }

    //=====================================================================
    //  ImportDeclaration = IMPORT STATIC? QualIdent (DOT STAR)? SEMI /
    //    SEMI ;
    //=====================================================================
    private boolean ImportDeclaration()
    {
        begin("ImportDeclaration");
        if (ImportDeclaration_0()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  ImportDeclaration_0 = IMPORT STATIC? QualIdent (DOT STAR)? SEMI
    //-------------------------------------------------------------------
    private boolean ImportDeclaration_0()
    {
        begin("");
        if (!IMPORT()) return rejectInner();
        STATIC();
        if (!QualIdent()) return rejectInner();
        ImportDeclaration_1();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ImportDeclaration_1 = DOT STAR
    //-------------------------------------------------------------------
    private boolean ImportDeclaration_1()
    {
        begin("");
        if (!DOT()) return rejectInner();
        if (!STAR()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  TypeDeclaration = ClassDeclaration / InterfaceDeclaration / SEMI ;
    //=====================================================================
    private boolean TypeDeclaration()
    {
        begin("TypeDeclaration");
        if (ClassDeclaration()) return accept();
        if (InterfaceDeclaration()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //=====================================================================
    //  ClassDeclaration = NormalClassDeclaration / EnumDeclaration ;
    //=====================================================================
    private boolean ClassDeclaration()
    {
        begin("ClassDeclaration");
        if (NormalClassDeclaration()) return accept();
        if (EnumDeclaration()) return accept();
        return reject();
    }

    //=====================================================================
    //  NormalClassDeclaration = ClassModifier* CLASS Identifier
    //    TypeParameters? Superclass? Superinterfaces? ClassBody ;
    //=====================================================================
    private boolean NormalClassDeclaration()
    {
        begin("NormalClassDeclaration");
        while (ClassModifier());
        if (!CLASS()) return reject();
        if (!Identifier()) return reject();
        TypeParameters();
        Superclass();
        Superinterfaces();
        if (!ClassBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  ClassModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
    //    ABSTRACT / STATIC / FINAL / STRICTFP ;
    //=====================================================================
    private boolean ClassModifier()
    {
        begin("ClassModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (PROTECTED()) return accept();
        if (PRIVATE()) return accept();
        if (ABSTRACT()) return accept();
        if (STATIC()) return accept();
        if (FINAL()) return accept();
        if (STRICTFP()) return accept();
        return reject();
    }

    //=====================================================================
    //  TypeParameters = LPOINT TypeParameterList RPOINT ;
    //=====================================================================
    private boolean TypeParameters()
    {
        begin("TypeParameters");
        if (!LPOINT()) return reject();
        if (!TypeParameterList()) return reject();
        if (!RPOINT()) return reject();
        return accept();
    }

    //=====================================================================
    //  TypeParameterList = TypeParameter (COMMA TypeParameter)* ;
    //=====================================================================
    private boolean TypeParameterList()
    {
        begin("TypeParameterList");
        if (!TypeParameter()) return reject();
        while (TypeParameterList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  TypeParameterList_0 = COMMA TypeParameter
    //-------------------------------------------------------------------
    private boolean TypeParameterList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!TypeParameter()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Superclass = EXTENDS ClassType ;
    //=====================================================================
    private boolean Superclass()
    {
        begin("Superclass");
        if (!EXTENDS()) return reject();
        if (!ClassType()) return reject();
        return accept();
    }

    //=====================================================================
    //  Superinterfaces = IMPLEMENTS InterfaceTypeList ;
    //=====================================================================
    private boolean Superinterfaces()
    {
        begin("Superinterfaces");
        if (!IMPLEMENTS()) return reject();
        if (!InterfaceTypeList()) return reject();
        return accept();
    }

    //=====================================================================
    //  InterfaceTypeList = ClassType (COMMA ClassType)* ;
    //=====================================================================
    private boolean InterfaceTypeList()
    {
        begin("InterfaceTypeList");
        if (!ClassType()) return reject();
        while (InterfaceTypeList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  InterfaceTypeList_0 = COMMA ClassType
    //-------------------------------------------------------------------
    private boolean InterfaceTypeList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!ClassType()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  ClassBody = LWING ClassBodyDeclaration* RWING ;
    //=====================================================================
    private boolean ClassBody()
    {
        begin("ClassBody");
        if (!LWING()) return reject();
        while (ClassBodyDeclaration());
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  ClassBodyDeclaration = ClassMemberDeclaration / InstanceInitializer
    //    / StaticInitializer / ConstructorDeclaration ;
    //=====================================================================
    private boolean ClassBodyDeclaration()
    {
        begin("ClassBodyDeclaration");
        if (ClassMemberDeclaration()) return accept();
        if (InstanceInitializer()) return accept();
        if (StaticInitializer()) return accept();
        if (ConstructorDeclaration()) return accept();
        return reject();
    }

    //=====================================================================
    //  ClassMemberDeclaration = FieldDeclaration / MethodDeclaration /
    //    ClassDeclaration / InterfaceDeclaration / SEMI ;
    //=====================================================================
    private boolean ClassMemberDeclaration()
    {
        begin("ClassMemberDeclaration");
        if (FieldDeclaration()) return accept();
        if (MethodDeclaration()) return accept();
        if (ClassDeclaration()) return accept();
        if (InterfaceDeclaration()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //=====================================================================
    //  FieldDeclaration = FieldModifier* UnannType VariableDeclaratorList
    //    SEMI ;
    //=====================================================================
    private boolean FieldDeclaration()
    {
        begin("FieldDeclaration");
        while (FieldModifier());
        if (!UnannType()) return reject();
        if (!VariableDeclaratorList()) return reject();
        if (!SEMI()) return reject();
        return accept();
    }

    //=====================================================================
    //  VariableDeclaratorList = VariableDeclarator (COMMA
    //    VariableDeclarator)* ;
    //=====================================================================
    private boolean VariableDeclaratorList()
    {
        begin("VariableDeclaratorList");
        if (!VariableDeclarator()) return reject();
        while (VariableDeclaratorList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  VariableDeclaratorList_0 = COMMA VariableDeclarator
    //-------------------------------------------------------------------
    private boolean VariableDeclaratorList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!VariableDeclarator()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  VariableDeclarator = VariableDeclaratorId (EQU
    //    VariableInitializer)? ;
    //=====================================================================
    private boolean VariableDeclarator()
    {
        begin("VariableDeclarator");
        if (!VariableDeclaratorId()) return reject();
        VariableDeclarator_0();
        return accept();
    }

    //-------------------------------------------------------------------
    //  VariableDeclarator_0 = EQU VariableInitializer
    //-------------------------------------------------------------------
    private boolean VariableDeclarator_0()
    {
        begin("");
        if (!EQU()) return rejectInner();
        if (!VariableInitializer()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  VariableDeclaratorId = Identifier Dim* ;
    //=====================================================================
    private boolean VariableDeclaratorId()
    {
        begin("VariableDeclaratorId");
        if (!Identifier()) return reject();
        while (Dim());
        return accept();
    }

    //=====================================================================
    //  VariableInitializer = Expression / ArrayInitializer ;
    //=====================================================================
    private boolean VariableInitializer()
    {
        begin("VariableInitializer");
        if (Expression()) return accept();
        if (ArrayInitializer()) return accept();
        return reject();
    }

    //=====================================================================
    //  UnannClassType = Identifier TypeArguments? (DOT Annotation*
    //    Identifier TypeArguments?)* ;
    //=====================================================================
    private boolean UnannClassType()
    {
        begin("UnannClassType");
        if (!Identifier()) return reject();
        TypeArguments();
        while (ClassType_0());
        return accept();
    }

    //=====================================================================
    //  UnannType = BasicType Dim* / UnannClassType Dim* ;
    //=====================================================================
    private boolean UnannType()
    {
        begin("UnannType");
        if (UnannType_0()) return accept();
        if (UnannType_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  UnannType_0 = BasicType Dim*
    //-------------------------------------------------------------------
    private boolean UnannType_0()
    {
        begin("");
        if (!BasicType()) return rejectInner();
        while (Dim());
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  UnannType_1 = UnannClassType Dim*
    //-------------------------------------------------------------------
    private boolean UnannType_1()
    {
        begin("");
        if (!UnannClassType()) return rejectInner();
        while (Dim());
        return acceptInner();
    }

    //=====================================================================
    //  FieldModifier = Annotation / PUBLIC / PROTECTED / PRIVATE / STATIC
    //    / FINAL / TRANSIENT / VOLATILE ;
    //=====================================================================
    private boolean FieldModifier()
    {
        begin("FieldModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (PROTECTED()) return accept();
        if (PRIVATE()) return accept();
        if (STATIC()) return accept();
        if (FINAL()) return accept();
        if (TRANSIENT()) return accept();
        if (VOLATILE()) return accept();
        return reject();
    }

    //=====================================================================
    //  MethodDeclaration = MethodModifier* MethodHeader MethodBody ;
    //=====================================================================
    private boolean MethodDeclaration()
    {
        begin("MethodDeclaration");
        while (MethodModifier());
        if (!MethodHeader()) return reject();
        if (!MethodBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  MethodHeader = Result MethodDeclarator Throws? / TypeParameters
    //    Annotation* Result MethodDeclarator Throws? ;
    //=====================================================================
    private boolean MethodHeader()
    {
        begin("MethodHeader");
        if (MethodHeader_0()) return accept();
        if (MethodHeader_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  MethodHeader_0 = Result MethodDeclarator Throws?
    //-------------------------------------------------------------------
    private boolean MethodHeader_0()
    {
        begin("");
        if (!Result()) return rejectInner();
        if (!MethodDeclarator()) return rejectInner();
        Throws();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  MethodHeader_1 = TypeParameters Annotation* Result
    //    MethodDeclarator Throws?
    //-------------------------------------------------------------------
    private boolean MethodHeader_1()
    {
        begin("");
        if (!TypeParameters()) return rejectInner();
        while (Annotation());
        if (!Result()) return rejectInner();
        if (!MethodDeclarator()) return rejectInner();
        Throws();
        return acceptInner();
    }

    //=====================================================================
    //  MethodDeclarator = Identifier LPAR FormalParameterList? RPAR Dim*
    //    ;
    //=====================================================================
    private boolean MethodDeclarator()
    {
        begin("MethodDeclarator");
        if (!Identifier()) return reject();
        if (!LPAR()) return reject();
        FormalParameterList();
        if (!RPAR()) return reject();
        while (Dim());
        return accept();
    }

    //=====================================================================
    //  FormalParameterList = (ReceiverParameter / FormalParameter) (COMMA
    //    FormalParameter)* ;
    //=====================================================================
    private boolean FormalParameterList()
    {
        begin("FormalParameterList");
        if (!ReceiverParameter()
            && !FormalParameter()
            ) return reject();
        while (FormalParameterList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  FormalParameterList_0 = COMMA FormalParameter
    //-------------------------------------------------------------------
    private boolean FormalParameterList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!FormalParameter()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  FormalParameter = VariableModifier* UnannType VariableDeclaratorId
    //    / VariableModifier* UnannType Annotation* ELLIPSIS
    //    VariableDeclaratorId !COMMA ;
    //=====================================================================
    private boolean FormalParameter()
    {
        begin("FormalParameter");
        if (FormalParameter_0()) return accept();
        if (FormalParameter_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  FormalParameter_0 = VariableModifier* UnannType
    //    VariableDeclaratorId
    //-------------------------------------------------------------------
    private boolean FormalParameter_0()
    {
        begin("");
        while (VariableModifier());
        if (!UnannType()) return rejectInner();
        if (!VariableDeclaratorId()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  FormalParameter_1 = VariableModifier* UnannType Annotation*
    //    ELLIPSIS VariableDeclaratorId !COMMA
    //-------------------------------------------------------------------
    private boolean FormalParameter_1()
    {
        begin("");
        while (VariableModifier());
        if (!UnannType()) return rejectInner();
        while (Annotation());
        if (!ELLIPSIS()) return rejectInner();
        if (!VariableDeclaratorId()) return rejectInner();
        if (!FormalParameter_2()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  FormalParameter_2 = !COMMA
    //-------------------------------------------------------------------
    private boolean FormalParameter_2()
    {
        begin("","not COMMA");
        if (COMMA()) return rejectNot();
        return acceptNot();
    }

    //=====================================================================
    //  VariableModifier = Annotation / FINAL ;
    //=====================================================================
    private boolean VariableModifier()
    {
        begin("VariableModifier");
        if (Annotation()) return accept();
        if (FINAL()) return accept();
        return reject();
    }

    //=====================================================================
    //  ReceiverParameter = VariableModifier* UnannType (Identifier DOT)?
    //    THIS ;
    //=====================================================================
    private boolean ReceiverParameter()
    {
        begin("ReceiverParameter");
        while (VariableModifier());
        if (!UnannType()) return reject();
        ReceiverParameter_0();
        if (!THIS()) return reject();
        return accept();
    }

    //-------------------------------------------------------------------
    //  ReceiverParameter_0 = Identifier DOT
    //-------------------------------------------------------------------
    private boolean ReceiverParameter_0()
    {
        begin("");
        if (!Identifier()) return rejectInner();
        if (!DOT()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Result = UnannType / VOID ;
    //=====================================================================
    private boolean Result()
    {
        begin("Result");
        if (UnannType()) return accept();
        if (VOID()) return accept();
        return reject();
    }

    //=====================================================================
    //  MethodModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
    //    ABSTRACT / STATIC / FINAL / SYNCHRONIZED / NATIVE / STRICTFP ;
    //=====================================================================
    private boolean MethodModifier()
    {
        begin("MethodModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (PROTECTED()) return accept();
        if (PRIVATE()) return accept();
        if (ABSTRACT()) return accept();
        if (STATIC()) return accept();
        if (FINAL()) return accept();
        if (SYNCHRONIZED()) return accept();
        if (NATIVE()) return accept();
        if (STRICTFP()) return accept();
        return reject();
    }

    //=====================================================================
    //  Throws = THROWS ExceptionTypeList ;
    //=====================================================================
    private boolean Throws()
    {
        begin("Throws");
        if (!THROWS()) return reject();
        if (!ExceptionTypeList()) return reject();
        return accept();
    }

    //=====================================================================
    //  ExceptionTypeList = ExceptionType (COMMA ExceptionType)* ;
    //=====================================================================
    private boolean ExceptionTypeList()
    {
        begin("ExceptionTypeList");
        if (!ExceptionType()) return reject();
        while (ExceptionTypeList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ExceptionTypeList_0 = COMMA ExceptionType
    //-------------------------------------------------------------------
    private boolean ExceptionTypeList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!ExceptionType()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  ExceptionType = ClassType / TypeVariable ;
    //=====================================================================
    private boolean ExceptionType()
    {
        begin("ExceptionType");
        if (ClassType()) return accept();
        if (TypeVariable()) return accept();
        return reject();
    }

    //=====================================================================
    //  MethodBody = Block / SEMI ;
    //=====================================================================
    private boolean MethodBody()
    {
        begin("MethodBody");
        if (Block()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //=====================================================================
    //  InstanceInitializer = Block ;
    //=====================================================================
    private boolean InstanceInitializer()
    {
        begin("InstanceInitializer");
        if (!Block()) return reject();
        return accept();
    }

    //=====================================================================
    //  StaticInitializer = STATIC Block ;
    //=====================================================================
    private boolean StaticInitializer()
    {
        begin("StaticInitializer");
        if (!STATIC()) return reject();
        if (!Block()) return reject();
        return accept();
    }

    //=====================================================================
    //  ConstructorDeclaration = ConstructorModifier* ConstructorDeclarator
    //    Throws? ConstructorBody ;
    //=====================================================================
    private boolean ConstructorDeclaration()
    {
        begin("ConstructorDeclaration");
        while (ConstructorModifier());
        if (!ConstructorDeclarator()) return reject();
        Throws();
        if (!ConstructorBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  ConstructorDeclarator = TypeParameters? Identifier LPAR
    //    FormalParameterList? RPAR ;
    //=====================================================================
    private boolean ConstructorDeclarator()
    {
        begin("ConstructorDeclarator");
        TypeParameters();
        if (!Identifier()) return reject();
        if (!LPAR()) return reject();
        FormalParameterList();
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ConstructorModifier = Annotation / PUBLIC / PROTECTED / PRIVATE ;
    //=====================================================================
    private boolean ConstructorModifier()
    {
        begin("ConstructorModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (PROTECTED()) return accept();
        if (PRIVATE()) return accept();
        return reject();
    }

    //=====================================================================
    //  ConstructorBody = LWING ExplicitConstructorInvocation?
    //    BlockStatements? RWING ;
    //=====================================================================
    private boolean ConstructorBody()
    {
        begin("ConstructorBody");
        if (!LWING()) return reject();
        ExplicitConstructorInvocation();
        BlockStatements();
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  ExplicitConstructorInvocation = TypeArguments? THIS Arguments SEMI
    //    / TypeArguments? SUPER Arguments SEMI / Primary DOT
    //    TypeArguments? SUPER Arguments SEMI / QualIdent DOT
    //    TypeArguments? SUPER Arguments SEMI ;
    //=====================================================================
    private boolean ExplicitConstructorInvocation()
    {
        begin("ExplicitConstructorInvocation");
        if (ExplicitConstructorInvocation_0()) return accept();
        if (ExplicitConstructorInvocation_1()) return accept();
        if (ExplicitConstructorInvocation_2()) return accept();
        if (ExplicitConstructorInvocation_3()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  ExplicitConstructorInvocation_0 = TypeArguments? THIS Arguments
    //    SEMI
    //-------------------------------------------------------------------
    private boolean ExplicitConstructorInvocation_0()
    {
        begin("");
        TypeArguments();
        if (!THIS()) return rejectInner();
        if (!Arguments()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ExplicitConstructorInvocation_1 = TypeArguments? SUPER Arguments
    //    SEMI
    //-------------------------------------------------------------------
    private boolean ExplicitConstructorInvocation_1()
    {
        begin("");
        TypeArguments();
        if (!SUPER()) return rejectInner();
        if (!Arguments()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ExplicitConstructorInvocation_2 = Primary DOT TypeArguments?
    //    SUPER Arguments SEMI
    //-------------------------------------------------------------------
    private boolean ExplicitConstructorInvocation_2()
    {
        begin("");
        if (!Primary()) return rejectInner();
        if (!DOT()) return rejectInner();
        TypeArguments();
        if (!SUPER()) return rejectInner();
        if (!Arguments()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ExplicitConstructorInvocation_3 = QualIdent DOT TypeArguments?
    //    SUPER Arguments SEMI
    //-------------------------------------------------------------------
    private boolean ExplicitConstructorInvocation_3()
    {
        begin("");
        if (!QualIdent()) return rejectInner();
        if (!DOT()) return rejectInner();
        TypeArguments();
        if (!SUPER()) return rejectInner();
        if (!Arguments()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  EnumDeclaration = ClassModifier* ENUM Identifier Superinterfaces?
    //    EnumBody ;
    //=====================================================================
    private boolean EnumDeclaration()
    {
        begin("EnumDeclaration");
        while (ClassModifier());
        if (!ENUM()) return reject();
        if (!Identifier()) return reject();
        Superinterfaces();
        if (!EnumBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  EnumBody = LWING EnumConstantList? COMMA? EnumBodyDeclarations?
    //    RWING ;
    //=====================================================================
    private boolean EnumBody()
    {
        begin("EnumBody");
        if (!LWING()) return reject();
        EnumConstantList();
        COMMA();
        EnumBodyDeclarations();
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  EnumConstantList = EnumConstant (COMMA EnumConstant)* ;
    //=====================================================================
    private boolean EnumConstantList()
    {
        begin("EnumConstantList");
        if (!EnumConstant()) return reject();
        while (EnumConstantList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  EnumConstantList_0 = COMMA EnumConstant
    //-------------------------------------------------------------------
    private boolean EnumConstantList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!EnumConstant()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  EnumConstant = EnumConstantModifier* Identifier Arguments?
    //    ClassBody? ;
    //=====================================================================
    private boolean EnumConstant()
    {
        begin("EnumConstant");
        while (EnumConstantModifier());
        if (!Identifier()) return reject();
        Arguments();
        ClassBody();
        return accept();
    }

    //=====================================================================
    //  EnumConstantModifier = Annotation ;
    //=====================================================================
    private boolean EnumConstantModifier()
    {
        begin("EnumConstantModifier");
        if (!Annotation()) return reject();
        return accept();
    }

    //=====================================================================
    //  EnumBodyDeclarations = SEMI ClassBodyDeclaration* ;
    //=====================================================================
    private boolean EnumBodyDeclarations()
    {
        begin("EnumBodyDeclarations");
        if (!SEMI()) return reject();
        while (ClassBodyDeclaration());
        return accept();
    }

    //=====================================================================
    //  InterfaceDeclaration = NormalInterfaceDeclaration /
    //    AnnotationTypeDeclaration ;
    //=====================================================================
    private boolean InterfaceDeclaration()
    {
        begin("InterfaceDeclaration");
        if (NormalInterfaceDeclaration()) return accept();
        if (AnnotationTypeDeclaration()) return accept();
        return reject();
    }

    //=====================================================================
    //  NormalInterfaceDeclaration = InterfaceModifier* INTERFACE
    //    Identifier TypeParameters? ExtendsInterfaces? InterfaceBody ;
    //=====================================================================
    private boolean NormalInterfaceDeclaration()
    {
        begin("NormalInterfaceDeclaration");
        while (InterfaceModifier());
        if (!INTERFACE()) return reject();
        if (!Identifier()) return reject();
        TypeParameters();
        ExtendsInterfaces();
        if (!InterfaceBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  InterfaceModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
    //    ABSTRACT / STATIC / STRICTFP ;
    //=====================================================================
    private boolean InterfaceModifier()
    {
        begin("InterfaceModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (PROTECTED()) return accept();
        if (PRIVATE()) return accept();
        if (ABSTRACT()) return accept();
        if (STATIC()) return accept();
        if (STRICTFP()) return accept();
        return reject();
    }

    //=====================================================================
    //  ExtendsInterfaces = EXTENDS InterfaceTypeList ;
    //=====================================================================
    private boolean ExtendsInterfaces()
    {
        begin("ExtendsInterfaces");
        if (!EXTENDS()) return reject();
        if (!InterfaceTypeList()) return reject();
        return accept();
    }

    //=====================================================================
    //  InterfaceBody = LWING InterfaceMemberDeclaration* RWING ;
    //=====================================================================
    private boolean InterfaceBody()
    {
        begin("InterfaceBody");
        if (!LWING()) return reject();
        while (InterfaceMemberDeclaration());
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  InterfaceMemberDeclaration = ConstantDeclaration /
    //    InterfaceMethodDeclaration / ClassDeclaration /
    //    InterfaceDeclaration / SEMI ;
    //=====================================================================
    private boolean InterfaceMemberDeclaration()
    {
        begin("InterfaceMemberDeclaration");
        if (ConstantDeclaration()) return accept();
        if (InterfaceMethodDeclaration()) return accept();
        if (ClassDeclaration()) return accept();
        if (InterfaceDeclaration()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //=====================================================================
    //  ConstantDeclaration = ConstantModifier* UnannType
    //    VariableDeclaratorList SEMI ;
    //=====================================================================
    private boolean ConstantDeclaration()
    {
        begin("ConstantDeclaration");
        while (ConstantModifier());
        if (!UnannType()) return reject();
        if (!VariableDeclaratorList()) return reject();
        if (!SEMI()) return reject();
        return accept();
    }

    //=====================================================================
    //  ConstantModifier = Annotation / PUBLIC / STATIC / FINAL ;
    //=====================================================================
    private boolean ConstantModifier()
    {
        begin("ConstantModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (STATIC()) return accept();
        if (FINAL()) return accept();
        return reject();
    }

    //=====================================================================
    //  InterfaceMethodDeclaration = InterfaceMethodModifier* MethodHeader
    //    MethodBody ;
    //=====================================================================
    private boolean InterfaceMethodDeclaration()
    {
        begin("InterfaceMethodDeclaration");
        while (InterfaceMethodModifier());
        if (!MethodHeader()) return reject();
        if (!MethodBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  InterfaceMethodModifier = Annotation / PUBLIC / ABSTRACT / DEFAULT
    //    / STATIC / STRICTFP ;
    //=====================================================================
    private boolean InterfaceMethodModifier()
    {
        begin("InterfaceMethodModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (ABSTRACT()) return accept();
        if (DEFAULT()) return accept();
        if (STATIC()) return accept();
        if (STRICTFP()) return accept();
        return reject();
    }

    //=====================================================================
    //  AnnotationTypeDeclaration = InterfaceModifier* AT INTERFACE
    //    Identifier AnnotationTypeBody ;
    //=====================================================================
    private boolean AnnotationTypeDeclaration()
    {
        begin("AnnotationTypeDeclaration");
        while (InterfaceModifier());
        if (!AT()) return reject();
        if (!INTERFACE()) return reject();
        if (!Identifier()) return reject();
        if (!AnnotationTypeBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  AnnotationTypeBody = LWING AnnotationTypeMemberDeclaration* RWING
    //    ;
    //=====================================================================
    private boolean AnnotationTypeBody()
    {
        begin("AnnotationTypeBody");
        if (!LWING()) return reject();
        while (AnnotationTypeMemberDeclaration());
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  AnnotationTypeMemberDeclaration = AnnotationTypeElementDeclaration
    //    / ConstantDeclaration / ClassDeclaration / InterfaceDeclaration /
    //    SEMI ;
    //=====================================================================
    private boolean AnnotationTypeMemberDeclaration()
    {
        begin("AnnotationTypeMemberDeclaration");
        if (AnnotationTypeElementDeclaration()) return accept();
        if (ConstantDeclaration()) return accept();
        if (ClassDeclaration()) return accept();
        if (InterfaceDeclaration()) return accept();
        if (SEMI()) return accept();
        return reject();
    }

    //=====================================================================
    //  AnnotationTypeElementDeclaration = AnnotationTypeElementModifier*
    //    UnannType Identifier LPAR RPAR Dim* DefaultValue? SEMI ;
    //=====================================================================
    private boolean AnnotationTypeElementDeclaration()
    {
        begin("AnnotationTypeElementDeclaration");
        while (AnnotationTypeElementModifier());
        if (!UnannType()) return reject();
        if (!Identifier()) return reject();
        if (!LPAR()) return reject();
        if (!RPAR()) return reject();
        while (Dim());
        DefaultValue();
        if (!SEMI()) return reject();
        return accept();
    }

    //=====================================================================
    //  AnnotationTypeElementModifier = Annotation / PUBLIC / ABSTRACT ;
    //=====================================================================
    private boolean AnnotationTypeElementModifier()
    {
        begin("AnnotationTypeElementModifier");
        if (Annotation()) return accept();
        if (PUBLIC()) return accept();
        if (ABSTRACT()) return accept();
        return reject();
    }

    //=====================================================================
    //  DefaultValue = DEFAULT ElementValue ;
    //=====================================================================
    private boolean DefaultValue()
    {
        begin("DefaultValue");
        if (!DEFAULT()) return reject();
        if (!ElementValue()) return reject();
        return accept();
    }

    //=====================================================================
    //  Annotation = AT (NormalAnnotation / SingleElementAnnotation /
    //    MarkerAnnotation) ;
    //=====================================================================
    private boolean Annotation()
    {
        begin("Annotation");
        if (!AT()) return reject();
        if (!NormalAnnotation()
            && !SingleElementAnnotation()
            && !MarkerAnnotation()
            ) return reject();
        return accept();
    }

    //=====================================================================
    //  NormalAnnotation = QualIdent LPAR ElementValuePairList* RPAR ;
    //=====================================================================
    private boolean NormalAnnotation()
    {
        begin("NormalAnnotation");
        if (!QualIdent()) return reject();
        if (!LPAR()) return reject();
        while (ElementValuePairList());
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ElementValuePairList = ElementValuePair (COMMA ElementValuePair)*
    //    ;
    //=====================================================================
    private boolean ElementValuePairList()
    {
        begin("ElementValuePairList");
        if (!ElementValuePair()) return reject();
        while (ElementValuePairList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ElementValuePairList_0 = COMMA ElementValuePair
    //-------------------------------------------------------------------
    private boolean ElementValuePairList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!ElementValuePair()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  ElementValuePair = Identifier EQU ElementValue ;
    //=====================================================================
    private boolean ElementValuePair()
    {
        begin("ElementValuePair");
        if (!Identifier()) return reject();
        if (!EQU()) return reject();
        if (!ElementValue()) return reject();
        return accept();
    }

    //=====================================================================
    //  ElementValue = ConditionalExpression / ElementValueArrayInitializer
    //    / Annotation ;
    //=====================================================================
    private boolean ElementValue()
    {
        begin("ElementValue");
        if (ConditionalExpression()) return accept();
        if (ElementValueArrayInitializer()) return accept();
        if (Annotation()) return accept();
        return reject();
    }

    //=====================================================================
    //  ElementValueArrayInitializer = LWING ElementValueList? COMMA? RWING
    //    ;
    //=====================================================================
    private boolean ElementValueArrayInitializer()
    {
        begin("ElementValueArrayInitializer");
        if (!LWING()) return reject();
        ElementValueList();
        COMMA();
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  ElementValueList = ElementValue (COMMA ElementValue)* ;
    //=====================================================================
    private boolean ElementValueList()
    {
        begin("ElementValueList");
        if (!ElementValue()) return reject();
        while (ElementValueList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ElementValueList_0 = COMMA ElementValue
    //-------------------------------------------------------------------
    private boolean ElementValueList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!ElementValue()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  MarkerAnnotation = QualIdent ;
    //=====================================================================
    private boolean MarkerAnnotation()
    {
        begin("MarkerAnnotation");
        if (!QualIdent()) return reject();
        return accept();
    }

    //=====================================================================
    //  SingleElementAnnotation = QualIdent LPAR ElementValue RPAR ;
    //=====================================================================
    private boolean SingleElementAnnotation()
    {
        begin("SingleElementAnnotation");
        if (!QualIdent()) return reject();
        if (!LPAR()) return reject();
        if (!ElementValue()) return reject();
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ArrayInitializer = LWING VariableInitializerList? COMMA? RWING ;
    //=====================================================================
    private boolean ArrayInitializer()
    {
        begin("ArrayInitializer");
        if (!LWING()) return reject();
        VariableInitializerList();
        COMMA();
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  VariableInitializerList = VariableInitializer (COMMA
    //    VariableInitializer)* ;
    //=====================================================================
    private boolean VariableInitializerList()
    {
        begin("VariableInitializerList");
        if (!VariableInitializer()) return reject();
        while (VariableInitializerList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  VariableInitializerList_0 = COMMA VariableInitializer
    //-------------------------------------------------------------------
    private boolean VariableInitializerList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!VariableInitializer()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Block = LWING BlockStatements? RWING ;
    //=====================================================================
    private boolean Block()
    {
        begin("Block");
        if (!LWING()) return reject();
        BlockStatements();
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  BlockStatements = BlockStatement BlockStatement* ;
    //=====================================================================
    private boolean BlockStatements()
    {
        begin("BlockStatements");
        if (!BlockStatement()) return reject();
        while (BlockStatement());
        return accept();
    }

    //=====================================================================
    //  BlockStatement = LocalVariableDeclarationStatement /
    //    ClassDeclaration / Statement ;
    //=====================================================================
    private boolean BlockStatement()
    {
        begin("BlockStatement");
        if (LocalVariableDeclarationStatement()) return accept();
        if (ClassDeclaration()) return accept();
        if (Statement()) return accept();
        return reject();
    }

    //=====================================================================
    //  LocalVariableDeclarationStatement = LocalVariableDeclaration SEMI
    //    ;
    //=====================================================================
    private boolean LocalVariableDeclarationStatement()
    {
        begin("LocalVariableDeclarationStatement");
        if (!LocalVariableDeclaration()) return reject();
        if (!SEMI()) return reject();
        return accept();
    }

    //=====================================================================
    //  LocalVariableDeclaration = VariableModifier* UnannType
    //    VariableDeclaratorList ;
    //=====================================================================
    private boolean LocalVariableDeclaration()
    {
        begin("LocalVariableDeclaration");
        while (VariableModifier());
        if (!UnannType()) return reject();
        if (!VariableDeclaratorList()) return reject();
        return accept();
    }

    //=====================================================================
    //  Statement = Block / IF ParExpression Statement (ELSE Statement)? /
    //    BasicForStatement / EnhancedForStatement / WHILE ParExpression
    //    Statement / DO Statement WHILE ParExpression SEMI / TryStatement
    //    / SWITCH ParExpression SwitchBlock / SYNCHRONIZED ParExpression
    //    Block / RETURN Expression? SEMI / THROW Expression SEMI / BREAK
    //    Identifier? SEMI / CONTINUE Identifier? SEMI / ASSERT Expression
    //    (COLON Expression)? SEMI / SEMI / StatementExpression SEMI /
    //    Identifier COLON Statement ;
    //=====================================================================
    private boolean Statement()
    {
        begin("Statement");
        if (Block()) return accept();
        if (Statement_0()) return accept();
        if (BasicForStatement()) return accept();
        if (EnhancedForStatement()) return accept();
        if (Statement_1()) return accept();
        if (Statement_2()) return accept();
        if (TryStatement()) return accept();
        if (Statement_3()) return accept();
        if (Statement_4()) return accept();
        if (Statement_5()) return accept();
        if (Statement_6()) return accept();
        if (Statement_7()) return accept();
        if (Statement_8()) return accept();
        if (Statement_9()) return accept();
        if (SEMI()) return accept();
        if (Statement_10()) return accept();
        if (Statement_11()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  Statement_0 = IF ParExpression Statement (ELSE Statement)?
    //-------------------------------------------------------------------
    private boolean Statement_0()
    {
        begin("");
        if (!IF()) return rejectInner();
        if (!ParExpression()) return rejectInner();
        if (!Statement()) return rejectInner();
        Statement_12();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_1 = WHILE ParExpression Statement
    //-------------------------------------------------------------------
    private boolean Statement_1()
    {
        begin("");
        if (!WHILE()) return rejectInner();
        if (!ParExpression()) return rejectInner();
        if (!Statement()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_2 = DO Statement WHILE ParExpression SEMI
    //-------------------------------------------------------------------
    private boolean Statement_2()
    {
        begin("");
        if (!DO()) return rejectInner();
        if (!Statement()) return rejectInner();
        if (!WHILE()) return rejectInner();
        if (!ParExpression()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_3 = SWITCH ParExpression SwitchBlock
    //-------------------------------------------------------------------
    private boolean Statement_3()
    {
        begin("");
        if (!SWITCH()) return rejectInner();
        if (!ParExpression()) return rejectInner();
        if (!SwitchBlock()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_4 = SYNCHRONIZED ParExpression Block
    //-------------------------------------------------------------------
    private boolean Statement_4()
    {
        begin("");
        if (!SYNCHRONIZED()) return rejectInner();
        if (!ParExpression()) return rejectInner();
        if (!Block()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_5 = RETURN Expression? SEMI
    //-------------------------------------------------------------------
    private boolean Statement_5()
    {
        begin("");
        if (!RETURN()) return rejectInner();
        Expression();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_6 = THROW Expression SEMI
    //-------------------------------------------------------------------
    private boolean Statement_6()
    {
        begin("");
        if (!THROW()) return rejectInner();
        if (!Expression()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_7 = BREAK Identifier? SEMI
    //-------------------------------------------------------------------
    private boolean Statement_7()
    {
        begin("");
        if (!BREAK()) return rejectInner();
        Identifier();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_8 = CONTINUE Identifier? SEMI
    //-------------------------------------------------------------------
    private boolean Statement_8()
    {
        begin("");
        if (!CONTINUE()) return rejectInner();
        Identifier();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_9 = ASSERT Expression (COLON Expression)? SEMI
    //-------------------------------------------------------------------
    private boolean Statement_9()
    {
        begin("");
        if (!ASSERT()) return rejectInner();
        if (!Expression()) return rejectInner();
        Statement_13();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_10 = StatementExpression SEMI
    //-------------------------------------------------------------------
    private boolean Statement_10()
    {
        begin("");
        if (!StatementExpression()) return rejectInner();
        if (!SEMI()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_11 = Identifier COLON Statement
    //-------------------------------------------------------------------
    private boolean Statement_11()
    {
        begin("");
        if (!Identifier()) return rejectInner();
        if (!COLON()) return rejectInner();
        if (!Statement()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_12 = ELSE Statement
    //-------------------------------------------------------------------
    private boolean Statement_12()
    {
        begin("");
        if (!ELSE()) return rejectInner();
        if (!Statement()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  Statement_13 = COLON Expression
    //-------------------------------------------------------------------
    private boolean Statement_13()
    {
        begin("");
        if (!COLON()) return rejectInner();
        if (!Expression()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  StatementExpression = Assignment / (INC / DEC) (Primary /
    //    QualIdent) / (Primary / QualIdent) (INC / DEC) / Primary ;
    //=====================================================================
    private boolean StatementExpression()
    {
        begin("StatementExpression");
        if (Assignment()) return accept();
        if (StatementExpression_0()) return accept();
        if (StatementExpression_1()) return accept();
        if (Primary()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  StatementExpression_0 = (INC / DEC) (Primary / QualIdent)
    //-------------------------------------------------------------------
    private boolean StatementExpression_0()
    {
        begin("");
        if (!INC()
            && !DEC()
            ) return rejectInner();
        if (!Primary()
            && !QualIdent()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  StatementExpression_1 = (Primary / QualIdent) (INC / DEC)
    //-------------------------------------------------------------------
    private boolean StatementExpression_1()
    {
        begin("");
        if (!Primary()
            && !QualIdent()
            ) return rejectInner();
        if (!INC()
            && !DEC()
            ) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  SwitchBlock = LWING SwitchBlockStatementGroup* SwitchLabel* RWING
    //    ;
    //=====================================================================
    private boolean SwitchBlock()
    {
        begin("SwitchBlock");
        if (!LWING()) return reject();
        while (SwitchBlockStatementGroup());
        while (SwitchLabel());
        if (!RWING()) return reject();
        return accept();
    }

    //=====================================================================
    //  SwitchBlockStatementGroup = SwitchLabels BlockStatements ;
    //=====================================================================
    private boolean SwitchBlockStatementGroup()
    {
        begin("SwitchBlockStatementGroup");
        if (!SwitchLabels()) return reject();
        if (!BlockStatements()) return reject();
        return accept();
    }

    //=====================================================================
    //  SwitchLabels = SwitchLabel SwitchLabel* ;
    //=====================================================================
    private boolean SwitchLabels()
    {
        begin("SwitchLabels");
        if (!SwitchLabel()) return reject();
        while (SwitchLabel());
        return accept();
    }

    //=====================================================================
    //  SwitchLabel = CASE (ConstantExpression / EnumConstantName) COLON /
    //    DEFAULT COLON ;
    //=====================================================================
    private boolean SwitchLabel()
    {
        begin("SwitchLabel");
        if (SwitchLabel_0()) return accept();
        if (SwitchLabel_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  SwitchLabel_0 = CASE (ConstantExpression / EnumConstantName)
    //    COLON
    //-------------------------------------------------------------------
    private boolean SwitchLabel_0()
    {
        begin("");
        if (!CASE()) return rejectInner();
        if (!ConstantExpression()
            && !EnumConstantName()
            ) return rejectInner();
        if (!COLON()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  SwitchLabel_1 = DEFAULT COLON
    //-------------------------------------------------------------------
    private boolean SwitchLabel_1()
    {
        begin("");
        if (!DEFAULT()) return rejectInner();
        if (!COLON()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  EnumConstantName = Identifier ;
    //=====================================================================
    private boolean EnumConstantName()
    {
        begin("EnumConstantName");
        if (!Identifier()) return reject();
        return accept();
    }

    //=====================================================================
    //  BasicForStatement = FOR LPAR ForInit? SEMI Expression? SEMI
    //    ForUpdate? RPAR Statement ;
    //=====================================================================
    private boolean BasicForStatement()
    {
        begin("BasicForStatement");
        if (!FOR()) return reject();
        if (!LPAR()) return reject();
        ForInit();
        if (!SEMI()) return reject();
        Expression();
        if (!SEMI()) return reject();
        ForUpdate();
        if (!RPAR()) return reject();
        if (!Statement()) return reject();
        return accept();
    }

    //=====================================================================
    //  ForInit = LocalVariableDeclaration / StatementExpressionList ;
    //=====================================================================
    private boolean ForInit()
    {
        begin("ForInit");
        if (LocalVariableDeclaration()) return accept();
        if (StatementExpressionList()) return accept();
        return reject();
    }

    //=====================================================================
    //  ForUpdate = StatementExpressionList ;
    //=====================================================================
    private boolean ForUpdate()
    {
        begin("ForUpdate");
        if (!StatementExpressionList()) return reject();
        return accept();
    }

    //=====================================================================
    //  StatementExpressionList = StatementExpression (COMMA
    //    StatementExpression)* ;
    //=====================================================================
    private boolean StatementExpressionList()
    {
        begin("StatementExpressionList");
        if (!StatementExpression()) return reject();
        while (StatementExpressionList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  StatementExpressionList_0 = COMMA StatementExpression
    //-------------------------------------------------------------------
    private boolean StatementExpressionList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!StatementExpression()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  EnhancedForStatement = FOR LPAR VariableModifier* UnannType
    //    VariableDeclaratorId COLON Expression RPAR Statement ;
    //=====================================================================
    private boolean EnhancedForStatement()
    {
        begin("EnhancedForStatement");
        if (!FOR()) return reject();
        if (!LPAR()) return reject();
        while (VariableModifier());
        if (!UnannType()) return reject();
        if (!VariableDeclaratorId()) return reject();
        if (!COLON()) return reject();
        if (!Expression()) return reject();
        if (!RPAR()) return reject();
        if (!Statement()) return reject();
        return accept();
    }

    //=====================================================================
    //  TryStatement = TRY (Block (CatchClause* Finally / CatchClause+) /
    //    ResourceSpecification Block CatchClause* Finally?) ;
    //=====================================================================
    private boolean TryStatement()
    {
        begin("TryStatement");
        if (!TRY()) return reject();
        if (!TryStatement_0()
            && !TryStatement_1()
            ) return reject();
        return accept();
    }

    //-------------------------------------------------------------------
    //  TryStatement_0 = Block (CatchClause* Finally / CatchClause+)
    //-------------------------------------------------------------------
    private boolean TryStatement_0()
    {
        begin("");
        if (!Block()) return rejectInner();
        if (!TryStatement_2()
            && !TryStatement_3()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  TryStatement_1 = ResourceSpecification Block CatchClause*
    //    Finally?
    //-------------------------------------------------------------------
    private boolean TryStatement_1()
    {
        begin("");
        if (!ResourceSpecification()) return rejectInner();
        if (!Block()) return rejectInner();
        while (CatchClause());
        Finally();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  TryStatement_2 = CatchClause* Finally
    //-------------------------------------------------------------------
    private boolean TryStatement_2()
    {
        begin("");
        while (CatchClause());
        if (!Finally()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  TryStatement_3 = CatchClause+
    //-------------------------------------------------------------------
    private boolean TryStatement_3()
    {
        begin("");
        if (!CatchClause()) return rejectInner();
        while (CatchClause());
        return acceptInner();
    }

    //=====================================================================
    //  CatchClause = CATCH LPAR CatchFormalParameter RPAR Block ;
    //=====================================================================
    private boolean CatchClause()
    {
        begin("CatchClause");
        if (!CATCH()) return reject();
        if (!LPAR()) return reject();
        if (!CatchFormalParameter()) return reject();
        if (!RPAR()) return reject();
        if (!Block()) return reject();
        return accept();
    }

    //=====================================================================
    //  CatchFormalParameter = VariableModifier* CatchType
    //    VariableDeclaratorId ;
    //=====================================================================
    private boolean CatchFormalParameter()
    {
        begin("CatchFormalParameter");
        while (VariableModifier());
        if (!CatchType()) return reject();
        if (!VariableDeclaratorId()) return reject();
        return accept();
    }

    //=====================================================================
    //  CatchType = UnannClassType (OR ClassType)* ;
    //=====================================================================
    private boolean CatchType()
    {
        begin("CatchType");
        if (!UnannClassType()) return reject();
        while (CatchType_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  CatchType_0 = OR ClassType
    //-------------------------------------------------------------------
    private boolean CatchType_0()
    {
        begin("");
        if (!OR()) return rejectInner();
        if (!ClassType()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Finally = FINALLY Block ;
    //=====================================================================
    private boolean Finally()
    {
        begin("Finally");
        if (!FINALLY()) return reject();
        if (!Block()) return reject();
        return accept();
    }

    //=====================================================================
    //  ResourceSpecification = LPAR ResourceList SEMI? RPAR ;
    //=====================================================================
    private boolean ResourceSpecification()
    {
        begin("ResourceSpecification");
        if (!LPAR()) return reject();
        if (!ResourceList()) return reject();
        SEMI();
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ResourceList = Resource (SEMI Resource)* ;
    //=====================================================================
    private boolean ResourceList()
    {
        begin("ResourceList");
        if (!Resource()) return reject();
        while (ResourceList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ResourceList_0 = SEMI Resource
    //-------------------------------------------------------------------
    private boolean ResourceList_0()
    {
        begin("");
        if (!SEMI()) return rejectInner();
        if (!Resource()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  Resource = VariableModifier* UnannType VariableDeclaratorId EQU
    //    Expression ;
    //=====================================================================
    private boolean Resource()
    {
        begin("Resource");
        while (VariableModifier());
        if (!UnannType()) return reject();
        if (!VariableDeclaratorId()) return reject();
        if (!EQU()) return reject();
        if (!Expression()) return reject();
        return accept();
    }

    //=====================================================================
    //  Expression = LambdaExpression / AssignmentExpression ;
    //=====================================================================
    private boolean Expression()
    {
        begin("Expression");
        if (LambdaExpression()) return accept();
        if (AssignmentExpression()) return accept();
        return reject();
    }

    //=====================================================================
    //  Primary = PrimaryBase PrimaryRest* ;
    //=====================================================================
    private boolean Primary()
    {
        begin("Primary");
        if (!PrimaryBase()) return reject();
        while (PrimaryRest());
        return accept();
    }

    //=====================================================================
    //  PrimaryBase = THIS / Literal / ParExpression / SUPER (DOT
    //    TypeArguments? Identifier Arguments / DOT Identifier / COLONCOLON
    //    TypeArguments? Identifier) / NEW (ClassCreator / ArrayCreator) /
    //    QualIdent (LBRK Expression RBRK / Arguments / DOT (THIS / NEW
    //    ClassCreator / TypeArguments Identifier Arguments / SUPER DOT
    //    TypeArguments? Identifier Arguments / SUPER DOT Identifier /
    //    SUPER COLONCOLON TypeArguments? Identifier) / (LBRK RBRK)* DOT
    //    CLASS / COLONCOLON TypeArguments? Identifier) / VOID DOT CLASS /
    //    BasicType (LBRK RBRK)* DOT CLASS / ReferenceType COLONCOLON
    //    TypeArguments? Identifier / ClassType COLONCOLON TypeArguments?
    //    NEW / ArrayType COLONCOLON NEW ;
    //=====================================================================
    private boolean PrimaryBase()
    {
        begin("PrimaryBase");
        if (THIS()) return accept();
        if (Literal()) return accept();
        if (ParExpression()) return accept();
        if (PrimaryBase_0()) return accept();
        if (PrimaryBase_1()) return accept();
        if (PrimaryBase_2()) return accept();
        if (PrimaryBase_3()) return accept();
        if (PrimaryBase_4()) return accept();
        if (PrimaryBase_5()) return accept();
        if (PrimaryBase_6()) return accept();
        if (PrimaryBase_7()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_0 = SUPER (DOT TypeArguments? Identifier Arguments /
    //    DOT Identifier / COLONCOLON TypeArguments? Identifier)
    //-------------------------------------------------------------------
    private boolean PrimaryBase_0()
    {
        begin("");
        if (!SUPER()) return rejectInner();
        if (!PrimaryBase_8()
            && !QualIdent_0()
            && !PrimaryBase_9()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_1 = NEW (ClassCreator / ArrayCreator)
    //-------------------------------------------------------------------
    private boolean PrimaryBase_1()
    {
        begin("");
        if (!NEW()) return rejectInner();
        if (!ClassCreator()
            && !ArrayCreator()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_2 = QualIdent (LBRK Expression RBRK / Arguments / DOT
    //    (THIS / NEW ClassCreator / TypeArguments Identifier Arguments /
    //    SUPER DOT TypeArguments? Identifier Arguments / SUPER DOT
    //    Identifier / SUPER COLONCOLON TypeArguments? Identifier) /
    //    (LBRK RBRK)* DOT CLASS / COLONCOLON TypeArguments? Identifier)
    //-------------------------------------------------------------------
    private boolean PrimaryBase_2()
    {
        begin("");
        if (!QualIdent()) return rejectInner();
        if (!PrimaryBase_10()
            && !Arguments()
            && !PrimaryBase_11()
            && !PrimaryBase_12()
            && !PrimaryBase_9()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_3 = VOID DOT CLASS
    //-------------------------------------------------------------------
    private boolean PrimaryBase_3()
    {
        begin("");
        if (!VOID()) return rejectInner();
        if (!DOT()) return rejectInner();
        if (!CLASS()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_4 = BasicType (LBRK RBRK)* DOT CLASS
    //-------------------------------------------------------------------
    private boolean PrimaryBase_4()
    {
        begin("");
        if (!BasicType()) return rejectInner();
        while (PrimaryBase_13());
        if (!DOT()) return rejectInner();
        if (!CLASS()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_5 = ReferenceType COLONCOLON TypeArguments?
    //    Identifier
    //-------------------------------------------------------------------
    private boolean PrimaryBase_5()
    {
        begin("");
        if (!ReferenceType()) return rejectInner();
        if (!COLONCOLON()) return rejectInner();
        TypeArguments();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_6 = ClassType COLONCOLON TypeArguments? NEW
    //-------------------------------------------------------------------
    private boolean PrimaryBase_6()
    {
        begin("");
        if (!ClassType()) return rejectInner();
        if (!COLONCOLON()) return rejectInner();
        TypeArguments();
        if (!NEW()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_7 = ArrayType COLONCOLON NEW
    //-------------------------------------------------------------------
    private boolean PrimaryBase_7()
    {
        begin("");
        if (!ArrayType()) return rejectInner();
        if (!COLONCOLON()) return rejectInner();
        if (!NEW()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_8 = DOT TypeArguments? Identifier Arguments
    //-------------------------------------------------------------------
    private boolean PrimaryBase_8()
    {
        begin("");
        if (!DOT()) return rejectInner();
        TypeArguments();
        if (!Identifier()) return rejectInner();
        if (!Arguments()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_9 = COLONCOLON TypeArguments? Identifier
    //-------------------------------------------------------------------
    private boolean PrimaryBase_9()
    {
        begin("");
        if (!COLONCOLON()) return rejectInner();
        TypeArguments();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_10 = LBRK Expression RBRK
    //-------------------------------------------------------------------
    private boolean PrimaryBase_10()
    {
        begin("");
        if (!LBRK()) return rejectInner();
        if (!Expression()) return rejectInner();
        if (!RBRK()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_11 = DOT (THIS / NEW ClassCreator / TypeArguments
    //    Identifier Arguments / SUPER DOT TypeArguments? Identifier
    //    Arguments / SUPER DOT Identifier / SUPER COLONCOLON
    //    TypeArguments? Identifier)
    //-------------------------------------------------------------------
    private boolean PrimaryBase_11()
    {
        begin("");
        if (!DOT()) return rejectInner();
        if (!THIS()
            && !PrimaryBase_14()
            && !PrimaryBase_15()
            && !PrimaryBase_16()
            && !PrimaryBase_17()
            && !PrimaryBase_18()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_12 = (LBRK RBRK)* DOT CLASS
    //-------------------------------------------------------------------
    private boolean PrimaryBase_12()
    {
        begin("");
        while (PrimaryBase_13());
        if (!DOT()) return rejectInner();
        if (!CLASS()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_13 = LBRK RBRK
    //-------------------------------------------------------------------
    private boolean PrimaryBase_13()
    {
        begin("");
        if (!LBRK()) return rejectInner();
        if (!RBRK()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_14 = NEW ClassCreator
    //-------------------------------------------------------------------
    private boolean PrimaryBase_14()
    {
        begin("");
        if (!NEW()) return rejectInner();
        if (!ClassCreator()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_15 = TypeArguments Identifier Arguments
    //-------------------------------------------------------------------
    private boolean PrimaryBase_15()
    {
        begin("");
        if (!TypeArguments()) return rejectInner();
        if (!Identifier()) return rejectInner();
        if (!Arguments()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_16 = SUPER DOT TypeArguments? Identifier Arguments
    //-------------------------------------------------------------------
    private boolean PrimaryBase_16()
    {
        begin("");
        if (!SUPER()) return rejectInner();
        if (!DOT()) return rejectInner();
        TypeArguments();
        if (!Identifier()) return rejectInner();
        if (!Arguments()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_17 = SUPER DOT Identifier
    //-------------------------------------------------------------------
    private boolean PrimaryBase_17()
    {
        begin("");
        if (!SUPER()) return rejectInner();
        if (!DOT()) return rejectInner();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryBase_18 = SUPER COLONCOLON TypeArguments? Identifier
    //-------------------------------------------------------------------
    private boolean PrimaryBase_18()
    {
        begin("");
        if (!SUPER()) return rejectInner();
        if (!COLONCOLON()) return rejectInner();
        TypeArguments();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  PrimaryRest = DOT (TypeArguments? Identifier Arguments / Identifier
    //    / NEW ClassCreator) / LBRK Expression RBRK / COLONCOLON
    //    TypeArguments? Identifier ;
    //=====================================================================
    private boolean PrimaryRest()
    {
        begin("PrimaryRest");
        if (PrimaryRest_0()) return accept();
        if (PrimaryBase_10()) return accept();
        if (PrimaryBase_9()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  PrimaryRest_0 = DOT (TypeArguments? Identifier Arguments /
    //    Identifier / NEW ClassCreator)
    //-------------------------------------------------------------------
    private boolean PrimaryRest_0()
    {
        begin("");
        if (!DOT()) return rejectInner();
        if (!PrimaryRest_1()
            && !Identifier()
            && !PrimaryBase_14()
            ) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  PrimaryRest_1 = TypeArguments? Identifier Arguments
    //-------------------------------------------------------------------
    private boolean PrimaryRest_1()
    {
        begin("");
        TypeArguments();
        if (!Identifier()) return rejectInner();
        if (!Arguments()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  ParExpression = LPAR Expression RPAR ;
    //=====================================================================
    private boolean ParExpression()
    {
        begin("ParExpression");
        if (!LPAR()) return reject();
        if (!Expression()) return reject();
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ClassCreator = TypeArguments? Annotation* ClassTypeWithDiamond
    //    Arguments ClassBody? ;
    //=====================================================================
    private boolean ClassCreator()
    {
        begin("ClassCreator");
        TypeArguments();
        while (Annotation());
        if (!ClassTypeWithDiamond()) return reject();
        if (!Arguments()) return reject();
        ClassBody();
        return accept();
    }

    //=====================================================================
    //  ClassTypeWithDiamond = Annotation* Identifier
    //    TypeArgumentsOrDiamond? (DOT Annotation* Identifier
    //    TypeArgumentsOrDiamond?)* ;
    //=====================================================================
    private boolean ClassTypeWithDiamond()
    {
        begin("ClassTypeWithDiamond");
        while (Annotation());
        if (!Identifier()) return reject();
        TypeArgumentsOrDiamond();
        while (ClassTypeWithDiamond_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ClassTypeWithDiamond_0 = DOT Annotation* Identifier
    //    TypeArgumentsOrDiamond?
    //-------------------------------------------------------------------
    private boolean ClassTypeWithDiamond_0()
    {
        begin("");
        if (!DOT()) return rejectInner();
        while (Annotation());
        if (!Identifier()) return rejectInner();
        TypeArgumentsOrDiamond();
        return acceptInner();
    }

    //=====================================================================
    //  TypeArgumentsOrDiamond = TypeArguments / LPOINT RPOINT !DOT ;
    //=====================================================================
    private boolean TypeArgumentsOrDiamond()
    {
        begin("TypeArgumentsOrDiamond");
        if (TypeArguments()) return accept();
        if (TypeArgumentsOrDiamond_0()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  TypeArgumentsOrDiamond_0 = LPOINT RPOINT !DOT
    //-------------------------------------------------------------------
    private boolean TypeArgumentsOrDiamond_0()
    {
        begin("");
        if (!LPOINT()) return rejectInner();
        if (!RPOINT()) return rejectInner();
        if (!TypeArgumentsOrDiamond_1()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  TypeArgumentsOrDiamond_1 = !DOT
    //-------------------------------------------------------------------
    private boolean TypeArgumentsOrDiamond_1()
    {
        begin("","not DOT");
        if (DOT()) return rejectNot();
        return acceptNot();
    }

    //=====================================================================
    //  ArrayCreator = Type DimExpr+ Dim* / Type Dim+ ArrayInitializer ;
    //=====================================================================
    private boolean ArrayCreator()
    {
        begin("ArrayCreator");
        if (ArrayCreator_0()) return accept();
        if (ArrayCreator_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  ArrayCreator_0 = Type DimExpr+ Dim*
    //-------------------------------------------------------------------
    private boolean ArrayCreator_0()
    {
        begin("");
        if (!Type()) return rejectInner();
        if (!DimExpr()) return rejectInner();
        while (DimExpr());
        while (Dim());
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  ArrayCreator_1 = Type Dim+ ArrayInitializer
    //-------------------------------------------------------------------
    private boolean ArrayCreator_1()
    {
        begin("");
        if (!Type()) return rejectInner();
        if (!Dim()) return rejectInner();
        while (Dim());
        if (!ArrayInitializer()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  DimExpr = Annotation* LBRK Expression RBRK ;
    //=====================================================================
    private boolean DimExpr()
    {
        begin("DimExpr");
        while (Annotation());
        if (!LBRK()) return reject();
        if (!Expression()) return reject();
        if (!RBRK()) return reject();
        return accept();
    }

    //=====================================================================
    //  Arguments = LPAR ArgumentList? RPAR ;
    //=====================================================================
    private boolean Arguments()
    {
        begin("Arguments");
        if (!LPAR()) return reject();
        ArgumentList();
        if (!RPAR()) return reject();
        return accept();
    }

    //=====================================================================
    //  ArgumentList = Expression (COMMA Expression)* ;
    //=====================================================================
    private boolean ArgumentList()
    {
        begin("ArgumentList");
        if (!Expression()) return reject();
        while (ArgumentList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ArgumentList_0 = COMMA Expression
    //-------------------------------------------------------------------
    private boolean ArgumentList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!Expression()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  UnaryExpression = (INC / DEC) (Primary / QualIdent) / PLUS
    //    UnaryExpression / MINUS UnaryExpression /
    //    UnaryExpressionNotPlusMinus ;
    //=====================================================================
    private boolean UnaryExpression()
    {
        begin("UnaryExpression");
        if (StatementExpression_0()) return accept();
        if (UnaryExpression_0()) return accept();
        if (UnaryExpression_1()) return accept();
        if (UnaryExpressionNotPlusMinus()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  UnaryExpression_0 = PLUS UnaryExpression
    //-------------------------------------------------------------------
    private boolean UnaryExpression_0()
    {
        begin("");
        if (!PLUS()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  UnaryExpression_1 = MINUS UnaryExpression
    //-------------------------------------------------------------------
    private boolean UnaryExpression_1()
    {
        begin("");
        if (!MINUS()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  UnaryExpressionNotPlusMinus = TILDE UnaryExpression / BANG
    //    UnaryExpression / CastExpression / (Primary / QualIdent) (INC /
    //    DEC)? ;
    //=====================================================================
    private boolean UnaryExpressionNotPlusMinus()
    {
        begin("UnaryExpressionNotPlusMinus");
        if (UnaryExpressionNotPlusMinus_0()) return accept();
        if (UnaryExpressionNotPlusMinus_1()) return accept();
        if (CastExpression()) return accept();
        if (UnaryExpressionNotPlusMinus_2()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  UnaryExpressionNotPlusMinus_0 = TILDE UnaryExpression
    //-------------------------------------------------------------------
    private boolean UnaryExpressionNotPlusMinus_0()
    {
        begin("");
        if (!TILDE()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  UnaryExpressionNotPlusMinus_1 = BANG UnaryExpression
    //-------------------------------------------------------------------
    private boolean UnaryExpressionNotPlusMinus_1()
    {
        begin("");
        if (!BANG()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  UnaryExpressionNotPlusMinus_2 = (Primary / QualIdent) (INC /
    //    DEC)?
    //-------------------------------------------------------------------
    private boolean UnaryExpressionNotPlusMinus_2()
    {
        begin("");
        if (!Primary()
            && !QualIdent()
            ) return rejectInner();
        UnaryExpressionNotPlusMinus_3();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  UnaryExpressionNotPlusMinus_3 = INC / DEC
    //-------------------------------------------------------------------
    private boolean UnaryExpressionNotPlusMinus_3()
    {
        begin("");
        if (INC()) return acceptInner();
        if (DEC()) return acceptInner();
        return rejectInner();
    }

    //=====================================================================
    //  CastExpression = LPAR PrimitiveType RPAR UnaryExpression / LPAR
    //    ReferenceType AdditionalBound* RPAR LambdaExpression / LPAR
    //    ReferenceType AdditionalBound* RPAR UnaryExpressionNotPlusMinus
    //    ;
    //=====================================================================
    private boolean CastExpression()
    {
        begin("CastExpression");
        if (CastExpression_0()) return accept();
        if (CastExpression_1()) return accept();
        if (CastExpression_2()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  CastExpression_0 = LPAR PrimitiveType RPAR UnaryExpression
    //-------------------------------------------------------------------
    private boolean CastExpression_0()
    {
        begin("");
        if (!LPAR()) return rejectInner();
        if (!PrimitiveType()) return rejectInner();
        if (!RPAR()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  CastExpression_1 = LPAR ReferenceType AdditionalBound* RPAR
    //    LambdaExpression
    //-------------------------------------------------------------------
    private boolean CastExpression_1()
    {
        begin("");
        if (!LPAR()) return rejectInner();
        if (!ReferenceType()) return rejectInner();
        while (AdditionalBound());
        if (!RPAR()) return rejectInner();
        if (!LambdaExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  CastExpression_2 = LPAR ReferenceType AdditionalBound* RPAR
    //    UnaryExpressionNotPlusMinus
    //-------------------------------------------------------------------
    private boolean CastExpression_2()
    {
        begin("");
        if (!LPAR()) return rejectInner();
        if (!ReferenceType()) return rejectInner();
        while (AdditionalBound());
        if (!RPAR()) return rejectInner();
        if (!UnaryExpressionNotPlusMinus()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  InfixExpression = UnaryExpression (InfixOperator UnaryExpression /
    //    INSTANCEOF ReferenceType)* ;
    //=====================================================================
    private boolean InfixExpression()
    {
        begin("InfixExpression");
        if (!UnaryExpression()) return reject();
        while (InfixExpression_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  InfixExpression_0 = InfixOperator UnaryExpression / INSTANCEOF
    //    ReferenceType
    //-------------------------------------------------------------------
    private boolean InfixExpression_0()
    {
        begin("");
        if (InfixExpression_1()) return acceptInner();
        if (InfixExpression_2()) return acceptInner();
        return rejectInner();
    }

    //-------------------------------------------------------------------
    //  InfixExpression_1 = InfixOperator UnaryExpression
    //-------------------------------------------------------------------
    private boolean InfixExpression_1()
    {
        begin("");
        if (!InfixOperator()) return rejectInner();
        if (!UnaryExpression()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  InfixExpression_2 = INSTANCEOF ReferenceType
    //-------------------------------------------------------------------
    private boolean InfixExpression_2()
    {
        begin("");
        if (!INSTANCEOF()) return rejectInner();
        if (!ReferenceType()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  InfixOperator = OROR / ANDAND / OR / HAT / AND / EQUAL / NOTEQUAL /
    //    LT / GT / LE / GE / SL / SR / BSR / PLUS / MINUS / STAR / DIV /
    //    MOD ;
    //=====================================================================
    private boolean InfixOperator()
    {
        begin("InfixOperator");
        if (OROR()) return accept();
        if (ANDAND()) return accept();
        if (OR()) return accept();
        if (HAT()) return accept();
        if (AND()) return accept();
        if (EQUAL()) return accept();
        if (NOTEQUAL()) return accept();
        if (LT()) return accept();
        if (GT()) return accept();
        if (LE()) return accept();
        if (GE()) return accept();
        if (SL()) return accept();
        if (SR()) return accept();
        if (BSR()) return accept();
        if (PLUS()) return accept();
        if (MINUS()) return accept();
        if (STAR()) return accept();
        if (DIV()) return accept();
        if (MOD()) return accept();
        return reject();
    }

    //=====================================================================
    //  ConditionalExpression = InfixExpression (QUERY Expression COLON
    //    Expression)* ;
    //=====================================================================
    private boolean ConditionalExpression()
    {
        begin("ConditionalExpression");
        if (!InfixExpression()) return reject();
        while (ConditionalExpression_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  ConditionalExpression_0 = QUERY Expression COLON Expression
    //-------------------------------------------------------------------
    private boolean ConditionalExpression_0()
    {
        begin("");
        if (!QUERY()) return rejectInner();
        if (!Expression()) return rejectInner();
        if (!COLON()) return rejectInner();
        if (!Expression()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  AssignmentExpression = Assignment / ConditionalExpression ;
    //=====================================================================
    private boolean AssignmentExpression()
    {
        begin("AssignmentExpression");
        if (Assignment()) return accept();
        if (ConditionalExpression()) return accept();
        return reject();
    }

    //=====================================================================
    //  Assignment = LeftHandSide AssignmentOperator Expression ;
    //=====================================================================
    private boolean Assignment()
    {
        begin("Assignment");
        if (!LeftHandSide()) return reject();
        if (!AssignmentOperator()) return reject();
        if (!Expression()) return reject();
        return accept();
    }

    //=====================================================================
    //  LeftHandSide = Primary / QualIdent ;
    //=====================================================================
    private boolean LeftHandSide()
    {
        begin("LeftHandSide");
        if (Primary()) return accept();
        if (QualIdent()) return accept();
        return reject();
    }

    //=====================================================================
    //  AssignmentOperator = EQU / STAREQU / DIVEQU / MODEQU / PLUSEQU /
    //    MINUSEQU / SLEQU / SREQU / BSREQU / ANDEQU / HATEQU / OREQU ;
    //=====================================================================
    private boolean AssignmentOperator()
    {
        begin("AssignmentOperator");
        if (EQU()) return accept();
        if (STAREQU()) return accept();
        if (DIVEQU()) return accept();
        if (MODEQU()) return accept();
        if (PLUSEQU()) return accept();
        if (MINUSEQU()) return accept();
        if (SLEQU()) return accept();
        if (SREQU()) return accept();
        if (BSREQU()) return accept();
        if (ANDEQU()) return accept();
        if (HATEQU()) return accept();
        if (OREQU()) return accept();
        return reject();
    }

    //=====================================================================
    //  LambdaExpression = LambdaParameters ARROW LambdaBody ;
    //=====================================================================
    private boolean LambdaExpression()
    {
        begin("LambdaExpression");
        if (!LambdaParameters()) return reject();
        if (!ARROW()) return reject();
        if (!LambdaBody()) return reject();
        return accept();
    }

    //=====================================================================
    //  LambdaParameters = Identifier / LPAR FormalParameterList? RPAR /
    //    LPAR InferredFormalParameterList RPAR ;
    //=====================================================================
    private boolean LambdaParameters()
    {
        begin("LambdaParameters");
        if (Identifier()) return accept();
        if (LambdaParameters_0()) return accept();
        if (LambdaParameters_1()) return accept();
        return reject();
    }

    //-------------------------------------------------------------------
    //  LambdaParameters_0 = LPAR FormalParameterList? RPAR
    //-------------------------------------------------------------------
    private boolean LambdaParameters_0()
    {
        begin("");
        if (!LPAR()) return rejectInner();
        FormalParameterList();
        if (!RPAR()) return rejectInner();
        return acceptInner();
    }

    //-------------------------------------------------------------------
    //  LambdaParameters_1 = LPAR InferredFormalParameterList RPAR
    //-------------------------------------------------------------------
    private boolean LambdaParameters_1()
    {
        begin("");
        if (!LPAR()) return rejectInner();
        if (!InferredFormalParameterList()) return rejectInner();
        if (!RPAR()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  InferredFormalParameterList = Identifier (COMMA Identifier)* ;
    //=====================================================================
    private boolean InferredFormalParameterList()
    {
        begin("InferredFormalParameterList");
        if (!Identifier()) return reject();
        while (InferredFormalParameterList_0());
        return accept();
    }

    //-------------------------------------------------------------------
    //  InferredFormalParameterList_0 = COMMA Identifier
    //-------------------------------------------------------------------
    private boolean InferredFormalParameterList_0()
    {
        begin("");
        if (!COMMA()) return rejectInner();
        if (!Identifier()) return rejectInner();
        return acceptInner();
    }

    //=====================================================================
    //  LambdaBody = Expression / Block ;
    //=====================================================================
    private boolean LambdaBody()
    {
        begin("LambdaBody");
        if (Expression()) return accept();
        if (Block()) return accept();
        return reject();
    }

    //=====================================================================
    //  ConstantExpression = Expression ;
    //=====================================================================
    private boolean ConstantExpression()
    {
        begin("ConstantExpression");
        if (!Expression()) return reject();
        return accept();
    }

}

////=========================================================================
////
////  This file was generated by Mouse 1.7 at 2015-08-22 14:17:32 GMT
////  from grammar
////    'C:\Users\norswap\Desktop\Mouse-1.7\grammars\Java.1.8.peg'.
////
////=========================================================================
//
//package com.norswap.autumn.test.mouse;
//
//    import mouse.runtime.Source;
//
//public class MouseJava8Parser extends mouse.runtime.ParserBase
//{
//    final mouse.runtime.SemanticsBase sem;
//
//    //=======================================================================
//    //
//    //  Initialization
//    //
//    //=======================================================================
//    //-------------------------------------------------------------------
//    //  Constructor
//    //-------------------------------------------------------------------
//    public MouseJava8Parser()
//    {
//        sem = new mouse.runtime.SemanticsBase();
//        sem.rule = this;
//        super.sem = sem;
//    }
//
//    //-------------------------------------------------------------------
//    //  Run the parser
//    //-------------------------------------------------------------------
//    public boolean parse(Source src)
//    {
//        super.init(src);
//        sem.init();
//        boolean result = Compilation();
//        closeParser(result);
//        return result;
//    }
//
//    //-------------------------------------------------------------------
//    //  Get semantics
//    //-------------------------------------------------------------------
//    public mouse.runtime.SemanticsBase semantics()
//    { return sem; }
//
//    //=======================================================================
//    //
//    //  Parsing procedures
//    //
//    //=======================================================================
//    //=====================================================================
//    //  Compilation = Spacing CompilationUnit SUB? EOT ;
//    //=====================================================================
//    private boolean Compilation()
//    {
//        begin("Compilation");
//        Spacing();
//        CompilationUnit();
//        SUB();
//        if (!EOT()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SUB = "\u001a" ;
//    //=====================================================================
//    private boolean SUB()
//    {
//        begin("SUB");
//        if (!next('\u001a')) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EOT = !_ ;
//    //=====================================================================
//    private boolean EOT()
//    {
//        begin("EOT");
//        if (!aheadNot()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Spacing = ([ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n])* ;
//    //=====================================================================
//    private boolean Spacing()
//    {
//        begin("Spacing");
//        while (Spacing_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  Spacing_0 = [ \t\r\n\f]+ / "/*" _*+ "*/" / "//" _*+ [\r\n]
//    //-------------------------------------------------------------------
//    private boolean Spacing_0()
//    {
//        begin("");
//        if (Spacing_1()) return acceptInner();
//        if (Spacing_2()) return acceptInner();
//        if (Spacing_3()) return acceptInner();
//        return rejectInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Spacing_1 = [ \t\r\n\f]+
//    //-------------------------------------------------------------------
//    private boolean Spacing_1()
//    {
//        begin("");
//        if (!nextIn(" \t\r\n\f")) return rejectInner();
//        while (nextIn(" \t\r\n\f"));
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Spacing_2 = "/*" _*+ "*/"
//    //-------------------------------------------------------------------
//    private boolean Spacing_2()
//    {
//        begin("");
//        if (!next("/*")) return rejectInner();
//        while (!next("*/"))
//            if (!next()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Spacing_3 = "//" _*+ [\r\n]
//    //-------------------------------------------------------------------
//    private boolean Spacing_3()
//    {
//        begin("");
//        if (!next("//")) return rejectInner();
//        while (!nextIn("\r\n"))
//            if (!next()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Identifier = !Keyword Letter LetterOrDigit* Spacing ;
//    //=====================================================================
//    private boolean Identifier()
//    {
//        begin("Identifier");
//        if (!Identifier_0()) return reject();
//        if (!Letter()) return reject();
//        while (LetterOrDigit());
//        Spacing();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  Identifier_0 = !Keyword
//    //-------------------------------------------------------------------
//    private boolean Identifier_0()
//    {
//        begin("","not Keyword");
//        if (Keyword()) return rejectPred();
//        return acceptPred();
//    }
//
//    //=====================================================================
//    //  Letter = [a-z] / [A-Z] / [_$] ;
//    //=====================================================================
//    private boolean Letter()
//    {
//        begin("Letter");
//        if (nextIn('a','z')) return accept();
//        if (nextIn('A','Z')) return accept();
//        if (nextIn("_$")) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;
//    //=====================================================================
//    private boolean LetterOrDigit()
//    {
//        begin("LetterOrDigit");
//        if (nextIn('a','z')) return accept();
//        if (nextIn('A','Z')) return accept();
//        if (nextIn('0','9')) return accept();
//        if (nextIn("_$")) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  Keyword = ("abstract" / "assert" / "boolean" / "break" / "byte" /
//    //    "case" / "catch" / "char" / "class" / "const" / "continue" /
//    //    "default" / "double" / "do" / "else" / "enum" / "extends" /
//    //    "false" / "finally" / "final" / "float" / "for" / "goto" / "if" /
//    //    "implements" / "import" / "interface" / "int" / "instanceof" /
//    //    "long" / "native" / "new" / "null" / "package" / "private" /
//    //    "protected" / "public" / "return" / "short" / "static" /
//    //    "strictfp" / "super" / "switch" / "synchronized" / "this" /
//    //    "throws" / "throw" / "transient" / "true" / "try" / "void" /
//    //    "volatile" / "while") !LetterOrDigit ;
//    //=====================================================================
//    private boolean Keyword()
//    {
//        begin("Keyword");
//        if (!next("abstract")
//            && !next("assert")
//            && !next("boolean")
//            && !next("break")
//            && !next("byte")
//            && !next("case")
//            && !next("catch")
//            && !next("char")
//            && !next("class")
//            && !next("const")
//            && !next("continue")
//            && !next("default")
//            && !next("double")
//            && !next("do")
//            && !next("else")
//            && !next("enum")
//            && !next("extends")
//            && !next("false")
//            && !next("finally")
//            && !next("final")
//            && !next("float")
//            && !next("for")
//            && !next("goto")
//            && !next("if")
//            && !next("implements")
//            && !next("import")
//            && !next("interface")
//            && !next("int")
//            && !next("instanceof")
//            && !next("long")
//            && !next("native")
//            && !next("new")
//            && !next("null")
//            && !next("package")
//            && !next("private")
//            && !next("protected")
//            && !next("public")
//            && !next("return")
//            && !next("short")
//            && !next("static")
//            && !next("strictfp")
//            && !next("super")
//            && !next("switch")
//            && !next("synchronized")
//            && !next("this")
//            && !next("throws")
//            && !next("throw")
//            && !next("transient")
//            && !next("true")
//            && !next("try")
//            && !next("void")
//            && !next("volatile")
//            && !next("while")
//            ) return reject();
//        if (!Keyword_0()) return reject();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  Keyword_0 = !LetterOrDigit
//    //-------------------------------------------------------------------
//    private boolean Keyword_0()
//    {
//        begin("","not LetterOrDigit");
//        if (LetterOrDigit()) return rejectPred();
//        return acceptPred();
//    }
//
//    //=====================================================================
//    //  ABSTRACT = "abstract" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean ABSTRACT()
//    {
//        begin("ABSTRACT");
//        if (!next("abstract")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ASSERT = "assert" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean ASSERT()
//    {
//        begin("ASSERT");
//        if (!next("assert")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BOOLEAN = "boolean" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean BOOLEAN()
//    {
//        begin("BOOLEAN");
//        if (!next("boolean")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BREAK = "break" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean BREAK()
//    {
//        begin("BREAK");
//        if (!next("break")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BYTE = "byte" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean BYTE()
//    {
//        begin("BYTE");
//        if (!next("byte")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CASE = "case" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean CASE()
//    {
//        begin("CASE");
//        if (!next("case")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CATCH = "catch" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean CATCH()
//    {
//        begin("CATCH");
//        if (!next("catch")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CHAR = "char" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean CHAR()
//    {
//        begin("CHAR");
//        if (!next("char")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CLASS = "class" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean CLASS()
//    {
//        begin("CLASS");
//        if (!next("class")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CONTINUE = "continue" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean CONTINUE()
//    {
//        begin("CONTINUE");
//        if (!next("continue")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DEFAULT = "default" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean DEFAULT()
//    {
//        begin("DEFAULT");
//        if (!next("default")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DOUBLE = "double" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean DOUBLE()
//    {
//        begin("DOUBLE");
//        if (!next("double")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DO = "do" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean DO()
//    {
//        begin("DO");
//        if (!next("do")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ELSE = "else" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean ELSE()
//    {
//        begin("ELSE");
//        if (!next("else")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ENUM = "enum" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean ENUM()
//    {
//        begin("ENUM");
//        if (!next("enum")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EXTENDS = "extends" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean EXTENDS()
//    {
//        begin("EXTENDS");
//        if (!next("extends")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  FALSE = "false" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean FALSE()
//    {
//        begin("FALSE");
//        if (!next("false")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  FINALLY = "finally" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean FINALLY()
//    {
//        begin("FINALLY");
//        if (!next("finally")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  FINAL = "final" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean FINAL()
//    {
//        begin("FINAL");
//        if (!next("final")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  FLOAT = "float" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean FLOAT()
//    {
//        begin("FLOAT");
//        if (!next("float")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  FOR = "for" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean FOR()
//    {
//        begin("FOR");
//        if (!next("for")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  IF = "if" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean IF()
//    {
//        begin("IF");
//        if (!next("if")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  IMPLEMENTS = "implements" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean IMPLEMENTS()
//    {
//        begin("IMPLEMENTS");
//        if (!next("implements")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  IMPORT = "import" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean IMPORT()
//    {
//        begin("IMPORT");
//        if (!next("import")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  INTERFACE = "interface" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean INTERFACE()
//    {
//        begin("INTERFACE");
//        if (!next("interface")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  INT = "int" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean INT()
//    {
//        begin("INT");
//        if (!next("int")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  INSTANCEOF = "instanceof" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean INSTANCEOF()
//    {
//        begin("INSTANCEOF");
//        if (!next("instanceof")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LONG = "long" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean LONG()
//    {
//        begin("LONG");
//        if (!next("long")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NATIVE = "native" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean NATIVE()
//    {
//        begin("NATIVE");
//        if (!next("native")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NEW = "new" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean NEW()
//    {
//        begin("NEW");
//        if (!next("new")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NULL = "null" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean NULL()
//    {
//        begin("NULL");
//        if (!next("null")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PACKAGE = "package" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean PACKAGE()
//    {
//        begin("PACKAGE");
//        if (!next("package")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PRIVATE = "private" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean PRIVATE()
//    {
//        begin("PRIVATE");
//        if (!next("private")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PROTECTED = "protected" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean PROTECTED()
//    {
//        begin("PROTECTED");
//        if (!next("protected")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PUBLIC = "public" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean PUBLIC()
//    {
//        begin("PUBLIC");
//        if (!next("public")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  RETURN = "return" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean RETURN()
//    {
//        begin("RETURN");
//        if (!next("return")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SHORT = "short" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean SHORT()
//    {
//        begin("SHORT");
//        if (!next("short")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  STATIC = "static" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean STATIC()
//    {
//        begin("STATIC");
//        if (!next("static")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  STRICTFP = "strictfp" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean STRICTFP()
//    {
//        begin("STRICTFP");
//        if (!next("strictfp")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SUPER = "super" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean SUPER()
//    {
//        begin("SUPER");
//        if (!next("super")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SWITCH = "switch" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean SWITCH()
//    {
//        begin("SWITCH");
//        if (!next("switch")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SYNCHRONIZED = "synchronized" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean SYNCHRONIZED()
//    {
//        begin("SYNCHRONIZED");
//        if (!next("synchronized")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  THIS = "this" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean THIS()
//    {
//        begin("THIS");
//        if (!next("this")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  THROWS = "throws" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean THROWS()
//    {
//        begin("THROWS");
//        if (!next("throws")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  THROW = "throw" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean THROW()
//    {
//        begin("THROW");
//        if (!next("throw")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TRANSIENT = "transient" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean TRANSIENT()
//    {
//        begin("TRANSIENT");
//        if (!next("transient")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TRUE = "true" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean TRUE()
//    {
//        begin("TRUE");
//        if (!next("true")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TRY = "try" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean TRY()
//    {
//        begin("TRY");
//        if (!next("try")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  VOID = "void" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean VOID()
//    {
//        begin("VOID");
//        if (!next("void")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  VOLATILE = "volatile" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean VOLATILE()
//    {
//        begin("VOLATILE");
//        if (!next("volatile")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  WHILE = "while" !LetterOrDigit Spacing ;
//    //=====================================================================
//    private boolean WHILE()
//    {
//        begin("WHILE");
//        if (!next("while")) return reject();
//        if (!Keyword_0()) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Literal = FloatLiteral / IntegerLiteral / BooleanLiteral /
//    //    CharLiteral / StringLiteral / NullLiteral ;
//    //=====================================================================
//    private boolean Literal()
//    {
//        begin("Literal");
//        if (FloatLiteral()) return accept();
//        if (IntegerLiteral()) return accept();
//        if (BooleanLiteral()) return accept();
//        if (CharLiteral()) return accept();
//        if (StringLiteral()) return accept();
//        if (NullLiteral()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  IntegerLiteral = (HexNumeral / BinaryNumeral / OctalNumeral /
//    //    DecimalNumeral) [lL]? Spacing ;
//    //=====================================================================
//    private boolean IntegerLiteral()
//    {
//        begin("IntegerLiteral");
//        if (!HexNumeral()
//            && !BinaryNumeral()
//            && !OctalNumeral()
//            && !DecimalNumeral()
//            ) return reject();
//        nextIn("lL");
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DecimalNumeral = "0" / [1-9] ([_]* [0-9])* ;
//    //=====================================================================
//    private boolean DecimalNumeral()
//    {
//        begin("DecimalNumeral");
//        if (next('0')) return accept();
//        if (DecimalNumeral_0()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalNumeral_0 = [1-9] ([_]* [0-9])*
//    //-------------------------------------------------------------------
//    private boolean DecimalNumeral_0()
//    {
//        begin("");
//        if (!nextIn('1','9')) return rejectInner();
//        while (DecimalNumeral_1());
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalNumeral_1 = [_]* [0-9]
//    //-------------------------------------------------------------------
//    private boolean DecimalNumeral_1()
//    {
//        begin("");
//        while (next('_'));
//        if (!nextIn('0','9')) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  HexNumeral = ("0x" / "0X") HexDigits ;
//    //=====================================================================
//    private boolean HexNumeral()
//    {
//        begin("HexNumeral");
//        if (!next("0x")
//            && !next("0X")
//            ) return reject();
//        if (!HexDigits()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  OctalNumeral = "0" ([_]* [0-7])+ ;
//    //=====================================================================
//    private boolean OctalNumeral()
//    {
//        begin("OctalNumeral");
//        if (!next('0')) return reject();
//        if (!OctalNumeral_0()) return reject();
//        while (OctalNumeral_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  OctalNumeral_0 = [_]* [0-7]
//    //-------------------------------------------------------------------
//    private boolean OctalNumeral_0()
//    {
//        begin("");
//        while (next('_'));
//        if (!nextIn('0','7')) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  BinaryNumeral = ("0b" / "0B") [01] ([_]* [01])* ;
//    //=====================================================================
//    private boolean BinaryNumeral()
//    {
//        begin("BinaryNumeral");
//        if (!next("0b")
//            && !next("0B")
//            ) return reject();
//        if (!nextIn("01")) return reject();
//        while (BinaryNumeral_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  BinaryNumeral_0 = [_]* [01]
//    //-------------------------------------------------------------------
//    private boolean BinaryNumeral_0()
//    {
//        begin("");
//        while (next('_'));
//        if (!nextIn("01")) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  FloatLiteral = (HexadecimalFloatingPointLiteral /
//    //    DecimalFloatingPointLiteral) Spacing ;
//    //=====================================================================
//    private boolean FloatLiteral()
//    {
//        begin("FloatLiteral");
//        if (!HexadecimalFloatingPointLiteral()
//            && !DecimalFloatingPointLiteral()
//            ) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DecimalFloatingPointLiteral = Digits "." Digits? Exponent? [fFdD]?
//    //    / "." Digits Exponent? [fFdD]? / Digits Exponent [fFdD]? / Digits
//    //    Exponent? [fFdD] ;
//    //=====================================================================
//    private boolean DecimalFloatingPointLiteral()
//    {
//        begin("DecimalFloatingPointLiteral");
//        if (DecimalFloatingPointLiteral_0()) return accept();
//        if (DecimalFloatingPointLiteral_1()) return accept();
//        if (DecimalFloatingPointLiteral_2()) return accept();
//        if (DecimalFloatingPointLiteral_3()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalFloatingPointLiteral_0 = Digits "." Digits? Exponent?
//    //    [fFdD]?
//    //-------------------------------------------------------------------
//    private boolean DecimalFloatingPointLiteral_0()
//    {
//        begin("");
//        if (!Digits()) return rejectInner();
//        if (!next('.')) return rejectInner();
//        Digits();
//        Exponent();
//        nextIn("fFdD");
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalFloatingPointLiteral_1 = "." Digits Exponent? [fFdD]?
//    //-------------------------------------------------------------------
//    private boolean DecimalFloatingPointLiteral_1()
//    {
//        begin("");
//        if (!next('.')) return rejectInner();
//        if (!Digits()) return rejectInner();
//        Exponent();
//        nextIn("fFdD");
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalFloatingPointLiteral_2 = Digits Exponent [fFdD]?
//    //-------------------------------------------------------------------
//    private boolean DecimalFloatingPointLiteral_2()
//    {
//        begin("");
//        if (!Digits()) return rejectInner();
//        if (!Exponent()) return rejectInner();
//        nextIn("fFdD");
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  DecimalFloatingPointLiteral_3 = Digits Exponent? [fFdD]
//    //-------------------------------------------------------------------
//    private boolean DecimalFloatingPointLiteral_3()
//    {
//        begin("");
//        if (!Digits()) return rejectInner();
//        Exponent();
//        if (!nextIn("fFdD")) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Exponent = [eE] [+-]? Digits ;
//    //=====================================================================
//    private boolean Exponent()
//    {
//        begin("Exponent");
//        if (!nextIn("eE")) return reject();
//        nextIn("+-");
//        if (!Digits()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  HexadecimalFloatingPointLiteral = HexSignificand BinaryExponent
//    //    [fFdD]? ;
//    //=====================================================================
//    private boolean HexadecimalFloatingPointLiteral()
//    {
//        begin("HexadecimalFloatingPointLiteral");
//        if (!HexSignificand()) return reject();
//        if (!BinaryExponent()) return reject();
//        nextIn("fFdD");
//        return accept();
//    }
//
//    //=====================================================================
//    //  HexSignificand = ("0x" / "0X") HexDigits? "." HexDigits /
//    //    HexNumeral "."? ;
//    //=====================================================================
//    private boolean HexSignificand()
//    {
//        begin("HexSignificand");
//        if (HexSignificand_0()) return accept();
//        if (HexSignificand_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  HexSignificand_0 = ("0x" / "0X") HexDigits? "." HexDigits
//    //-------------------------------------------------------------------
//    private boolean HexSignificand_0()
//    {
//        begin("");
//        if (!next("0x")
//            && !next("0X")
//            ) return rejectInner();
//        HexDigits();
//        if (!next('.')) return rejectInner();
//        if (!HexDigits()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  HexSignificand_1 = HexNumeral "."?
//    //-------------------------------------------------------------------
//    private boolean HexSignificand_1()
//    {
//        begin("");
//        if (!HexNumeral()) return rejectInner();
//        next('.');
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  HexDigits = HexDigit ([_]* HexDigit)* ;
//    //=====================================================================
//    private boolean HexDigits()
//    {
//        begin("HexDigits");
//        if (!HexDigit()) return reject();
//        while (HexDigits_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  HexDigits_0 = [_]* HexDigit
//    //-------------------------------------------------------------------
//    private boolean HexDigits_0()
//    {
//        begin("");
//        while (next('_'));
//        if (!HexDigit()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  HexDigit = [a-f] / [A-F] / [0-9] ;
//    //=====================================================================
//    private boolean HexDigit()
//    {
//        begin("HexDigit");
//        if (nextIn('a','f')) return accept();
//        if (nextIn('A','F')) return accept();
//        if (nextIn('0','9')) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  BinaryExponent = [pP] [+-]? Digits ;
//    //=====================================================================
//    private boolean BinaryExponent()
//    {
//        begin("BinaryExponent");
//        if (!nextIn("pP")) return reject();
//        nextIn("+-");
//        if (!Digits()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Digits = [0-9] ([_]* [0-9])* ;
//    //=====================================================================
//    private boolean Digits()
//    {
//        begin("Digits");
//        if (!nextIn('0','9')) return reject();
//        while (DecimalNumeral_1());
//        return accept();
//    }
//
//    //=====================================================================
//    //  BooleanLiteral = TRUE / FALSE ;
//    //=====================================================================
//    private boolean BooleanLiteral()
//    {
//        begin("BooleanLiteral");
//        if (TRUE()) return accept();
//        if (FALSE()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  CharLiteral = "'" (Escape / !['\\n\r] _) "'" Spacing ;
//    //=====================================================================
//    private boolean CharLiteral()
//    {
//        begin("CharLiteral");
//        if (!next('\'')) return reject();
//        if (!Escape()
//            && !CharLiteral_0()
//            ) return reject();
//        if (!next('\'')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  CharLiteral_0 = !['\\n\r] _
//    //-------------------------------------------------------------------
//    private boolean CharLiteral_0()
//    {
//        begin("");
//        if (!aheadNotIn("'\\\n\r")) return rejectInner();
//        if (!next()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  StringLiteral = """ (Escape / !["\\n\r] _)* """ Spacing ;
//    //=====================================================================
//    private boolean StringLiteral()
//    {
//        begin("StringLiteral");
//        if (!next('"')) return reject();
//        while (StringLiteral_0());
//        if (!next('"')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  StringLiteral_0 = Escape / !["\\n\r] _
//    //-------------------------------------------------------------------
//    private boolean StringLiteral_0()
//    {
//        begin("");
//        if (Escape()) return acceptInner();
//        if (StringLiteral_1()) return acceptInner();
//        return rejectInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  StringLiteral_1 = !["\\n\r] _
//    //-------------------------------------------------------------------
//    private boolean StringLiteral_1()
//    {
//        begin("");
//        if (!aheadNotIn("\"\\\n\r")) return rejectInner();
//        if (!next()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Escape = "\" ([btnfr"'\] / OctalEscape / UnicodeEscape) ;
//    //=====================================================================
//    private boolean Escape()
//    {
//        begin("Escape");
//        if (!next('\\')) return reject();
//        if (!nextIn("btnfr\"'\\")
//            && !OctalEscape()
//            && !UnicodeEscape()
//            ) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  OctalEscape = [0-3] [0-7] [0-7] / [0-7] [0-7] / [0-7] ;
//    //=====================================================================
//    private boolean OctalEscape()
//    {
//        begin("OctalEscape");
//        if (OctalEscape_0()) return accept();
//        if (OctalEscape_1()) return accept();
//        if (nextIn('0','7')) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  OctalEscape_0 = [0-3] [0-7] [0-7]
//    //-------------------------------------------------------------------
//    private boolean OctalEscape_0()
//    {
//        begin("");
//        if (!nextIn('0','3')) return rejectInner();
//        if (!nextIn('0','7')) return rejectInner();
//        if (!nextIn('0','7')) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  OctalEscape_1 = [0-7] [0-7]
//    //-------------------------------------------------------------------
//    private boolean OctalEscape_1()
//    {
//        begin("");
//        if (!nextIn('0','7')) return rejectInner();
//        if (!nextIn('0','7')) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  UnicodeEscape = "u"+ HexDigit HexDigit HexDigit HexDigit ;
//    //=====================================================================
//    private boolean UnicodeEscape()
//    {
//        begin("UnicodeEscape");
//        if (!next('u')) return reject();
//        while (next('u'));
//        if (!HexDigit()) return reject();
//        if (!HexDigit()) return reject();
//        if (!HexDigit()) return reject();
//        if (!HexDigit()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NullLiteral = NULL ;
//    //=====================================================================
//    private boolean NullLiteral()
//    {
//        begin("NullLiteral");
//        if (!NULL()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  AT = "@" Spacing ;
//    //=====================================================================
//    private boolean AT()
//    {
//        begin("AT");
//        if (!next('@')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  COLONCOLON = "::" Spacing ;
//    //=====================================================================
//    private boolean COLONCOLON()
//    {
//        begin("COLONCOLON");
//        if (!next("::")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  COMMA = "," Spacing ;
//    //=====================================================================
//    private boolean COMMA()
//    {
//        begin("COMMA");
//        if (!next(',')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DOT = "." Spacing ;
//    //=====================================================================
//    private boolean DOT()
//    {
//        begin("DOT");
//        if (!next('.')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ELLIPSIS = "..." Spacing ;
//    //=====================================================================
//    private boolean ELLIPSIS()
//    {
//        begin("ELLIPSIS");
//        if (!next("...")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LPAR = "(" Spacing ;
//    //=====================================================================
//    private boolean LPAR()
//    {
//        begin("LPAR");
//        if (!next('(')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LBRK = "[" Spacing ;
//    //=====================================================================
//    private boolean LBRK()
//    {
//        begin("LBRK");
//        if (!next('[')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  RBRK = "]" Spacing ;
//    //=====================================================================
//    private boolean RBRK()
//    {
//        begin("RBRK");
//        if (!next(']')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  RPAR = ")" Spacing ;
//    //=====================================================================
//    private boolean RPAR()
//    {
//        begin("RPAR");
//        if (!next(')')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LWING = "{" Spacing ;
//    //=====================================================================
//    private boolean LWING()
//    {
//        begin("LWING");
//        if (!next('{')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  RWING = "}" Spacing ;
//    //=====================================================================
//    private boolean RWING()
//    {
//        begin("RWING");
//        if (!next('}')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SEMI = ";" Spacing ;
//    //=====================================================================
//    private boolean SEMI()
//    {
//        begin("SEMI");
//        if (!next(';')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  AND = "&" ![=&] Spacing ;
//    //=====================================================================
//    private boolean AND()
//    {
//        begin("AND");
//        if (!next('&')) return reject();
//        if (!aheadNotIn("=&")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ANDAND = "&&" Spacing ;
//    //=====================================================================
//    private boolean ANDAND()
//    {
//        begin("ANDAND");
//        if (!next("&&")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ANDEQU = "&=" Spacing ;
//    //=====================================================================
//    private boolean ANDEQU()
//    {
//        begin("ANDEQU");
//        if (!next("&=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ARROW = "->" Spacing ;
//    //=====================================================================
//    private boolean ARROW()
//    {
//        begin("ARROW");
//        if (!next("->")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BANG = "!" ![=] Spacing ;
//    //=====================================================================
//    private boolean BANG()
//    {
//        begin("BANG");
//        if (!next('!')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BSR = ">>>" ![=] Spacing ;
//    //=====================================================================
//    private boolean BSR()
//    {
//        begin("BSR");
//        if (!next(">>>")) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BSREQU = ">>>=" Spacing ;
//    //=====================================================================
//    private boolean BSREQU()
//    {
//        begin("BSREQU");
//        if (!next(">>>=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  COLON = ":" ![:] Spacing ;
//    //=====================================================================
//    private boolean COLON()
//    {
//        begin("COLON");
//        if (!next(':')) return reject();
//        if (!aheadNot(':')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DEC = "--" Spacing ;
//    //=====================================================================
//    private boolean DEC()
//    {
//        begin("DEC");
//        if (!next("--")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DIV = "/" ![=] Spacing ;
//    //=====================================================================
//    private boolean DIV()
//    {
//        begin("DIV");
//        if (!next('/')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  DIVEQU = "/=" Spacing ;
//    //=====================================================================
//    private boolean DIVEQU()
//    {
//        begin("DIVEQU");
//        if (!next("/=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EQU = "=" ![=] Spacing ;
//    //=====================================================================
//    private boolean EQU()
//    {
//        begin("EQU");
//        if (!next('=')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EQUAL = "==" Spacing ;
//    //=====================================================================
//    private boolean EQUAL()
//    {
//        begin("EQUAL");
//        if (!next("==")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  GE = ">=" Spacing ;
//    //=====================================================================
//    private boolean GE()
//    {
//        begin("GE");
//        if (!next(">=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  GT = ">" ![=>] Spacing ;
//    //=====================================================================
//    private boolean GT()
//    {
//        begin("GT");
//        if (!next('>')) return reject();
//        if (!aheadNotIn("=>")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  HAT = "^" ![=] Spacing ;
//    //=====================================================================
//    private boolean HAT()
//    {
//        begin("HAT");
//        if (!next('^')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  HATEQU = "^=" Spacing ;
//    //=====================================================================
//    private boolean HATEQU()
//    {
//        begin("HATEQU");
//        if (!next("^=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  INC = "++" Spacing ;
//    //=====================================================================
//    private boolean INC()
//    {
//        begin("INC");
//        if (!next("++")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LE = "<=" Spacing ;
//    //=====================================================================
//    private boolean LE()
//    {
//        begin("LE");
//        if (!next("<=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LPOINT = "<" Spacing ;
//    //=====================================================================
//    private boolean LPOINT()
//    {
//        begin("LPOINT");
//        if (!next('<')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LT = "<" ![=<] Spacing ;
//    //=====================================================================
//    private boolean LT()
//    {
//        begin("LT");
//        if (!next('<')) return reject();
//        if (!aheadNotIn("=<")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  MINUS = "-" ![=->] Spacing ;
//    //=====================================================================
//    private boolean MINUS()
//    {
//        begin("MINUS");
//        if (!next('-')) return reject();
//        if (!aheadNotIn("=->")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  MINUSEQU = "-=" Spacing ;
//    //=====================================================================
//    private boolean MINUSEQU()
//    {
//        begin("MINUSEQU");
//        if (!next("-=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  MOD = "%" ![=] Spacing ;
//    //=====================================================================
//    private boolean MOD()
//    {
//        begin("MOD");
//        if (!next('%')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  MODEQU = "%=" Spacing ;
//    //=====================================================================
//    private boolean MODEQU()
//    {
//        begin("MODEQU");
//        if (!next("%=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NOTEQUAL = "!=" Spacing ;
//    //=====================================================================
//    private boolean NOTEQUAL()
//    {
//        begin("NOTEQUAL");
//        if (!next("!=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  OR = "|" ![=|] Spacing ;
//    //=====================================================================
//    private boolean OR()
//    {
//        begin("OR");
//        if (!next('|')) return reject();
//        if (!aheadNotIn("=|")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  OREQU = "|=" Spacing ;
//    //=====================================================================
//    private boolean OREQU()
//    {
//        begin("OREQU");
//        if (!next("|=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  OROR = "||" Spacing ;
//    //=====================================================================
//    private boolean OROR()
//    {
//        begin("OROR");
//        if (!next("||")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PLUS = "+" ![=+] Spacing ;
//    //=====================================================================
//    private boolean PLUS()
//    {
//        begin("PLUS");
//        if (!next('+')) return reject();
//        if (!aheadNotIn("=+")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PLUSEQU = "+=" Spacing ;
//    //=====================================================================
//    private boolean PLUSEQU()
//    {
//        begin("PLUSEQU");
//        if (!next("+=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  QUERY = "?" Spacing ;
//    //=====================================================================
//    private boolean QUERY()
//    {
//        begin("QUERY");
//        if (!next('?')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  RPOINT = ">" Spacing ;
//    //=====================================================================
//    private boolean RPOINT()
//    {
//        begin("RPOINT");
//        if (!next('>')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SL = "<<" ![=] Spacing ;
//    //=====================================================================
//    private boolean SL()
//    {
//        begin("SL");
//        if (!next("<<")) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SLEQU = "<<=" Spacing ;
//    //=====================================================================
//    private boolean SLEQU()
//    {
//        begin("SLEQU");
//        if (!next("<<=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SR = ">>" ![=>] Spacing ;
//    //=====================================================================
//    private boolean SR()
//    {
//        begin("SR");
//        if (!next(">>")) return reject();
//        if (!aheadNotIn("=>")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SREQU = ">>=" Spacing ;
//    //=====================================================================
//    private boolean SREQU()
//    {
//        begin("SREQU");
//        if (!next(">>=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  STAR = "*" ![=] Spacing ;
//    //=====================================================================
//    private boolean STAR()
//    {
//        begin("STAR");
//        if (!next('*')) return reject();
//        if (!aheadNot('=')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  STAREQU = "*=" Spacing ;
//    //=====================================================================
//    private boolean STAREQU()
//    {
//        begin("STAREQU");
//        if (!next("*=")) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TILDE = "~" Spacing ;
//    //=====================================================================
//    private boolean TILDE()
//    {
//        begin("TILDE");
//        if (!next('~')) return reject();
//        Spacing();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BasicType = BYTE / SHORT / INT / LONG / CHAR / FLOAT / DOUBLE /
//    //    BOOLEAN ;
//    //=====================================================================
//    private boolean BasicType()
//    {
//        begin("BasicType");
//        if (BYTE()) return accept();
//        if (SHORT()) return accept();
//        if (INT()) return accept();
//        if (LONG()) return accept();
//        if (CHAR()) return accept();
//        if (FLOAT()) return accept();
//        if (DOUBLE()) return accept();
//        if (BOOLEAN()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  PrimitiveType = Annotation* BasicType ;
//    //=====================================================================
//    private boolean PrimitiveType()
//    {
//        begin("PrimitiveType");
//        while (Annotation());
//        if (!BasicType()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ReferenceType = PrimitiveType Dim+ / ClassType Dim* ;
//    //=====================================================================
//    private boolean ReferenceType()
//    {
//        begin("ReferenceType");
//        if (ReferenceType_0()) return accept();
//        if (ReferenceType_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  ReferenceType_0 = PrimitiveType Dim+
//    //-------------------------------------------------------------------
//    private boolean ReferenceType_0()
//    {
//        begin("");
//        if (!PrimitiveType()) return rejectInner();
//        if (!Dim()) return rejectInner();
//        while (Dim());
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ReferenceType_1 = ClassType Dim*
//    //-------------------------------------------------------------------
//    private boolean ReferenceType_1()
//    {
//        begin("");
//        if (!ClassType()) return rejectInner();
//        while (Dim());
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  ClassType = Annotation* Identifier TypeArguments? (DOT Annotation*
//    //    Identifier TypeArguments?)* ;
//    //=====================================================================
//    private boolean ClassType()
//    {
//        begin("ClassType");
//        while (Annotation());
//        if (!Identifier()) return reject();
//        TypeArguments();
//        while (ClassType_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ClassType_0 = DOT Annotation* Identifier TypeArguments?
//    //-------------------------------------------------------------------
//    private boolean ClassType_0()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        while (Annotation());
//        if (!Identifier()) return rejectInner();
//        TypeArguments();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Type = PrimitiveType / ClassType ;
//    //=====================================================================
//    private boolean Type()
//    {
//        begin("Type");
//        if (PrimitiveType()) return accept();
//        if (ClassType()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ArrayType = PrimitiveType Dim+ / ClassType Dim+ ;
//    //=====================================================================
//    private boolean ArrayType()
//    {
//        begin("ArrayType");
//        if (ReferenceType_0()) return accept();
//        if (ArrayType_0()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  ArrayType_0 = ClassType Dim+
//    //-------------------------------------------------------------------
//    private boolean ArrayType_0()
//    {
//        begin("");
//        if (!ClassType()) return rejectInner();
//        if (!Dim()) return rejectInner();
//        while (Dim());
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  TypeVariable = Annotation* Identifier ;
//    //=====================================================================
//    private boolean TypeVariable()
//    {
//        begin("TypeVariable");
//        while (Annotation());
//        if (!Identifier()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Dim = Annotation* LBRK RBRK ;
//    //=====================================================================
//    private boolean Dim()
//    {
//        begin("Dim");
//        while (Annotation());
//        if (!LBRK()) return reject();
//        if (!RBRK()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeParameter = TypeParameterModifier* Identifier TypeBound? ;
//    //=====================================================================
//    private boolean TypeParameter()
//    {
//        begin("TypeParameter");
//        while (TypeParameterModifier());
//        if (!Identifier()) return reject();
//        TypeBound();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeParameterModifier = Annotation ;
//    //=====================================================================
//    private boolean TypeParameterModifier()
//    {
//        begin("TypeParameterModifier");
//        if (!Annotation()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeBound = EXTENDS (ClassType AdditionalBound* / TypeVariable) ;
//    //=====================================================================
//    private boolean TypeBound()
//    {
//        begin("TypeBound");
//        if (!EXTENDS()) return reject();
//        if (!TypeBound_0()
//            && !TypeVariable()
//            ) return reject();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  TypeBound_0 = ClassType AdditionalBound*
//    //-------------------------------------------------------------------
//    private boolean TypeBound_0()
//    {
//        begin("");
//        if (!ClassType()) return rejectInner();
//        while (AdditionalBound());
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  AdditionalBound = AND ClassType ;
//    //=====================================================================
//    private boolean AdditionalBound()
//    {
//        begin("AdditionalBound");
//        if (!AND()) return reject();
//        if (!ClassType()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeArguments = LPOINT TypeArgumentList RPOINT ;
//    //=====================================================================
//    private boolean TypeArguments()
//    {
//        begin("TypeArguments");
//        if (!LPOINT()) return reject();
//        if (!TypeArgumentList()) return reject();
//        if (!RPOINT()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeArgumentList = TypeArgument (COMMA TypeArgument)* ;
//    //=====================================================================
//    private boolean TypeArgumentList()
//    {
//        begin("TypeArgumentList");
//        if (!TypeArgument()) return reject();
//        while (TypeArgumentList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  TypeArgumentList_0 = COMMA TypeArgument
//    //-------------------------------------------------------------------
//    private boolean TypeArgumentList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!TypeArgument()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  TypeArgument = ReferenceType / Wildcard ;
//    //=====================================================================
//    private boolean TypeArgument()
//    {
//        begin("TypeArgument");
//        if (ReferenceType()) return accept();
//        if (Wildcard()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  Wildcard = Annotation* QUERY WildcardBounds? ;
//    //=====================================================================
//    private boolean Wildcard()
//    {
//        begin("Wildcard");
//        while (Annotation());
//        if (!QUERY()) return reject();
//        WildcardBounds();
//        return accept();
//    }
//
//    //=====================================================================
//    //  WildcardBounds = EXTENDS ReferenceType / SUPER ReferenceType ;
//    //=====================================================================
//    private boolean WildcardBounds()
//    {
//        begin("WildcardBounds");
//        if (WildcardBounds_0()) return accept();
//        if (WildcardBounds_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  WildcardBounds_0 = EXTENDS ReferenceType
//    //-------------------------------------------------------------------
//    private boolean WildcardBounds_0()
//    {
//        begin("");
//        if (!EXTENDS()) return rejectInner();
//        if (!ReferenceType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  WildcardBounds_1 = SUPER ReferenceType
//    //-------------------------------------------------------------------
//    private boolean WildcardBounds_1()
//    {
//        begin("");
//        if (!SUPER()) return rejectInner();
//        if (!ReferenceType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  QualIdent = Identifier (DOT Identifier)* ;
//    //=====================================================================
//    private boolean QualIdent()
//    {
//        begin("QualIdent");
//        if (!Identifier()) return reject();
//        while (QualIdent_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  QualIdent_0 = DOT Identifier
//    //-------------------------------------------------------------------
//    private boolean QualIdent_0()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  CompilationUnit = PackageDeclaration? ImportDeclaration*
//    //    TypeDeclaration* ;
//    //=====================================================================
//    private boolean CompilationUnit()
//    {
//        begin("CompilationUnit");
//        PackageDeclaration();
//        while (ImportDeclaration());
//        while (TypeDeclaration());
//        return accept();
//    }
//
//    //=====================================================================
//    //  PackageDeclaration = PackageModifier* PACKAGE Identifier (DOT
//    //    Identifier)* SEMI ;
//    //=====================================================================
//    private boolean PackageDeclaration()
//    {
//        begin("PackageDeclaration");
//        while (PackageModifier());
//        if (!PACKAGE()) return reject();
//        if (!Identifier()) return reject();
//        while (QualIdent_0());
//        if (!SEMI()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  PackageModifier = Annotation ;
//    //=====================================================================
//    private boolean PackageModifier()
//    {
//        begin("PackageModifier");
//        if (!Annotation()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ImportDeclaration = IMPORT STATIC? QualIdent (DOT STAR)? SEMI /
//    //    SEMI ;
//    //=====================================================================
//    private boolean ImportDeclaration()
//    {
//        begin("ImportDeclaration");
//        if (ImportDeclaration_0()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  ImportDeclaration_0 = IMPORT STATIC? QualIdent (DOT STAR)? SEMI
//    //-------------------------------------------------------------------
//    private boolean ImportDeclaration_0()
//    {
//        begin("");
//        if (!IMPORT()) return rejectInner();
//        STATIC();
//        if (!QualIdent()) return rejectInner();
//        ImportDeclaration_1();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ImportDeclaration_1 = DOT STAR
//    //-------------------------------------------------------------------
//    private boolean ImportDeclaration_1()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        if (!STAR()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  TypeDeclaration = ClassDeclaration / InterfaceDeclaration / SEMI ;
//    //=====================================================================
//    private boolean TypeDeclaration()
//    {
//        begin("TypeDeclaration");
//        if (ClassDeclaration()) return accept();
//        if (InterfaceDeclaration()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ClassDeclaration = NormalClassDeclaration / EnumDeclaration ;
//    //=====================================================================
//    private boolean ClassDeclaration()
//    {
//        begin("ClassDeclaration");
//        if (NormalClassDeclaration()) return accept();
//        if (EnumDeclaration()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  NormalClassDeclaration = ClassModifier* CLASS Identifier
//    //    TypeParameters? Superclass? Superinterfaces? ClassBody ;
//    //=====================================================================
//    private boolean NormalClassDeclaration()
//    {
//        begin("NormalClassDeclaration");
//        while (ClassModifier());
//        if (!CLASS()) return reject();
//        if (!Identifier()) return reject();
//        TypeParameters();
//        Superclass();
//        Superinterfaces();
//        if (!ClassBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ClassModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
//    //    ABSTRACT / STATIC / FINAL / STRICTFP ;
//    //=====================================================================
//    private boolean ClassModifier()
//    {
//        begin("ClassModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (PROTECTED()) return accept();
//        if (PRIVATE()) return accept();
//        if (ABSTRACT()) return accept();
//        if (STATIC()) return accept();
//        if (FINAL()) return accept();
//        if (STRICTFP()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  TypeParameters = LPOINT TypeParameterList RPOINT ;
//    //=====================================================================
//    private boolean TypeParameters()
//    {
//        begin("TypeParameters");
//        if (!LPOINT()) return reject();
//        if (!TypeParameterList()) return reject();
//        if (!RPOINT()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TypeParameterList = TypeParameter (COMMA TypeParameter)* ;
//    //=====================================================================
//    private boolean TypeParameterList()
//    {
//        begin("TypeParameterList");
//        if (!TypeParameter()) return reject();
//        while (TypeParameterList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  TypeParameterList_0 = COMMA TypeParameter
//    //-------------------------------------------------------------------
//    private boolean TypeParameterList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!TypeParameter()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Superclass = EXTENDS ClassType ;
//    //=====================================================================
//    private boolean Superclass()
//    {
//        begin("Superclass");
//        if (!EXTENDS()) return reject();
//        if (!ClassType()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Superinterfaces = IMPLEMENTS InterfaceTypeList ;
//    //=====================================================================
//    private boolean Superinterfaces()
//    {
//        begin("Superinterfaces");
//        if (!IMPLEMENTS()) return reject();
//        if (!InterfaceTypeList()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceTypeList = ClassType (COMMA ClassType)* ;
//    //=====================================================================
//    private boolean InterfaceTypeList()
//    {
//        begin("InterfaceTypeList");
//        if (!ClassType()) return reject();
//        while (InterfaceTypeList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  InterfaceTypeList_0 = COMMA ClassType
//    //-------------------------------------------------------------------
//    private boolean InterfaceTypeList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!ClassType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  ClassBody = LWING ClassBodyDeclaration* RWING ;
//    //=====================================================================
//    private boolean ClassBody()
//    {
//        begin("ClassBody");
//        if (!LWING()) return reject();
//        while (ClassBodyDeclaration());
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ClassBodyDeclaration = ClassMemberDeclaration / InstanceInitializer
//    //    / StaticInitializer / ConstructorDeclaration ;
//    //=====================================================================
//    private boolean ClassBodyDeclaration()
//    {
//        begin("ClassBodyDeclaration");
//        if (ClassMemberDeclaration()) return accept();
//        if (InstanceInitializer()) return accept();
//        if (StaticInitializer()) return accept();
//        if (ConstructorDeclaration()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ClassMemberDeclaration = FieldDeclaration / MethodDeclaration /
//    //    ClassDeclaration / InterfaceDeclaration / SEMI ;
//    //=====================================================================
//    private boolean ClassMemberDeclaration()
//    {
//        begin("ClassMemberDeclaration");
//        if (FieldDeclaration()) return accept();
//        if (MethodDeclaration()) return accept();
//        if (ClassDeclaration()) return accept();
//        if (InterfaceDeclaration()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  FieldDeclaration = FieldModifier* UnannType VariableDeclaratorList
//    //    SEMI ;
//    //=====================================================================
//    private boolean FieldDeclaration()
//    {
//        begin("FieldDeclaration");
//        while (FieldModifier());
//        if (!UnannType()) return reject();
//        if (!VariableDeclaratorList()) return reject();
//        if (!SEMI()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  VariableDeclaratorList = VariableDeclarator (COMMA
//    //    VariableDeclarator)* ;
//    //=====================================================================
//    private boolean VariableDeclaratorList()
//    {
//        begin("VariableDeclaratorList");
//        if (!VariableDeclarator()) return reject();
//        while (VariableDeclaratorList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  VariableDeclaratorList_0 = COMMA VariableDeclarator
//    //-------------------------------------------------------------------
//    private boolean VariableDeclaratorList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!VariableDeclarator()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  VariableDeclarator = VariableDeclaratorId (EQU
//    //    VariableInitializer)? ;
//    //=====================================================================
//    private boolean VariableDeclarator()
//    {
//        begin("VariableDeclarator");
//        if (!VariableDeclaratorId()) return reject();
//        VariableDeclarator_0();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  VariableDeclarator_0 = EQU VariableInitializer
//    //-------------------------------------------------------------------
//    private boolean VariableDeclarator_0()
//    {
//        begin("");
//        if (!EQU()) return rejectInner();
//        if (!VariableInitializer()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  VariableDeclaratorId = Identifier Dim* ;
//    //=====================================================================
//    private boolean VariableDeclaratorId()
//    {
//        begin("VariableDeclaratorId");
//        if (!Identifier()) return reject();
//        while (Dim());
//        return accept();
//    }
//
//    //=====================================================================
//    //  VariableInitializer = Expression / ArrayInitializer ;
//    //=====================================================================
//    private boolean VariableInitializer()
//    {
//        begin("VariableInitializer");
//        if (Expression()) return accept();
//        if (ArrayInitializer()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  UnannClassType = Identifier TypeArguments? (DOT Annotation*
//    //    Identifier TypeArguments?)* ;
//    //=====================================================================
//    private boolean UnannClassType()
//    {
//        begin("UnannClassType");
//        if (!Identifier()) return reject();
//        TypeArguments();
//        while (ClassType_0());
//        return accept();
//    }
//
//    //=====================================================================
//    //  UnannType = BasicType Dim* / UnannClassType Dim* ;
//    //=====================================================================
//    private boolean UnannType()
//    {
//        begin("UnannType");
//        if (UnannType_0()) return accept();
//        if (UnannType_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnannType_0 = BasicType Dim*
//    //-------------------------------------------------------------------
//    private boolean UnannType_0()
//    {
//        begin("");
//        if (!BasicType()) return rejectInner();
//        while (Dim());
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnannType_1 = UnannClassType Dim*
//    //-------------------------------------------------------------------
//    private boolean UnannType_1()
//    {
//        begin("");
//        if (!UnannClassType()) return rejectInner();
//        while (Dim());
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  FieldModifier = Annotation / PUBLIC / PROTECTED / PRIVATE / STATIC
//    //    / FINAL / TRANSIENT / VOLATILE ;
//    //=====================================================================
//    private boolean FieldModifier()
//    {
//        begin("FieldModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (PROTECTED()) return accept();
//        if (PRIVATE()) return accept();
//        if (STATIC()) return accept();
//        if (FINAL()) return accept();
//        if (TRANSIENT()) return accept();
//        if (VOLATILE()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  MethodDeclaration = MethodModifier* MethodHeader MethodBody ;
//    //=====================================================================
//    private boolean MethodDeclaration()
//    {
//        begin("MethodDeclaration");
//        while (MethodModifier());
//        if (!MethodHeader()) return reject();
//        if (!MethodBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  MethodHeader = Result MethodDeclarator Throws? / TypeParameters
//    //    Annotation* Result MethodDeclarator Throws? ;
//    //=====================================================================
//    private boolean MethodHeader()
//    {
//        begin("MethodHeader");
//        if (MethodHeader_0()) return accept();
//        if (MethodHeader_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  MethodHeader_0 = Result MethodDeclarator Throws?
//    //-------------------------------------------------------------------
//    private boolean MethodHeader_0()
//    {
//        begin("");
//        if (!Result()) return rejectInner();
//        if (!MethodDeclarator()) return rejectInner();
//        Throws();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  MethodHeader_1 = TypeParameters Annotation* Result
//    //    MethodDeclarator Throws?
//    //-------------------------------------------------------------------
//    private boolean MethodHeader_1()
//    {
//        begin("");
//        if (!TypeParameters()) return rejectInner();
//        while (Annotation());
//        if (!Result()) return rejectInner();
//        if (!MethodDeclarator()) return rejectInner();
//        Throws();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  MethodDeclarator = Identifier LPAR FormalParameterList? RPAR Dim*
//    //    ;
//    //=====================================================================
//    private boolean MethodDeclarator()
//    {
//        begin("MethodDeclarator");
//        if (!Identifier()) return reject();
//        if (!LPAR()) return reject();
//        FormalParameterList();
//        if (!RPAR()) return reject();
//        while (Dim());
//        return accept();
//    }
//
//    //=====================================================================
//    //  FormalParameterList = (ReceiverParameter / FormalParameter) (COMMA
//    //    FormalParameter)* ;
//    //=====================================================================
//    private boolean FormalParameterList()
//    {
//        begin("FormalParameterList");
//        if (!ReceiverParameter()
//            && !FormalParameter()
//            ) return reject();
//        while (FormalParameterList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  FormalParameterList_0 = COMMA FormalParameter
//    //-------------------------------------------------------------------
//    private boolean FormalParameterList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!FormalParameter()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  FormalParameter = VariableModifier* UnannType VariableDeclaratorId
//    //    / VariableModifier* UnannType Annotation* ELLIPSIS
//    //    VariableDeclaratorId !COMMA ;
//    //=====================================================================
//    private boolean FormalParameter()
//    {
//        begin("FormalParameter");
//        if (FormalParameter_0()) return accept();
//        if (FormalParameter_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  FormalParameter_0 = VariableModifier* UnannType
//    //    VariableDeclaratorId
//    //-------------------------------------------------------------------
//    private boolean FormalParameter_0()
//    {
//        begin("");
//        while (VariableModifier());
//        if (!UnannType()) return rejectInner();
//        if (!VariableDeclaratorId()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  FormalParameter_1 = VariableModifier* UnannType Annotation*
//    //    ELLIPSIS VariableDeclaratorId !COMMA
//    //-------------------------------------------------------------------
//    private boolean FormalParameter_1()
//    {
//        begin("");
//        while (VariableModifier());
//        if (!UnannType()) return rejectInner();
//        while (Annotation());
//        if (!ELLIPSIS()) return rejectInner();
//        if (!VariableDeclaratorId()) return rejectInner();
//        if (!FormalParameter_2()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  FormalParameter_2 = !COMMA
//    //-------------------------------------------------------------------
//    private boolean FormalParameter_2()
//    {
//        begin("","not COMMA");
//        if (COMMA()) return rejectPred();
//        return acceptPred();
//    }
//
//    //=====================================================================
//    //  VariableModifier = Annotation / FINAL ;
//    //=====================================================================
//    private boolean VariableModifier()
//    {
//        begin("VariableModifier");
//        if (Annotation()) return accept();
//        if (FINAL()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ReceiverParameter = VariableModifier* UnannType (Identifier DOT)?
//    //    THIS ;
//    //=====================================================================
//    private boolean ReceiverParameter()
//    {
//        begin("ReceiverParameter");
//        while (VariableModifier());
//        if (!UnannType()) return reject();
//        ReceiverParameter_0();
//        if (!THIS()) return reject();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ReceiverParameter_0 = Identifier DOT
//    //-------------------------------------------------------------------
//    private boolean ReceiverParameter_0()
//    {
//        begin("");
//        if (!Identifier()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Result = UnannType / VOID ;
//    //=====================================================================
//    private boolean Result()
//    {
//        begin("Result");
//        if (UnannType()) return accept();
//        if (VOID()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  MethodModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
//    //    ABSTRACT / STATIC / FINAL / SYNCHRONIZED / NATIVE / STRICTFP ;
//    //=====================================================================
//    private boolean MethodModifier()
//    {
//        begin("MethodModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (PROTECTED()) return accept();
//        if (PRIVATE()) return accept();
//        if (ABSTRACT()) return accept();
//        if (STATIC()) return accept();
//        if (FINAL()) return accept();
//        if (SYNCHRONIZED()) return accept();
//        if (NATIVE()) return accept();
//        if (STRICTFP()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  Throws = THROWS ExceptionTypeList ;
//    //=====================================================================
//    private boolean Throws()
//    {
//        begin("Throws");
//        if (!THROWS()) return reject();
//        if (!ExceptionTypeList()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ExceptionTypeList = ExceptionType (COMMA ExceptionType)* ;
//    //=====================================================================
//    private boolean ExceptionTypeList()
//    {
//        begin("ExceptionTypeList");
//        if (!ExceptionType()) return reject();
//        while (ExceptionTypeList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ExceptionTypeList_0 = COMMA ExceptionType
//    //-------------------------------------------------------------------
//    private boolean ExceptionTypeList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!ExceptionType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  ExceptionType = ClassType / TypeVariable ;
//    //=====================================================================
//    private boolean ExceptionType()
//    {
//        begin("ExceptionType");
//        if (ClassType()) return accept();
//        if (TypeVariable()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  MethodBody = Block / SEMI ;
//    //=====================================================================
//    private boolean MethodBody()
//    {
//        begin("MethodBody");
//        if (Block()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  InstanceInitializer = Block ;
//    //=====================================================================
//    private boolean InstanceInitializer()
//    {
//        begin("InstanceInitializer");
//        if (!Block()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  StaticInitializer = STATIC Block ;
//    //=====================================================================
//    private boolean StaticInitializer()
//    {
//        begin("StaticInitializer");
//        if (!STATIC()) return reject();
//        if (!Block()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ConstructorDeclaration = ConstructorModifier* ConstructorDeclarator
//    //    Throws? ConstructorBody ;
//    //=====================================================================
//    private boolean ConstructorDeclaration()
//    {
//        begin("ConstructorDeclaration");
//        while (ConstructorModifier());
//        if (!ConstructorDeclarator()) return reject();
//        Throws();
//        if (!ConstructorBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ConstructorDeclarator = TypeParameters? Identifier LPAR
//    //    FormalParameterList? RPAR ;
//    //=====================================================================
//    private boolean ConstructorDeclarator()
//    {
//        begin("ConstructorDeclarator");
//        TypeParameters();
//        if (!Identifier()) return reject();
//        if (!LPAR()) return reject();
//        FormalParameterList();
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ConstructorModifier = Annotation / PUBLIC / PROTECTED / PRIVATE ;
//    //=====================================================================
//    private boolean ConstructorModifier()
//    {
//        begin("ConstructorModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (PROTECTED()) return accept();
//        if (PRIVATE()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ConstructorBody = LWING ExplicitConstructorInvocation?
//    //    BlockStatements? RWING ;
//    //=====================================================================
//    private boolean ConstructorBody()
//    {
//        begin("ConstructorBody");
//        if (!LWING()) return reject();
//        ExplicitConstructorInvocation();
//        BlockStatements();
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ExplicitConstructorInvocation = TypeArguments? THIS Arguments SEMI
//    //    / TypeArguments? SUPER Arguments SEMI / Primary DOT
//    //    TypeArguments? SUPER Arguments SEMI / QualIdent DOT
//    //    TypeArguments? SUPER Arguments SEMI ;
//    //=====================================================================
//    private boolean ExplicitConstructorInvocation()
//    {
//        begin("ExplicitConstructorInvocation");
//        if (ExplicitConstructorInvocation_0()) return accept();
//        if (ExplicitConstructorInvocation_1()) return accept();
//        if (ExplicitConstructorInvocation_2()) return accept();
//        if (ExplicitConstructorInvocation_3()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  ExplicitConstructorInvocation_0 = TypeArguments? THIS Arguments
//    //    SEMI
//    //-------------------------------------------------------------------
//    private boolean ExplicitConstructorInvocation_0()
//    {
//        begin("");
//        TypeArguments();
//        if (!THIS()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ExplicitConstructorInvocation_1 = TypeArguments? SUPER Arguments
//    //    SEMI
//    //-------------------------------------------------------------------
//    private boolean ExplicitConstructorInvocation_1()
//    {
//        begin("");
//        TypeArguments();
//        if (!SUPER()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ExplicitConstructorInvocation_2 = Primary DOT TypeArguments?
//    //    SUPER Arguments SEMI
//    //-------------------------------------------------------------------
//    private boolean ExplicitConstructorInvocation_2()
//    {
//        begin("");
//        if (!Primary()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        TypeArguments();
//        if (!SUPER()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ExplicitConstructorInvocation_3 = QualIdent DOT TypeArguments?
//    //    SUPER Arguments SEMI
//    //-------------------------------------------------------------------
//    private boolean ExplicitConstructorInvocation_3()
//    {
//        begin("");
//        if (!QualIdent()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        TypeArguments();
//        if (!SUPER()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  EnumDeclaration = ClassModifier* ENUM Identifier Superinterfaces?
//    //    EnumBody ;
//    //=====================================================================
//    private boolean EnumDeclaration()
//    {
//        begin("EnumDeclaration");
//        while (ClassModifier());
//        if (!ENUM()) return reject();
//        if (!Identifier()) return reject();
//        Superinterfaces();
//        if (!EnumBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EnumBody = LWING EnumConstantList? COMMA? EnumBodyDeclarations?
//    //    RWING ;
//    //=====================================================================
//    private boolean EnumBody()
//    {
//        begin("EnumBody");
//        if (!LWING()) return reject();
//        EnumConstantList();
//        COMMA();
//        EnumBodyDeclarations();
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EnumConstantList = EnumConstant (COMMA EnumConstant)* ;
//    //=====================================================================
//    private boolean EnumConstantList()
//    {
//        begin("EnumConstantList");
//        if (!EnumConstant()) return reject();
//        while (EnumConstantList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  EnumConstantList_0 = COMMA EnumConstant
//    //-------------------------------------------------------------------
//    private boolean EnumConstantList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!EnumConstant()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  EnumConstant = EnumConstantModifier* Identifier Arguments?
//    //    ClassBody? ;
//    //=====================================================================
//    private boolean EnumConstant()
//    {
//        begin("EnumConstant");
//        while (EnumConstantModifier());
//        if (!Identifier()) return reject();
//        Arguments();
//        ClassBody();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EnumConstantModifier = Annotation ;
//    //=====================================================================
//    private boolean EnumConstantModifier()
//    {
//        begin("EnumConstantModifier");
//        if (!Annotation()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  EnumBodyDeclarations = SEMI ClassBodyDeclaration* ;
//    //=====================================================================
//    private boolean EnumBodyDeclarations()
//    {
//        begin("EnumBodyDeclarations");
//        if (!SEMI()) return reject();
//        while (ClassBodyDeclaration());
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceDeclaration = NormalInterfaceDeclaration /
//    //    AnnotationTypeDeclaration ;
//    //=====================================================================
//    private boolean InterfaceDeclaration()
//    {
//        begin("InterfaceDeclaration");
//        if (NormalInterfaceDeclaration()) return accept();
//        if (AnnotationTypeDeclaration()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  NormalInterfaceDeclaration = InterfaceModifier* INTERFACE
//    //    Identifier TypeParameters? ExtendsInterfaces? InterfaceBody ;
//    //=====================================================================
//    private boolean NormalInterfaceDeclaration()
//    {
//        begin("NormalInterfaceDeclaration");
//        while (InterfaceModifier());
//        if (!INTERFACE()) return reject();
//        if (!Identifier()) return reject();
//        TypeParameters();
//        ExtendsInterfaces();
//        if (!InterfaceBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceModifier = Annotation / PUBLIC / PROTECTED / PRIVATE /
//    //    ABSTRACT / STATIC / STRICTFP ;
//    //=====================================================================
//    private boolean InterfaceModifier()
//    {
//        begin("InterfaceModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (PROTECTED()) return accept();
//        if (PRIVATE()) return accept();
//        if (ABSTRACT()) return accept();
//        if (STATIC()) return accept();
//        if (STRICTFP()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ExtendsInterfaces = EXTENDS InterfaceTypeList ;
//    //=====================================================================
//    private boolean ExtendsInterfaces()
//    {
//        begin("ExtendsInterfaces");
//        if (!EXTENDS()) return reject();
//        if (!InterfaceTypeList()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceBody = LWING InterfaceMemberDeclaration* RWING ;
//    //=====================================================================
//    private boolean InterfaceBody()
//    {
//        begin("InterfaceBody");
//        if (!LWING()) return reject();
//        while (InterfaceMemberDeclaration());
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceMemberDeclaration = ConstantDeclaration /
//    //    InterfaceMethodDeclaration / ClassDeclaration /
//    //    InterfaceDeclaration / SEMI ;
//    //=====================================================================
//    private boolean InterfaceMemberDeclaration()
//    {
//        begin("InterfaceMemberDeclaration");
//        if (ConstantDeclaration()) return accept();
//        if (InterfaceMethodDeclaration()) return accept();
//        if (ClassDeclaration()) return accept();
//        if (InterfaceDeclaration()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ConstantDeclaration = ConstantModifier* UnannType
//    //    VariableDeclaratorList SEMI ;
//    //=====================================================================
//    private boolean ConstantDeclaration()
//    {
//        begin("ConstantDeclaration");
//        while (ConstantModifier());
//        if (!UnannType()) return reject();
//        if (!VariableDeclaratorList()) return reject();
//        if (!SEMI()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ConstantModifier = Annotation / PUBLIC / STATIC / FINAL ;
//    //=====================================================================
//    private boolean ConstantModifier()
//    {
//        begin("ConstantModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (STATIC()) return accept();
//        if (FINAL()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  InterfaceMethodDeclaration = InterfaceMethodModifier* MethodHeader
//    //    MethodBody ;
//    //=====================================================================
//    private boolean InterfaceMethodDeclaration()
//    {
//        begin("InterfaceMethodDeclaration");
//        while (InterfaceMethodModifier());
//        if (!MethodHeader()) return reject();
//        if (!MethodBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  InterfaceMethodModifier = Annotation / PUBLIC / ABSTRACT / DEFAULT
//    //    / STATIC / STRICTFP ;
//    //=====================================================================
//    private boolean InterfaceMethodModifier()
//    {
//        begin("InterfaceMethodModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (ABSTRACT()) return accept();
//        if (DEFAULT()) return accept();
//        if (STATIC()) return accept();
//        if (STRICTFP()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  AnnotationTypeDeclaration = InterfaceModifier* AT INTERFACE
//    //    Identifier AnnotationTypeBody ;
//    //=====================================================================
//    private boolean AnnotationTypeDeclaration()
//    {
//        begin("AnnotationTypeDeclaration");
//        while (InterfaceModifier());
//        if (!AT()) return reject();
//        if (!INTERFACE()) return reject();
//        if (!Identifier()) return reject();
//        if (!AnnotationTypeBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  AnnotationTypeBody = LWING AnnotationTypeMemberDeclaration* RWING
//    //    ;
//    //=====================================================================
//    private boolean AnnotationTypeBody()
//    {
//        begin("AnnotationTypeBody");
//        if (!LWING()) return reject();
//        while (AnnotationTypeMemberDeclaration());
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  AnnotationTypeMemberDeclaration = AnnotationTypeElementDeclaration
//    //    / ConstantDeclaration / ClassDeclaration / InterfaceDeclaration /
//    //    SEMI ;
//    //=====================================================================
//    private boolean AnnotationTypeMemberDeclaration()
//    {
//        begin("AnnotationTypeMemberDeclaration");
//        if (AnnotationTypeElementDeclaration()) return accept();
//        if (ConstantDeclaration()) return accept();
//        if (ClassDeclaration()) return accept();
//        if (InterfaceDeclaration()) return accept();
//        if (SEMI()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  AnnotationTypeElementDeclaration = AnnotationTypeElementModifier*
//    //    UnannType Identifier LPAR RPAR Dim* DefaultValue? SEMI ;
//    //=====================================================================
//    private boolean AnnotationTypeElementDeclaration()
//    {
//        begin("AnnotationTypeElementDeclaration");
//        while (AnnotationTypeElementModifier());
//        if (!UnannType()) return reject();
//        if (!Identifier()) return reject();
//        if (!LPAR()) return reject();
//        if (!RPAR()) return reject();
//        while (Dim());
//        DefaultValue();
//        if (!SEMI()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  AnnotationTypeElementModifier = Annotation / PUBLIC / ABSTRACT ;
//    //=====================================================================
//    private boolean AnnotationTypeElementModifier()
//    {
//        begin("AnnotationTypeElementModifier");
//        if (Annotation()) return accept();
//        if (PUBLIC()) return accept();
//        if (ABSTRACT()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  DefaultValue = DEFAULT ElementValue ;
//    //=====================================================================
//    private boolean DefaultValue()
//    {
//        begin("DefaultValue");
//        if (!DEFAULT()) return reject();
//        if (!ElementValue()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Annotation = AT (NormalAnnotation / SingleElementAnnotation /
//    //    MarkerAnnotation) ;
//    //=====================================================================
//    private boolean Annotation()
//    {
//        begin("Annotation");
//        if (!AT()) return reject();
//        if (!NormalAnnotation()
//            && !SingleElementAnnotation()
//            && !MarkerAnnotation()
//            ) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  NormalAnnotation = QualIdent LPAR ElementValuePairList* RPAR ;
//    //=====================================================================
//    private boolean NormalAnnotation()
//    {
//        begin("NormalAnnotation");
//        if (!QualIdent()) return reject();
//        if (!LPAR()) return reject();
//        while (ElementValuePairList());
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ElementValuePairList = ElementValuePair (COMMA ElementValuePair)*
//    //    ;
//    //=====================================================================
//    private boolean ElementValuePairList()
//    {
//        begin("ElementValuePairList");
//        if (!ElementValuePair()) return reject();
//        while (ElementValuePairList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ElementValuePairList_0 = COMMA ElementValuePair
//    //-------------------------------------------------------------------
//    private boolean ElementValuePairList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!ElementValuePair()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  ElementValuePair = Identifier EQU ElementValue ;
//    //=====================================================================
//    private boolean ElementValuePair()
//    {
//        begin("ElementValuePair");
//        if (!Identifier()) return reject();
//        if (!EQU()) return reject();
//        if (!ElementValue()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ElementValue = ConditionalExpression / ElementValueArrayInitializer
//    //    / Annotation ;
//    //=====================================================================
//    private boolean ElementValue()
//    {
//        begin("ElementValue");
//        if (ConditionalExpression()) return accept();
//        if (ElementValueArrayInitializer()) return accept();
//        if (Annotation()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ElementValueArrayInitializer = LWING ElementValueList? COMMA? RWING
//    //    ;
//    //=====================================================================
//    private boolean ElementValueArrayInitializer()
//    {
//        begin("ElementValueArrayInitializer");
//        if (!LWING()) return reject();
//        ElementValueList();
//        COMMA();
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ElementValueList = ElementValue (COMMA ElementValue)* ;
//    //=====================================================================
//    private boolean ElementValueList()
//    {
//        begin("ElementValueList");
//        if (!ElementValue()) return reject();
//        while (ElementValueList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ElementValueList_0 = COMMA ElementValue
//    //-------------------------------------------------------------------
//    private boolean ElementValueList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!ElementValue()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  MarkerAnnotation = QualIdent ;
//    //=====================================================================
//    private boolean MarkerAnnotation()
//    {
//        begin("MarkerAnnotation");
//        if (!QualIdent()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SingleElementAnnotation = QualIdent LPAR ElementValue RPAR ;
//    //=====================================================================
//    private boolean SingleElementAnnotation()
//    {
//        begin("SingleElementAnnotation");
//        if (!QualIdent()) return reject();
//        if (!LPAR()) return reject();
//        if (!ElementValue()) return reject();
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ArrayInitializer = LWING VariableInitializerList? COMMA? RWING ;
//    //=====================================================================
//    private boolean ArrayInitializer()
//    {
//        begin("ArrayInitializer");
//        if (!LWING()) return reject();
//        VariableInitializerList();
//        COMMA();
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  VariableInitializerList = VariableInitializer (COMMA
//    //    VariableInitializer)* ;
//    //=====================================================================
//    private boolean VariableInitializerList()
//    {
//        begin("VariableInitializerList");
//        if (!VariableInitializer()) return reject();
//        while (VariableInitializerList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  VariableInitializerList_0 = COMMA VariableInitializer
//    //-------------------------------------------------------------------
//    private boolean VariableInitializerList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!VariableInitializer()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Block = LWING BlockStatements? RWING ;
//    //=====================================================================
//    private boolean Block()
//    {
//        begin("Block");
//        if (!LWING()) return reject();
//        BlockStatements();
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BlockStatements = BlockStatement BlockStatement* ;
//    //=====================================================================
//    private boolean BlockStatements()
//    {
//        begin("BlockStatements");
//        if (!BlockStatement()) return reject();
//        while (BlockStatement());
//        return accept();
//    }
//
//    //=====================================================================
//    //  BlockStatement = LocalVariableDeclarationStatement /
//    //    ClassDeclaration / Statement ;
//    //=====================================================================
//    private boolean BlockStatement()
//    {
//        begin("BlockStatement");
//        if (LocalVariableDeclarationStatement()) return accept();
//        if (ClassDeclaration()) return accept();
//        if (Statement()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  LocalVariableDeclarationStatement = LocalVariableDeclaration SEMI
//    //    ;
//    //=====================================================================
//    private boolean LocalVariableDeclarationStatement()
//    {
//        begin("LocalVariableDeclarationStatement");
//        if (!LocalVariableDeclaration()) return reject();
//        if (!SEMI()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LocalVariableDeclaration = VariableModifier* UnannType
//    //    VariableDeclaratorList ;
//    //=====================================================================
//    private boolean LocalVariableDeclaration()
//    {
//        begin("LocalVariableDeclaration");
//        while (VariableModifier());
//        if (!UnannType()) return reject();
//        if (!VariableDeclaratorList()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Statement = Block / IF ParExpression Statement (ELSE Statement)? /
//    //    BasicForStatement / EnhancedForStatement / WHILE ParExpression
//    //    Statement / DO Statement WHILE ParExpression SEMI / TryStatement
//    //    / SWITCH ParExpression SwitchBlock / SYNCHRONIZED ParExpression
//    //    Block / RETURN Expression? SEMI / THROW Expression SEMI / BREAK
//    //    Identifier? SEMI / CONTINUE Identifier? SEMI / ASSERT Expression
//    //    (COLON Expression)? SEMI / SEMI / StatementExpression SEMI /
//    //    Identifier COLON Statement ;
//    //=====================================================================
//    private boolean Statement()
//    {
//        begin("Statement");
//        if (Block()) return accept();
//        if (Statement_0()) return accept();
//        if (BasicForStatement()) return accept();
//        if (EnhancedForStatement()) return accept();
//        if (Statement_1()) return accept();
//        if (Statement_2()) return accept();
//        if (TryStatement()) return accept();
//        if (Statement_3()) return accept();
//        if (Statement_4()) return accept();
//        if (Statement_5()) return accept();
//        if (Statement_6()) return accept();
//        if (Statement_7()) return accept();
//        if (Statement_8()) return accept();
//        if (Statement_9()) return accept();
//        if (SEMI()) return accept();
//        if (Statement_10()) return accept();
//        if (Statement_11()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_0 = IF ParExpression Statement (ELSE Statement)?
//    //-------------------------------------------------------------------
//    private boolean Statement_0()
//    {
//        begin("");
//        if (!IF()) return rejectInner();
//        if (!ParExpression()) return rejectInner();
//        if (!Statement()) return rejectInner();
//        Statement_12();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_1 = WHILE ParExpression Statement
//    //-------------------------------------------------------------------
//    private boolean Statement_1()
//    {
//        begin("");
//        if (!WHILE()) return rejectInner();
//        if (!ParExpression()) return rejectInner();
//        if (!Statement()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_2 = DO Statement WHILE ParExpression SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_2()
//    {
//        begin("");
//        if (!DO()) return rejectInner();
//        if (!Statement()) return rejectInner();
//        if (!WHILE()) return rejectInner();
//        if (!ParExpression()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_3 = SWITCH ParExpression SwitchBlock
//    //-------------------------------------------------------------------
//    private boolean Statement_3()
//    {
//        begin("");
//        if (!SWITCH()) return rejectInner();
//        if (!ParExpression()) return rejectInner();
//        if (!SwitchBlock()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_4 = SYNCHRONIZED ParExpression Block
//    //-------------------------------------------------------------------
//    private boolean Statement_4()
//    {
//        begin("");
//        if (!SYNCHRONIZED()) return rejectInner();
//        if (!ParExpression()) return rejectInner();
//        if (!Block()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_5 = RETURN Expression? SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_5()
//    {
//        begin("");
//        if (!RETURN()) return rejectInner();
//        Expression();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_6 = THROW Expression SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_6()
//    {
//        begin("");
//        if (!THROW()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_7 = BREAK Identifier? SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_7()
//    {
//        begin("");
//        if (!BREAK()) return rejectInner();
//        Identifier();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_8 = CONTINUE Identifier? SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_8()
//    {
//        begin("");
//        if (!CONTINUE()) return rejectInner();
//        Identifier();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_9 = ASSERT Expression (COLON Expression)? SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_9()
//    {
//        begin("");
//        if (!ASSERT()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        Statement_13();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_10 = StatementExpression SEMI
//    //-------------------------------------------------------------------
//    private boolean Statement_10()
//    {
//        begin("");
//        if (!StatementExpression()) return rejectInner();
//        if (!SEMI()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_11 = Identifier COLON Statement
//    //-------------------------------------------------------------------
//    private boolean Statement_11()
//    {
//        begin("");
//        if (!Identifier()) return rejectInner();
//        if (!COLON()) return rejectInner();
//        if (!Statement()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_12 = ELSE Statement
//    //-------------------------------------------------------------------
//    private boolean Statement_12()
//    {
//        begin("");
//        if (!ELSE()) return rejectInner();
//        if (!Statement()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  Statement_13 = COLON Expression
//    //-------------------------------------------------------------------
//    private boolean Statement_13()
//    {
//        begin("");
//        if (!COLON()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  StatementExpression = Assignment / (INC / DEC) (Primary /
//    //    QualIdent) / (Primary / QualIdent) (INC / DEC) / Primary ;
//    //=====================================================================
//    private boolean StatementExpression()
//    {
//        begin("StatementExpression");
//        if (Assignment()) return accept();
//        if (StatementExpression_0()) return accept();
//        if (StatementExpression_1()) return accept();
//        if (Primary()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  StatementExpression_0 = (INC / DEC) (Primary / QualIdent)
//    //-------------------------------------------------------------------
//    private boolean StatementExpression_0()
//    {
//        begin("");
//        if (!INC()
//            && !DEC()
//            ) return rejectInner();
//        if (!Primary()
//            && !QualIdent()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  StatementExpression_1 = (Primary / QualIdent) (INC / DEC)
//    //-------------------------------------------------------------------
//    private boolean StatementExpression_1()
//    {
//        begin("");
//        if (!Primary()
//            && !QualIdent()
//            ) return rejectInner();
//        if (!INC()
//            && !DEC()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  SwitchBlock = LWING SwitchBlockStatementGroup* SwitchLabel* RWING
//    //    ;
//    //=====================================================================
//    private boolean SwitchBlock()
//    {
//        begin("SwitchBlock");
//        if (!LWING()) return reject();
//        while (SwitchBlockStatementGroup());
//        while (SwitchLabel());
//        if (!RWING()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SwitchBlockStatementGroup = SwitchLabels BlockStatements ;
//    //=====================================================================
//    private boolean SwitchBlockStatementGroup()
//    {
//        begin("SwitchBlockStatementGroup");
//        if (!SwitchLabels()) return reject();
//        if (!BlockStatements()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  SwitchLabels = SwitchLabel SwitchLabel* ;
//    //=====================================================================
//    private boolean SwitchLabels()
//    {
//        begin("SwitchLabels");
//        if (!SwitchLabel()) return reject();
//        while (SwitchLabel());
//        return accept();
//    }
//
//    //=====================================================================
//    //  SwitchLabel = CASE (ConstantExpression / EnumConstantName) COLON /
//    //    DEFAULT COLON ;
//    //=====================================================================
//    private boolean SwitchLabel()
//    {
//        begin("SwitchLabel");
//        if (SwitchLabel_0()) return accept();
//        if (SwitchLabel_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  SwitchLabel_0 = CASE (ConstantExpression / EnumConstantName)
//    //    COLON
//    //-------------------------------------------------------------------
//    private boolean SwitchLabel_0()
//    {
//        begin("");
//        if (!CASE()) return rejectInner();
//        if (!ConstantExpression()
//            && !EnumConstantName()
//            ) return rejectInner();
//        if (!COLON()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  SwitchLabel_1 = DEFAULT COLON
//    //-------------------------------------------------------------------
//    private boolean SwitchLabel_1()
//    {
//        begin("");
//        if (!DEFAULT()) return rejectInner();
//        if (!COLON()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  EnumConstantName = Identifier ;
//    //=====================================================================
//    private boolean EnumConstantName()
//    {
//        begin("EnumConstantName");
//        if (!Identifier()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  BasicForStatement = FOR LPAR ForInit? SEMI Expression? SEMI
//    //    ForUpdate? RPAR Statement ;
//    //=====================================================================
//    private boolean BasicForStatement()
//    {
//        begin("BasicForStatement");
//        if (!FOR()) return reject();
//        if (!LPAR()) return reject();
//        ForInit();
//        if (!SEMI()) return reject();
//        Expression();
//        if (!SEMI()) return reject();
//        ForUpdate();
//        if (!RPAR()) return reject();
//        if (!Statement()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ForInit = LocalVariableDeclaration / StatementExpressionList ;
//    //=====================================================================
//    private boolean ForInit()
//    {
//        begin("ForInit");
//        if (LocalVariableDeclaration()) return accept();
//        if (StatementExpressionList()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ForUpdate = StatementExpressionList ;
//    //=====================================================================
//    private boolean ForUpdate()
//    {
//        begin("ForUpdate");
//        if (!StatementExpressionList()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  StatementExpressionList = StatementExpression (COMMA
//    //    StatementExpression)* ;
//    //=====================================================================
//    private boolean StatementExpressionList()
//    {
//        begin("StatementExpressionList");
//        if (!StatementExpression()) return reject();
//        while (StatementExpressionList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  StatementExpressionList_0 = COMMA StatementExpression
//    //-------------------------------------------------------------------
//    private boolean StatementExpressionList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!StatementExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  EnhancedForStatement = FOR LPAR VariableModifier* UnannType
//    //    VariableDeclaratorId COLON Expression RPAR Statement ;
//    //=====================================================================
//    private boolean EnhancedForStatement()
//    {
//        begin("EnhancedForStatement");
//        if (!FOR()) return reject();
//        if (!LPAR()) return reject();
//        while (VariableModifier());
//        if (!UnannType()) return reject();
//        if (!VariableDeclaratorId()) return reject();
//        if (!COLON()) return reject();
//        if (!Expression()) return reject();
//        if (!RPAR()) return reject();
//        if (!Statement()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  TryStatement = TRY (Block (CatchClause* Finally / CatchClause+) /
//    //    ResourceSpecification Block CatchClause* Finally?) ;
//    //=====================================================================
//    private boolean TryStatement()
//    {
//        begin("TryStatement");
//        if (!TRY()) return reject();
//        if (!TryStatement_0()
//            && !TryStatement_1()
//            ) return reject();
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  TryStatement_0 = Block (CatchClause* Finally / CatchClause+)
//    //-------------------------------------------------------------------
//    private boolean TryStatement_0()
//    {
//        begin("");
//        if (!Block()) return rejectInner();
//        if (!TryStatement_2()
//            && !TryStatement_3()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  TryStatement_1 = ResourceSpecification Block CatchClause*
//    //    Finally?
//    //-------------------------------------------------------------------
//    private boolean TryStatement_1()
//    {
//        begin("");
//        if (!ResourceSpecification()) return rejectInner();
//        if (!Block()) return rejectInner();
//        while (CatchClause());
//        Finally();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  TryStatement_2 = CatchClause* Finally
//    //-------------------------------------------------------------------
//    private boolean TryStatement_2()
//    {
//        begin("");
//        while (CatchClause());
//        if (!Finally()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  TryStatement_3 = CatchClause+
//    //-------------------------------------------------------------------
//    private boolean TryStatement_3()
//    {
//        begin("");
//        if (!CatchClause()) return rejectInner();
//        while (CatchClause());
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  CatchClause = CATCH LPAR CatchFormalParameter RPAR Block ;
//    //=====================================================================
//    private boolean CatchClause()
//    {
//        begin("CatchClause");
//        if (!CATCH()) return reject();
//        if (!LPAR()) return reject();
//        if (!CatchFormalParameter()) return reject();
//        if (!RPAR()) return reject();
//        if (!Block()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CatchFormalParameter = VariableModifier* CatchType
//    //    VariableDeclaratorId ;
//    //=====================================================================
//    private boolean CatchFormalParameter()
//    {
//        begin("CatchFormalParameter");
//        while (VariableModifier());
//        if (!CatchType()) return reject();
//        if (!VariableDeclaratorId()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  CatchType = UnannClassType (OR ClassType)* ;
//    //=====================================================================
//    private boolean CatchType()
//    {
//        begin("CatchType");
//        if (!UnannClassType()) return reject();
//        while (CatchType_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  CatchType_0 = OR ClassType
//    //-------------------------------------------------------------------
//    private boolean CatchType_0()
//    {
//        begin("");
//        if (!OR()) return rejectInner();
//        if (!ClassType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Finally = FINALLY Block ;
//    //=====================================================================
//    private boolean Finally()
//    {
//        begin("Finally");
//        if (!FINALLY()) return reject();
//        if (!Block()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ResourceSpecification = LPAR ResourceList SEMI? RPAR ;
//    //=====================================================================
//    private boolean ResourceSpecification()
//    {
//        begin("ResourceSpecification");
//        if (!LPAR()) return reject();
//        if (!ResourceList()) return reject();
//        SEMI();
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ResourceList = Resource (SEMI Resource)* ;
//    //=====================================================================
//    private boolean ResourceList()
//    {
//        begin("ResourceList");
//        if (!Resource()) return reject();
//        while (ResourceList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ResourceList_0 = SEMI Resource
//    //-------------------------------------------------------------------
//    private boolean ResourceList_0()
//    {
//        begin("");
//        if (!SEMI()) return rejectInner();
//        if (!Resource()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  Resource = VariableModifier* UnannType VariableDeclaratorId EQU
//    //    Expression ;
//    //=====================================================================
//    private boolean Resource()
//    {
//        begin("Resource");
//        while (VariableModifier());
//        if (!UnannType()) return reject();
//        if (!VariableDeclaratorId()) return reject();
//        if (!EQU()) return reject();
//        if (!Expression()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Expression = LambdaExpression / AssignmentExpression ;
//    //=====================================================================
//    private boolean Expression()
//    {
//        begin("Expression");
//        if (LambdaExpression()) return accept();
//        if (AssignmentExpression()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  Primary = PrimaryBase PrimaryRest* ;
//    //=====================================================================
//    private boolean Primary()
//    {
//        begin("Primary");
//        if (!PrimaryBase()) return reject();
//        while (PrimaryRest());
//        return accept();
//    }
//
//    //=====================================================================
//    //  PrimaryBase = THIS / Literal / ParExpression / SUPER (DOT
//    //    TypeArguments? Identifier Arguments / DOT Identifier / COLONCOLON
//    //    TypeArguments? Identifier) / NEW (ClassCreator / ArrayCreator) /
//    //    QualIdent (LBRK Expression RBRK / Arguments / DOT (THIS / NEW
//    //    ClassCreator / TypeArguments Identifier Arguments / SUPER DOT
//    //    TypeArguments? Identifier Arguments / SUPER DOT Identifier /
//    //    SUPER COLONCOLON TypeArguments? Identifier) / (LBRK RBRK)* DOT
//    //    CLASS / COLONCOLON TypeArguments? Identifier) / VOID DOT CLASS /
//    //    BasicType (LBRK RBRK)* DOT CLASS / ReferenceType COLONCOLON
//    //    TypeArguments? Identifier / ClassType COLONCOLON TypeArguments?
//    //    NEW / ArrayType COLONCOLON NEW ;
//    //=====================================================================
//    private boolean PrimaryBase()
//    {
//        begin("PrimaryBase");
//        if (THIS()) return accept();
//        if (Literal()) return accept();
//        if (ParExpression()) return accept();
//        if (PrimaryBase_0()) return accept();
//        if (PrimaryBase_1()) return accept();
//        if (PrimaryBase_2()) return accept();
//        if (PrimaryBase_3()) return accept();
//        if (PrimaryBase_4()) return accept();
//        if (PrimaryBase_5()) return accept();
//        if (PrimaryBase_6()) return accept();
//        if (PrimaryBase_7()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_0 = SUPER (DOT TypeArguments? Identifier Arguments /
//    //    DOT Identifier / COLONCOLON TypeArguments? Identifier)
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_0()
//    {
//        begin("");
//        if (!SUPER()) return rejectInner();
//        if (!PrimaryBase_8()
//            && !QualIdent_0()
//            && !PrimaryBase_9()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_1 = NEW (ClassCreator / ArrayCreator)
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_1()
//    {
//        begin("");
//        if (!NEW()) return rejectInner();
//        if (!ClassCreator()
//            && !ArrayCreator()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_2 = QualIdent (LBRK Expression RBRK / Arguments / DOT
//    //    (THIS / NEW ClassCreator / TypeArguments Identifier Arguments /
//    //    SUPER DOT TypeArguments? Identifier Arguments / SUPER DOT
//    //    Identifier / SUPER COLONCOLON TypeArguments? Identifier) /
//    //    (LBRK RBRK)* DOT CLASS / COLONCOLON TypeArguments? Identifier)
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_2()
//    {
//        begin("");
//        if (!QualIdent()) return rejectInner();
//        if (!PrimaryBase_10()
//            && !Arguments()
//            && !PrimaryBase_11()
//            && !PrimaryBase_12()
//            && !PrimaryBase_9()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_3 = VOID DOT CLASS
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_3()
//    {
//        begin("");
//        if (!VOID()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        if (!CLASS()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_4 = BasicType (LBRK RBRK)* DOT CLASS
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_4()
//    {
//        begin("");
//        if (!BasicType()) return rejectInner();
//        while (PrimaryBase_13());
//        if (!DOT()) return rejectInner();
//        if (!CLASS()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_5 = ReferenceType COLONCOLON TypeArguments?
//    //    Identifier
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_5()
//    {
//        begin("");
//        if (!ReferenceType()) return rejectInner();
//        if (!COLONCOLON()) return rejectInner();
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_6 = ClassType COLONCOLON TypeArguments? NEW
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_6()
//    {
//        begin("");
//        if (!ClassType()) return rejectInner();
//        if (!COLONCOLON()) return rejectInner();
//        TypeArguments();
//        if (!NEW()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_7 = ArrayType COLONCOLON NEW
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_7()
//    {
//        begin("");
//        if (!ArrayType()) return rejectInner();
//        if (!COLONCOLON()) return rejectInner();
//        if (!NEW()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_8 = DOT TypeArguments? Identifier Arguments
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_8()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_9 = COLONCOLON TypeArguments? Identifier
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_9()
//    {
//        begin("");
//        if (!COLONCOLON()) return rejectInner();
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_10 = LBRK Expression RBRK
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_10()
//    {
//        begin("");
//        if (!LBRK()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        if (!RBRK()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_11 = DOT (THIS / NEW ClassCreator / TypeArguments
//    //    Identifier Arguments / SUPER DOT TypeArguments? Identifier
//    //    Arguments / SUPER DOT Identifier / SUPER COLONCOLON
//    //    TypeArguments? Identifier)
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_11()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        if (!THIS()
//            && !PrimaryBase_14()
//            && !PrimaryBase_15()
//            && !PrimaryBase_16()
//            && !PrimaryBase_17()
//            && !PrimaryBase_18()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_12 = (LBRK RBRK)* DOT CLASS
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_12()
//    {
//        begin("");
//        while (PrimaryBase_13());
//        if (!DOT()) return rejectInner();
//        if (!CLASS()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_13 = LBRK RBRK
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_13()
//    {
//        begin("");
//        if (!LBRK()) return rejectInner();
//        if (!RBRK()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_14 = NEW ClassCreator
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_14()
//    {
//        begin("");
//        if (!NEW()) return rejectInner();
//        if (!ClassCreator()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_15 = TypeArguments Identifier Arguments
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_15()
//    {
//        begin("");
//        if (!TypeArguments()) return rejectInner();
//        if (!Identifier()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_16 = SUPER DOT TypeArguments? Identifier Arguments
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_16()
//    {
//        begin("");
//        if (!SUPER()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_17 = SUPER DOT Identifier
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_17()
//    {
//        begin("");
//        if (!SUPER()) return rejectInner();
//        if (!DOT()) return rejectInner();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryBase_18 = SUPER COLONCOLON TypeArguments? Identifier
//    //-------------------------------------------------------------------
//    private boolean PrimaryBase_18()
//    {
//        begin("");
//        if (!SUPER()) return rejectInner();
//        if (!COLONCOLON()) return rejectInner();
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  PrimaryRest = DOT (TypeArguments? Identifier Arguments / Identifier
//    //    / NEW ClassCreator) / LBRK Expression RBRK / COLONCOLON
//    //    TypeArguments? Identifier ;
//    //=====================================================================
//    private boolean PrimaryRest()
//    {
//        begin("PrimaryRest");
//        if (PrimaryRest_0()) return accept();
//        if (PrimaryBase_10()) return accept();
//        if (PrimaryBase_9()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryRest_0 = DOT (TypeArguments? Identifier Arguments /
//    //    Identifier / NEW ClassCreator)
//    //-------------------------------------------------------------------
//    private boolean PrimaryRest_0()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        if (!PrimaryRest_1()
//            && !Identifier()
//            && !PrimaryBase_14()
//            ) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  PrimaryRest_1 = TypeArguments? Identifier Arguments
//    //-------------------------------------------------------------------
//    private boolean PrimaryRest_1()
//    {
//        begin("");
//        TypeArguments();
//        if (!Identifier()) return rejectInner();
//        if (!Arguments()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  ParExpression = LPAR Expression RPAR ;
//    //=====================================================================
//    private boolean ParExpression()
//    {
//        begin("ParExpression");
//        if (!LPAR()) return reject();
//        if (!Expression()) return reject();
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ClassCreator = TypeArguments? Annotation* ClassTypeWithDiamond
//    //    Arguments ClassBody? ;
//    //=====================================================================
//    private boolean ClassCreator()
//    {
//        begin("ClassCreator");
//        TypeArguments();
//        while (Annotation());
//        if (!ClassTypeWithDiamond()) return reject();
//        if (!Arguments()) return reject();
//        ClassBody();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ClassTypeWithDiamond = Annotation* Identifier
//    //    TypeArgumentsOrDiamond? (DOT Annotation* Identifier
//    //    TypeArgumentsOrDiamond?)* ;
//    //=====================================================================
//    private boolean ClassTypeWithDiamond()
//    {
//        begin("ClassTypeWithDiamond");
//        while (Annotation());
//        if (!Identifier()) return reject();
//        TypeArgumentsOrDiamond();
//        while (ClassTypeWithDiamond_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ClassTypeWithDiamond_0 = DOT Annotation* Identifier
//    //    TypeArgumentsOrDiamond?
//    //-------------------------------------------------------------------
//    private boolean ClassTypeWithDiamond_0()
//    {
//        begin("");
//        if (!DOT()) return rejectInner();
//        while (Annotation());
//        if (!Identifier()) return rejectInner();
//        TypeArgumentsOrDiamond();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  TypeArgumentsOrDiamond = TypeArguments / LPOINT RPOINT !DOT ;
//    //=====================================================================
//    private boolean TypeArgumentsOrDiamond()
//    {
//        begin("TypeArgumentsOrDiamond");
//        if (TypeArguments()) return accept();
//        if (TypeArgumentsOrDiamond_0()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  TypeArgumentsOrDiamond_0 = LPOINT RPOINT !DOT
//    //-------------------------------------------------------------------
//    private boolean TypeArgumentsOrDiamond_0()
//    {
//        begin("");
//        if (!LPOINT()) return rejectInner();
//        if (!RPOINT()) return rejectInner();
//        if (!TypeArgumentsOrDiamond_1()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  TypeArgumentsOrDiamond_1 = !DOT
//    //-------------------------------------------------------------------
//    private boolean TypeArgumentsOrDiamond_1()
//    {
//        begin("","not DOT");
//        if (DOT()) return rejectPred();
//        return acceptPred();
//    }
//
//    //=====================================================================
//    //  ArrayCreator = Type DimExpr+ Dim* / Type Dim+ ArrayInitializer ;
//    //=====================================================================
//    private boolean ArrayCreator()
//    {
//        begin("ArrayCreator");
//        if (ArrayCreator_0()) return accept();
//        if (ArrayCreator_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  ArrayCreator_0 = Type DimExpr+ Dim*
//    //-------------------------------------------------------------------
//    private boolean ArrayCreator_0()
//    {
//        begin("");
//        if (!Type()) return rejectInner();
//        if (!DimExpr()) return rejectInner();
//        while (DimExpr());
//        while (Dim());
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  ArrayCreator_1 = Type Dim+ ArrayInitializer
//    //-------------------------------------------------------------------
//    private boolean ArrayCreator_1()
//    {
//        begin("");
//        if (!Type()) return rejectInner();
//        if (!Dim()) return rejectInner();
//        while (Dim());
//        if (!ArrayInitializer()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  DimExpr = Annotation* LBRK Expression RBRK ;
//    //=====================================================================
//    private boolean DimExpr()
//    {
//        begin("DimExpr");
//        while (Annotation());
//        if (!LBRK()) return reject();
//        if (!Expression()) return reject();
//        if (!RBRK()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  Arguments = LPAR ArgumentList? RPAR ;
//    //=====================================================================
//    private boolean Arguments()
//    {
//        begin("Arguments");
//        if (!LPAR()) return reject();
//        ArgumentList();
//        if (!RPAR()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  ArgumentList = Expression (COMMA Expression)* ;
//    //=====================================================================
//    private boolean ArgumentList()
//    {
//        begin("ArgumentList");
//        if (!Expression()) return reject();
//        while (ArgumentList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ArgumentList_0 = COMMA Expression
//    //-------------------------------------------------------------------
//    private boolean ArgumentList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  UnaryExpression = (INC / DEC) (Primary / QualIdent) / PLUS
//    //    UnaryExpression / MINUS UnaryExpression /
//    //    UnaryExpressionNotPlusMinus ;
//    //=====================================================================
//    private boolean UnaryExpression()
//    {
//        begin("UnaryExpression");
//        if (StatementExpression_0()) return accept();
//        if (UnaryExpression_0()) return accept();
//        if (UnaryExpression_1()) return accept();
//        if (UnaryExpressionNotPlusMinus()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpression_0 = PLUS UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean UnaryExpression_0()
//    {
//        begin("");
//        if (!PLUS()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpression_1 = MINUS UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean UnaryExpression_1()
//    {
//        begin("");
//        if (!MINUS()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  UnaryExpressionNotPlusMinus = TILDE UnaryExpression / BANG
//    //    UnaryExpression / CastExpression / (Primary / QualIdent) (INC /
//    //    DEC)? ;
//    //=====================================================================
//    private boolean UnaryExpressionNotPlusMinus()
//    {
//        begin("UnaryExpressionNotPlusMinus");
//        if (UnaryExpressionNotPlusMinus_0()) return accept();
//        if (UnaryExpressionNotPlusMinus_1()) return accept();
//        if (CastExpression()) return accept();
//        if (UnaryExpressionNotPlusMinus_2()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpressionNotPlusMinus_0 = TILDE UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean UnaryExpressionNotPlusMinus_0()
//    {
//        begin("");
//        if (!TILDE()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpressionNotPlusMinus_1 = BANG UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean UnaryExpressionNotPlusMinus_1()
//    {
//        begin("");
//        if (!BANG()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpressionNotPlusMinus_2 = (Primary / QualIdent) (INC /
//    //    DEC)?
//    //-------------------------------------------------------------------
//    private boolean UnaryExpressionNotPlusMinus_2()
//    {
//        begin("");
//        if (!Primary()
//            && !QualIdent()
//            ) return rejectInner();
//        UnaryExpressionNotPlusMinus_3();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  UnaryExpressionNotPlusMinus_3 = INC / DEC
//    //-------------------------------------------------------------------
//    private boolean UnaryExpressionNotPlusMinus_3()
//    {
//        begin("");
//        if (INC()) return acceptInner();
//        if (DEC()) return acceptInner();
//        return rejectInner();
//    }
//
//    //=====================================================================
//    //  CastExpression = LPAR PrimitiveType RPAR UnaryExpression / LPAR
//    //    ReferenceType AdditionalBound* RPAR LambdaExpression / LPAR
//    //    ReferenceType AdditionalBound* RPAR UnaryExpressionNotPlusMinus
//    //    ;
//    //=====================================================================
//    private boolean CastExpression()
//    {
//        begin("CastExpression");
//        if (CastExpression_0()) return accept();
//        if (CastExpression_1()) return accept();
//        if (CastExpression_2()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  CastExpression_0 = LPAR PrimitiveType RPAR UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean CastExpression_0()
//    {
//        begin("");
//        if (!LPAR()) return rejectInner();
//        if (!PrimitiveType()) return rejectInner();
//        if (!RPAR()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  CastExpression_1 = LPAR ReferenceType AdditionalBound* RPAR
//    //    LambdaExpression
//    //-------------------------------------------------------------------
//    private boolean CastExpression_1()
//    {
//        begin("");
//        if (!LPAR()) return rejectInner();
//        if (!ReferenceType()) return rejectInner();
//        while (AdditionalBound());
//        if (!RPAR()) return rejectInner();
//        if (!LambdaExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  CastExpression_2 = LPAR ReferenceType AdditionalBound* RPAR
//    //    UnaryExpressionNotPlusMinus
//    //-------------------------------------------------------------------
//    private boolean CastExpression_2()
//    {
//        begin("");
//        if (!LPAR()) return rejectInner();
//        if (!ReferenceType()) return rejectInner();
//        while (AdditionalBound());
//        if (!RPAR()) return rejectInner();
//        if (!UnaryExpressionNotPlusMinus()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  InfixExpression = UnaryExpression (InfixOperator UnaryExpression /
//    //    INSTANCEOF ReferenceType)* ;
//    //=====================================================================
//    private boolean InfixExpression()
//    {
//        begin("InfixExpression");
//        if (!UnaryExpression()) return reject();
//        while (InfixExpression_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  InfixExpression_0 = InfixOperator UnaryExpression / INSTANCEOF
//    //    ReferenceType
//    //-------------------------------------------------------------------
//    private boolean InfixExpression_0()
//    {
//        begin("");
//        if (InfixExpression_1()) return acceptInner();
//        if (InfixExpression_2()) return acceptInner();
//        return rejectInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  InfixExpression_1 = InfixOperator UnaryExpression
//    //-------------------------------------------------------------------
//    private boolean InfixExpression_1()
//    {
//        begin("");
//        if (!InfixOperator()) return rejectInner();
//        if (!UnaryExpression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  InfixExpression_2 = INSTANCEOF ReferenceType
//    //-------------------------------------------------------------------
//    private boolean InfixExpression_2()
//    {
//        begin("");
//        if (!INSTANCEOF()) return rejectInner();
//        if (!ReferenceType()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  InfixOperator = OROR / ANDAND / OR / HAT / AND / EQUAL / NOTEQUAL /
//    //    LT / GT / LE / GE / SL / SR / BSR / PLUS / MINUS / STAR / DIV /
//    //    MOD ;
//    //=====================================================================
//    private boolean InfixOperator()
//    {
//        begin("InfixOperator");
//        if (OROR()) return accept();
//        if (ANDAND()) return accept();
//        if (OR()) return accept();
//        if (HAT()) return accept();
//        if (AND()) return accept();
//        if (EQUAL()) return accept();
//        if (NOTEQUAL()) return accept();
//        if (LT()) return accept();
//        if (GT()) return accept();
//        if (LE()) return accept();
//        if (GE()) return accept();
//        if (SL()) return accept();
//        if (SR()) return accept();
//        if (BSR()) return accept();
//        if (PLUS()) return accept();
//        if (MINUS()) return accept();
//        if (STAR()) return accept();
//        if (DIV()) return accept();
//        if (MOD()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ConditionalExpression = InfixExpression (QUERY Expression COLON
//    //    Expression)* ;
//    //=====================================================================
//    private boolean ConditionalExpression()
//    {
//        begin("ConditionalExpression");
//        if (!InfixExpression()) return reject();
//        while (ConditionalExpression_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  ConditionalExpression_0 = QUERY Expression COLON Expression
//    //-------------------------------------------------------------------
//    private boolean ConditionalExpression_0()
//    {
//        begin("");
//        if (!QUERY()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        if (!COLON()) return rejectInner();
//        if (!Expression()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  AssignmentExpression = Assignment / ConditionalExpression ;
//    //=====================================================================
//    private boolean AssignmentExpression()
//    {
//        begin("AssignmentExpression");
//        if (Assignment()) return accept();
//        if (ConditionalExpression()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  Assignment = LeftHandSide AssignmentOperator Expression ;
//    //=====================================================================
//    private boolean Assignment()
//    {
//        begin("Assignment");
//        if (!LeftHandSide()) return reject();
//        if (!AssignmentOperator()) return reject();
//        if (!Expression()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LeftHandSide = Primary / QualIdent ;
//    //=====================================================================
//    private boolean LeftHandSide()
//    {
//        begin("LeftHandSide");
//        if (Primary()) return accept();
//        if (QualIdent()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  AssignmentOperator = EQU / STAREQU / DIVEQU / MODEQU / PLUSEQU /
//    //    MINUSEQU / SLEQU / SREQU / BSREQU / ANDEQU / HATEQU / OREQU ;
//    //=====================================================================
//    private boolean AssignmentOperator()
//    {
//        begin("AssignmentOperator");
//        if (EQU()) return accept();
//        if (STAREQU()) return accept();
//        if (DIVEQU()) return accept();
//        if (MODEQU()) return accept();
//        if (PLUSEQU()) return accept();
//        if (MINUSEQU()) return accept();
//        if (SLEQU()) return accept();
//        if (SREQU()) return accept();
//        if (BSREQU()) return accept();
//        if (ANDEQU()) return accept();
//        if (HATEQU()) return accept();
//        if (OREQU()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  LambdaExpression = LambdaParameters ARROW LambdaBody ;
//    //=====================================================================
//    private boolean LambdaExpression()
//    {
//        begin("LambdaExpression");
//        if (!LambdaParameters()) return reject();
//        if (!ARROW()) return reject();
//        if (!LambdaBody()) return reject();
//        return accept();
//    }
//
//    //=====================================================================
//    //  LambdaParameters = Identifier / LPAR FormalParameterList? RPAR /
//    //    LPAR InferredFormalParameterList RPAR ;
//    //=====================================================================
//    private boolean LambdaParameters()
//    {
//        begin("LambdaParameters");
//        if (Identifier()) return accept();
//        if (LambdaParameters_0()) return accept();
//        if (LambdaParameters_1()) return accept();
//        return reject();
//    }
//
//    //-------------------------------------------------------------------
//    //  LambdaParameters_0 = LPAR FormalParameterList? RPAR
//    //-------------------------------------------------------------------
//    private boolean LambdaParameters_0()
//    {
//        begin("");
//        if (!LPAR()) return rejectInner();
//        FormalParameterList();
//        if (!RPAR()) return rejectInner();
//        return acceptInner();
//    }
//
//    //-------------------------------------------------------------------
//    //  LambdaParameters_1 = LPAR InferredFormalParameterList RPAR
//    //-------------------------------------------------------------------
//    private boolean LambdaParameters_1()
//    {
//        begin("");
//        if (!LPAR()) return rejectInner();
//        if (!InferredFormalParameterList()) return rejectInner();
//        if (!RPAR()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  InferredFormalParameterList = Identifier (COMMA Identifier)* ;
//    //=====================================================================
//    private boolean InferredFormalParameterList()
//    {
//        begin("InferredFormalParameterList");
//        if (!Identifier()) return reject();
//        while (InferredFormalParameterList_0());
//        return accept();
//    }
//
//    //-------------------------------------------------------------------
//    //  InferredFormalParameterList_0 = COMMA Identifier
//    //-------------------------------------------------------------------
//    private boolean InferredFormalParameterList_0()
//    {
//        begin("");
//        if (!COMMA()) return rejectInner();
//        if (!Identifier()) return rejectInner();
//        return acceptInner();
//    }
//
//    //=====================================================================
//    //  LambdaBody = Expression / Block ;
//    //=====================================================================
//    private boolean LambdaBody()
//    {
//        begin("LambdaBody");
//        if (Expression()) return accept();
//        if (Block()) return accept();
//        return reject();
//    }
//
//    //=====================================================================
//    //  ConstantExpression = Expression ;
//    //=====================================================================
//    private boolean ConstantExpression()
//    {
//        begin("ConstantExpression");
//        if (!Expression()) return reject();
//        return accept();
//    }
//
//}