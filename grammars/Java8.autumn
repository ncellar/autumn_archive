// Originally from the Mouse parser

//=========================================================================
//  Root
//=========================================================================

Root = CompilationUnit "\u001a"? !_;
// the escape is "Ctrl + Z" (JLS 3.5)

//=========================================================================
//  Lexical Structure (JLS 3)
//=========================================================================
//  The Unicode escapes in Java source are converted
//  to Java characters by a preprocessor prior to parsing.
//  This is not emulated here; the Unicode escapes are only allowed
//  in string and character literals. They are treated as error in other
//  structures (except comments). The warning in JLS 3.10.5 against using
//  Unicode escapes for line terminators and quotes in string and character
//  literals does not apply here.
//-------------------------------------------------------------------------

WhiteSpace
    = [ \t\r\n\f]+ ;
    
MultiLineComment
    = "/*" _ *+ "*/" ;
    
LineComment
    = "//" _ *+ [\r\n] ;

Spacing
    = (WhiteSpace / MultiLineComment / LineComment)* ;

Letter = [a-z] / [A-Z] / [_$] ;

LetterOrDigit = [a-z] / [A-Z] / [0-9] / [_$] ;

// These are traditional definitions of letters and digits.
// JLS defines letters and digits as Unicode characters recognized
// as such by special Java procedures, which is difficult
// to express in terms of Parsing Expressions.

Keyword
    = ( "abstract"      / "assert"      / "boolean"     / "break"           / "byte"
      / "case"          / "catch"       / "char"        / "class"           / "const"
      / "continue"      / "default"     / "double"      / "do"              / "else"
      / "enum"          / "extends"     / "false"       / "finally"         / "final"
      / "float"         / "for"         / "goto"        / "if"              / "implements"
      / "import"        / "interface"   / "int"         / "instanceof"      / "long"
      / "native"        / "new"         / "null"        / "package"         / "private"
      / "protected"     / "public"      / "return"      / "short"           / "static"
      / "strictfp"      / "super"       / "switch"      / "synchronized"    / "this"
      / "throws"        / "throw"       / "transient"   / "true"            / "try"
      / "void"          / "volatile"    / "while"

      ) !LetterOrDigit ;

Identifier
    ^%= !Keyword Letter LetterOrDigit* ;

QualIdent
    = Identifier ,+ '.';

ABSTRACT     ^%= "abstract"     !LetterOrDigit ;
ASSERT       ^%= "assert"       !LetterOrDigit ;
BOOLEAN      ^%= "boolean"      !LetterOrDigit ;
BREAK        ^%= "break"        !LetterOrDigit ;
BYTE         ^%= "byte"         !LetterOrDigit ;
CASE         ^%= "case"         !LetterOrDigit ;
CATCH        ^%= "catch"        !LetterOrDigit ;
CHAR         ^%= "char"         !LetterOrDigit ;
CLASS        ^%= "class"        !LetterOrDigit ;
CONTINUE     ^%= "continue"     !LetterOrDigit ;
DEFAULT      ^%= "default"      !LetterOrDigit ;
DOUBLE       ^%= "double"       !LetterOrDigit ;
DO           ^%= "do"           !LetterOrDigit ;
ELSE         ^%= "else"         !LetterOrDigit ;
ENUM         ^%= "enum"         !LetterOrDigit ;
EXTENDS      ^%= "extends"      !LetterOrDigit ;
FALSE        ^%= "false"        !LetterOrDigit ;
FINALLY      ^%= "finally"      !LetterOrDigit ;
FINAL        ^%= "final"        !LetterOrDigit ;
FLOAT        ^%= "float"        !LetterOrDigit ;
FOR          ^%= "for"          !LetterOrDigit ;
IF           ^%= "if"           !LetterOrDigit ;
IMPLEMENTS   ^%= "implements"   !LetterOrDigit ;
IMPORT       ^%= "import"       !LetterOrDigit ;
INTERFACE    ^%= "interface"    !LetterOrDigit ;
INT          ^%= "int"          !LetterOrDigit ;
INSTANCEOF   ^%= "instanceof"   !LetterOrDigit ;
LONG         ^%= "long"         !LetterOrDigit ;
NATIVE       ^%= "native"       !LetterOrDigit ;
NEW          ^%= "new"          !LetterOrDigit ;
NULL         ^%= "null"         !LetterOrDigit ;
PACKAGE      ^%= "package"      !LetterOrDigit ;
PRIVATE      ^%= "private"      !LetterOrDigit ;
PROTECTED    ^%= "protected"    !LetterOrDigit ;
PUBLIC       ^%= "public"       !LetterOrDigit ;
RETURN       ^%= "return"       !LetterOrDigit ;
SHORT        ^%= "short"        !LetterOrDigit ;
STATIC       ^%= "static"       !LetterOrDigit ;
STRICTFP     ^%= "strictfp"     !LetterOrDigit ;
SUPER        ^%= "super"        !LetterOrDigit ;
SWITCH       ^%= "switch"       !LetterOrDigit ;
SYNCHRONIZED ^%= "synchronized" !LetterOrDigit ;
THIS         ^%= "this"         !LetterOrDigit ;
THROWS       ^%= "throws"       !LetterOrDigit ;
THROW        ^%= "throw"        !LetterOrDigit ;
TRANSIENT    ^%= "transient"    !LetterOrDigit ;
TRUE         ^%= "true"         !LetterOrDigit ;
TRY          ^%= "try"          !LetterOrDigit ;
VOID         ^%= "void"         !LetterOrDigit ;
VOLATILE     ^%= "volatile"     !LetterOrDigit ;
WHILE        ^%= "while"        !LetterOrDigit ;

//=========================================================================
//  Literals (JLS 3.10)
//=========================================================================

/*

<literal>
    ~literal
        OR
            :+~floatLiteral
            :+~integerLiteral
            :+~booleanLiteral
            :+~charLiteral
            :+~nullLiteral

*/

Literal ~ literal
    = FloatLiteral      :+~floatLiteral
    / IntegerLiteral    :+~integerLiteral // possible_prefix_of(FloatLiteral)
    / BooleanLiteral    :+~booleanLiteral
    / CharLiteral       :+~charLiteral
    / StringLiteral     :+~stringLiteral
    / NullLiteral       :~nullLiteral ;

IntegerLiteral
    ^%= ( HexNumeral
      / BinaryNumeral
      / OctalNumeral   // possible_prefix_of(BinaryNumeral)
      / DecimalNumeral // possible_prefix_of(OctalNumeral)
      ) [lL]? ;

DecimalNumeral
    = "0" / [1-9]([_]*[0-9])* ;

HexNumeral
    = ("0x" / "0X") HexDigits ;

OctalNumeral
    = "0" ([_]*[0-7])+ ;

BinaryNumeral
    = ("0b" / "0B") [01]([_]*[01])* ;

FloatLiteral
    ^%= HexadecimalFloatingPointLiteral
      / DecimalFloatingPointLiteral ; // possible_prefix_of(previous)

DecimalFloatingPointLiteral
    = Digits "." Digits?  Exponent? [fFdD]?
    / "." Digits Exponent? [fFdD]?
    / Digits Exponent [fFdD]?
    / Digits Exponent? [fFdD] ;

Exponent
    = [eE] [+\\-]? Digits ;

HexadecimalFloatingPointLiteral
    = HexSignificand BinaryExponent [fFdD]? ;

HexSignificand
    = ("0x" / "0X") HexDigits? "." HexDigits
    / HexNumeral "."? ; // possible_prefix_of(previous)

HexDigits
    = HexDigit ([_]*HexDigit)* ;

HexDigit
    = [a-f] / [A-F] / [0-9] ;

BinaryExponent
    = [pP] [+\\-]? Digits ;

Digits
    = [0-9]([_]*[0-9])* ;

BooleanLiteral
    = TRUE / FALSE ;

CharLiteral
    ^%= "'" (Escape / !['\\\n\r] _) "'" ;

StringLiteral
    ^%= "\"" (Escape / ![\"\\\n\r] _)* "\"" ;

Escape
    = "\\" ([btnfr\"'\\] / OctalEscape / UnicodeEscape) ;

OctalEscape
    = [0-3][0-7][0-7]
    / [0-7][0-7]
    / [0-7] ;

UnicodeEscape
    = "u"+ HexDigit HexDigit HexDigit HexDigit ;

NullLiteral
    = NULL ;

//-------------------------------------------------------------------------
//  JLS 3.11  Separators
//-------------------------------------------------------------------------

'@'    %=   "@"        ;
'::'   %=   "::"       ;
','    %=   ","        ;
'.'    %=   "."        ;
'...'  %=   "..."      ;
'('    %=   "("        ;
'['    %=   "["        ;
']'    %=   "]"        ;
')'    %=   ")"        ;
'{'    %=   "{"        ;
'}'    %=   "}"        ;
';'    %=   ";"        ;

//-------------------------------------------------------------------------
//  JLS 3.12  Operators
//  The operators < and > is defined uder two names:
//  LT and GT, respectively LPOINT and RPOINT.
//  The last two are used in the type context, to emulate the translation
//  rule given in JLS 3.2.
//-------------------------------------------------------------------------

'++'            %=   "++"        ;
'--'            %=   "--"        ;
'->'            %=   "->"        ;
'!'             %=   "!" ![=]    ;
'~'             %=   "~"         ;
'*'             %=   "*" ![=]    ;
'/'             %=   "/" ![=]    ;
'%'             %=   "%" ![=]    ;
'+'             %=   "+" ![=+]   ;
'-'             %=   "-" ![=\->] ;
'>>'            %=   ">>" ![=>]  ;
'>>>'           %=   ">>>" ![=]  ;
'<<'            %=   "<<" ![=]   ;
'>'             %=   ">" ![=>]   ;
'>='            %=   ">="        ;
'<='            %=   "<="        ;
'<'             %=   "<" ![=<]   ;
'!='            %=   "!="        ;
'=='            %=   "=="        ;
'&'             %=   "&" ![=&]   ;
'^'             %=   "^" ![=]    ;
'|'             %=   "|" ![=|]   ;
'&&'            %=   "&&"        ;
'||'            %=   "||"        ;
'?'             %=   "?"         ;
':'             %=   ":" ![:]    ;
'='             %=   "=" ![=]    ;
'+='            %=   "+="        ;
'-='            %=   "-="        ;
'*='            %=   "*="        ;
'/='            %=   "/="        ;
'%='            %=   "%="        ;
'!='            %=   "!="        ;
'&='            %=   "&="        ;
'|='            %=   "|="        ;
'^='            %=   "^="        ;
'>>='           %=   ">>="       ;
'>>>='          %=   ">>>="      ;
'<<='           %=   "<<="       ;
LPOINT          %=   "<"         ;
RPOINT          %=   ">"         ;

//=========================================================================
//  Types (JLS 4)
//=========================================================================

/*

constraints:
    - type arguments and bounds must be reference types (classes or arrays, not primitive types)

<basicType>
    :+~BasicType

<primitiveType>
    :~PrimitiveType
        <annotations>
        <basicType>

<classType>
    :~ClassType
        :#components
            <annotations>
            :+-id
            <typeArgs>

<type>
    :~Type
        OR
            <primitiveType>
            <classType>
        <dims>

<stemType>
    ~StemType
        OR
            <primitiveType>
            <classType>

<dims>
    :#dims
        <annotations>

<typeParameters>
    :#typeParameters
        <annotations>
        :-+id
        #boundTypes
            <classType>

<typeArgs>
    # typeArgs
        OR
            <wildcard>
            <type>

<wildcard>
    :~ Wildcard
        <annotations>
        OR?
            -extends
                <type>
            -super
                <type>

*/

BasicType :+~$
    = BYTE
    / SHORT
    / INT
    / LONG
    / CHAR
    / FLOAT
    / DOUBLE
    / BOOLEAN ;

PrimitiveType :~$
    = Annotations BasicType ;

ClassType :~$
    = (Annotations Identifier:+-id TypeArguments?) :# components ,+ '.' ;

Type :~$
    = StemType Dims ;

StemType ~$
    = PrimitiveType / ClassType ;

Dim
    = Annotations '[' ']' ;

Dims
    = Dim* :# dims ;

DimsAlo
    = Dim+ :# dims ;

TypeParameters
    = LPOINT TypeParameter :# typeParameters ,+ ',' RPOINT ;

TypeParameter
    = Annotations Identifier:+-id TypeBound? ;

TypeBound
    = EXTENDS ClassType # boundTypes ,+ '&' ;

TypeArguments
    = LPOINT TypeArgument # typeArgs ,+ ',' RPOINT ;

TypeArgument
    = Type / Wildcard ;

Wildcard :~$
    = Annotations '?' WildcardBounds? ;

WildcardBounds
    = EXTENDS Type - extends
    / SUPER Type - super ;

//=========================================================================
//  Compilation Unit (JLS 7.3)
//=========================================================================

/*

<root>
    :- PackageDeclaration
        <annotations>
        :+-id
    :#imports
        ?:-static
        :+-id
        ?:-star
    :#types
        <typeDeclaration>

*/

CompilationUnit
    = (PackageDeclaration :-$)?
      ((ImportDeclaration :# imports) / ';')*
      ((TypeDeclaration :# types) / ';')* ;

PackageDeclaration
    = Annotations PACKAGE QualIdent:+-id ';' ;

ImportDeclaration
    = IMPORT (STATIC :- static)? QualIdent:+-id ('.' '*':-star)? ';' ;

//=========================================================================
//  Type Declarations (JLS 8.1 & 8.9 & 9.6)
//=========================================================================

/*

constraints:
    - interfaces can't be final
    - enums and annotation types can't have superclasses or type parameters
    - only enums can have enum constants
    - interfaces must "extends" other interfaces and cannot use "implements"
    - interfaces cannot have init blocks and constructors
    - in interfaces, method must have no body or be declared default
    - only annotations can have annotation elements declarations
    - (more)

<typeModifiers>
    #modifiers
        OR
            <annotation>
            :~PUBLIC
            :~PROTECTED
            :~PRIVATE
            :~ABSTRACT
            :~STATIC
            :~FINAL
            :~STRICTFP

<typeDeclaration>
    :~TypeDeclaration
        <typeModifiers>
        ?:-annotationDeclaration
        OR
            :-class
            :-enum
            :-interface
        :+-id
        ?<typeParameters>
        ?#extended
            <classType>
        ?#implemented
            <classType>
        ?:#enumConstants
            <annotations>
            :+-id
            ?<arguments>
        <declarations>

<declarations>
    #declarations
        OR
            <fieldDeclaration>
            <methodDeclaration>
            <typeDeclaration>
            <annotationElemDecl>
            ~block
                <statements>
            ~static
                <statements>
            <constructorDeclaration>
            :~semi

*/

TypeModifier
    = Annotation
    / PUBLIC        :~$
    / PROTECTED     :~$
    / PRIVATE       :~$
    / ABSTRACT      :~$
    / STATIC        :~$
    / FINAL         :~$
    / STRICTFP      :~$ ;

TypeDeclaration :~$
    = TypeModifier* # modifiers  (EnumDeclaration / OtherTypeDeclaration) ;

EnumDeclaration
    = ENUM:-enum
      Identifier:+-id
      Extends?
      Implements?
      '{' EnumConstant :# enumConstants , ',' ','? (';' ClassBodyDeclarations)? '}' ;

OtherTypeDeclaration
    = (CLASS:-class / ('@' :- annotationDeclaration)? INTERFACE:-interface)
      Identifier:+-id
      TypeParameters?
      Extends?
      Implements?
      ClassBody ;

Extends # extended
    = EXTENDS ClassType ,+ ',' ;

Implements # implemented
    = IMPLEMENTS ClassType ,+ ',' ;

ClassBody
    = '{' ClassBodyDeclarations '}' ;

ClassBodyDeclarations # declarations
    = ClassBodyDeclaration* ;

ClassBodyDeclaration

    // Members

    = FieldDeclaration
    / MethodDeclaration
    / TypeDeclaration
    / AnnotationTypeElementDeclaration

    // Other Declarations

    / Block ~ block
    / (STATIC Block) ~ static
    / ConstructorDeclaration
    / ';' :~ semi ;

EnumConstant
    = Annotations Identifier:+-id Arguments? ClassBody? ;

//=========================================================================
//  Member Declarations (JLS 8.3 & 8.4 & 8.8)
//=========================================================================

/*

constraints:
    - for annotation elements, only the public and abstract modifiers are valid
    - the type of annotation elements is limited: http://stackoverflow.com/questions/1458535
    - only interface methods can have the default modifier (iif they have a body)
    - a variadic (...) parameter is only allowed as last parameter
    - a receiver (this) parameter is only allowed as first parameter
    - the type of the receiver must be that of the class
    - a constructor can't have a receiver parameter
    - (more)

<fieldDeclaration>
    :~fieldDeclaration
        #FieldModifiers
            OR
                <annotation>
                :~public
                :~protected
                :~private
                :~static
                :~final
                :~transient
                :~volatile
        <type>
        <declarators>

<declarators>
    :#VariableDeclarators
        <declaratorID>
        ?<variableInitializer>

<declaratorID>
    :~declaratorID
        :+-id
        <dims>

<variableInitializer>
    :~variableInitializer
        OR
            <expression>
            <initializerElements>

<initializerElements>
    #initializerElements
        <variableInitalizer>

<methodModifiers>
    #modifiers
        OR
            <annotation>
            :~public
            :~protected
            :~private
            :~abstract
            :~static
            :~final
            :~synchronized
            :~native
            :~strictfp

<methodDeclaration>
    :~methodDeclaration
        <methodModifiers>
        -returnType
            OR
                <type>
                :~void
        :+-id
        <parameters>
        <dims>
        ?<exceptions>
        <statements>

<parameters>
    :#parameters
        <variableModifiers>
        <type>
        ?<annotations>
        ?:-ellipsis
        OR
            <declaratorId>
            :-this

<variableModifiers>
    #modifiers
        OR
            <annotation>
            :~final

<exceptions>
    #exceptions
        <classType>

<constructorDeclaration>
    :~constructorDeclaration
        #modifiers
            OR
                <annotation>
                :~public
                :~protected
                :~private
        ?<typeParameters>
        :+-id
        <parameters>
        ?<exceptions>
        ?:-constrInvoc
            ?-enclosingInstance
                <expression>
            ?<typeArguments>
            OR
                :-this
                :-super
            <arguments>
        <statements>

<annotationElemDecl>
    :~annotationElemDecl
        <methodModifiers>
        <type>
        :+-id
        <dims>
        ?<annotationValue>

*/

/**

Fields:   only annotation, public, protected, private, static, final, transient, volatile
          (not abstract, synchronized, native, strictfp, default)

Methods:  only annotation, public, protected, private, static, final, abstract, synchronized,
            native, strictfp, default
          (not transient, volatile)

Constructor: only annotation, public, protected, private

*/

Modifier
    = Annotation
    / PUBLIC        :~$
    / PROTECTED     :~$
    / PRIVATE       :~$
    / STATIC        :~$
    / FINAL         :~$
    / TRANSIENT     :~$
    / VOLATILE      :~$
    / ABSTRACT      :~$
    / SYNCHRONIZED  :~$
    / NATIVE        :~$
    / STRICTFP      :~$
    / DEFAULT       :~$ ;

Modifiers #$
    = Modifier* ;

//-------------------------------------------------------------------------
//  Fields
//-------------------------------------------------------------------------

VariableDeclaratorId :~$
    = Identifier:+-id Dims;

ArrayInitializer
    = '{' VariableInitializer # initializerElements , ',' ','? '}' ;

VariableInitializer :~$
    = Expression / ArrayInitializer ;

VariableDeclarator
    = VariableDeclaratorId ('=' VariableInitializer)? ;

VariableDeclarators :#$
    = VariableDeclarator ,+ ',' ;

FieldDeclaration :~$
    = Modifiers Type VariableDeclarators ';' ;

//-------------------------------------------------------------------------
//  Methods
//-------------------------------------------------------------------------

MethodDeclaration :~$
    = Modifiers
      TypeParameters?
      (Type / VOID :~$) - returnType
      Identifier :+- id
      FormalParameters
      Dims
      Throws?
      (Block / ';') ;

FormalParameters
    = '(' FormalParameter :#$ , ',' ')' ;

FormalParameter
    = VariableModifiers Type
    ( THIS :-$
    / VariableDeclaratorId
    / Annotations '...' :- ellipsis VariableDeclaratorId !',' ) ;

VariableModifiers # modifiers
    = ( Annotation / FINAL :~$ )* ;

Throws
    = THROWS ClassType # exceptions ,+ ',' ;

//-------------------------------------------------------------------------
//  Constructors
//-------------------------------------------------------------------------

ConstructorDeclaration :~$
    = Modifiers
      TypeParameters?
      Identifier:+-id
      FormalParameters
      Throws?
      '{' ExplicitConstructorInvocation? BlockStatements '}' ;

ExplicitConstructorInvocation :-$
    = TypeArguments? (THIS:-$ / SUPER:-$) Arguments ';'

    // http://stackoverflow.com/questions/2831484
    // TODO: only primary expression allowed here (needs precedence filter?)

    / Expression - enclosingInstance '.' TypeArguments? SUPER:-super Arguments ';' ;

//-------------------------------------------------------------------------
//  Annotation Elements
//-------------------------------------------------------------------------

AnnotationTypeElementDeclaration :~$
    = Modifiers Type Identifier:+-id '(' ')' Dims (DEFAULT ElementValue)? ';' ;

//=========================================================================
//  Annotations (JLS 9.7)
//=========================================================================

/*

<annotations>
    #annotations
        <annotation>

<annotation>
    :~annotation
        :+-id
        ?OR
            <annotationValue>
            :-pairs (*)
                :+-id
                <annotationValue>

<annotationValue>
    :~value
        OR
            <expression>
            #values
                <annotationValue>
            <annotation>

*/

Annotations # annotations
    = Annotation* ;

Annotation :~ annotation
    = '@' QualIdent:+-id ('('( ElementValuePair :# pairs ,+ ',' / ElementValue )? ')')? ;

ElementValuePair
    = Identifier:+-id '=' ElementValue ;

ElementValue :~ value
    = `filter { Expression; forbid: Assignment; }
    / ElementValueArrayInitializer
    / Annotation ;

ElementValueArrayInitializer # values
    = '{' ElementValue , ',' ','? '}' ;

//=========================================================================
//  Statements (JLS 14)
//=========================================================================

/*

constraints:
    - interfaces and annotations can't be local

<statements>
    :~statements
        OR
            <localVarDecl>
            <typeDeclaration>
            <statement>

<localVarDecl>
    :~ localVarDecl
        <variableModifiers>
        <type>
        <declarators>

<statement>
    ~statement
        OR
            <statements>

            :~ifElse
                <expression>
                -if
                    <statement>
                -else
                    <statement>

            <basicFor>

            <enhancedFor>

            :~while
                <expression>
                <statement>

            :~doWhile
                <expression>
                <statement>

            <try>

            :~switch
                <expression>
                :#switchBlocks
                    #labels
                        OR
                            ~label
                                <expression>
                            :~default
                    <statements>

            :~synchronized
                <expression>
                <statements>

            :~return
                ?<expression>

            ~throw
                <expression>

            :~break
                ?:+-id

            :~continue
                ?:+-id

            :~assert
                <expression>
                ?-message
                    <expression>

            :~semi

            ~stmtExpr
                <expression>

            :~labelled
                :+-label
                <statement>

<basicFor>
    :~basicFor
        ?:-init
            OR
                <localVarDecl>
                <stmtExprs>
        ?-cond
            <expression>
        ?:-iter
            <stmtExprs>
        -body
            <statement>

<stmtExprs>
    #stmtExprs
        <expression>

<enhancedFor>
    :~ enhancedFor
        <variableModifiers>
        <type>
        <declaratorId>
        -iterable
            <expression>
        -body
            <statement>

<try>
    :~try
        :#resources
            <variableModifiers>
            <type>
            <declaratorId>
            -value
                <expression>
        -body
            <statements>
        :#catchClauses
            <variableModifiers>
            #types
                <classType>
            <declaratorId>
            <statements>
        -finally
            <statements>

*/

Block
    = '{' BlockStatements '}' ;

BlockStatements :~ statements
    = BlockStatement* ;

BlockStatement
    = LocalVariableDeclaration ';'
    / TypeDeclaration
    / Statement ;

LocalVariableDeclaration :~ localVarDecl
    = VariableModifiers Type VariableDeclarators ;

Statement ~ statement
    = Block
    / IfElse
    / BasicForStatement
    / EnhancedForStatement
    / (WHILE ParExpression Statement)                       :~while
    / (DO Statement WHILE ParExpression ';')                :~doWhile
    / TryStatement
    / (SWITCH ParExpression SwitchBlock)                    :~switch
    / (SYNCHRONIZED ParExpression Block)                    :~synchronized
    / (RETURN Expression? ';')                              :~return
    / (THROW Expression ';')                                ~throw
    / (BREAK (Identifier :+- id)? ';')                      :~break
    / (CONTINUE (Identifier :+- id)? ';')                   :~continue
    / (ASSERT Expression (':' Expression-message)? ';')   :~assert
    / ';'                                                   :~semi
    / (StatementExpression ';')                             ~stmtExpression
    / (Identifier:+-label ':' Statement)                  :~labelled ;

IfElse :~ ifElse
    = IF ParExpression Statement-if (ELSE Statement-else)? ;

ParExpression
    = '(' Expression ')' ;

SwitchBlock
    = '{' (SwitchLabel+ # labels BlockStatements)* :# switchBlocks '}' ;

SwitchLabel
    = CASE Expression~label ':' / DEFAULT:~default ':' ;

StatementExpression
    = `filter {
        Expression;
        allow: Assignment, '++x', '--x', 'x++', 'x--', MethodCall, DotTypeArgsCall, CtorCall;
    } ;

BasicForStatement :~ basicFor
    = FOR '(' (ForInit :- init)? ';' (Expression - cond)? ';' (StatementExpressionList :- iter)? ')'
            Statement-body ;

ForInit
    = LocalVariableDeclaration
    / StatementExpressionList ;

StatementExpressionList # stmtExprs
    = StatementExpression ,+ ',' ;

EnhancedForStatement :~ enhancedFor
    = FOR '(' VariableModifiers Type VariableDeclaratorId ':' Expression-iterable ')'
        Statement-body ;

TryStatement :~ try
    = TRY
      ( Block - body (CatchClause* Finally / CatchClause+)
      / '(' Resource :# resources ,+ ';' ';'? ')' Block CatchClause* Finally? ) ;

CatchClause :# catchClauses
    = CATCH '(' CatchFormalParameter ')' Block ;

CatchFormalParameter
    = VariableModifiers ClassType # types ,+ '|' VariableDeclaratorId ;

Finally
    = FINALLY Block - finally ;

Resource
    = VariableModifiers Type VariableDeclaratorId '=' Expression-value ;

//=========================================================================
//  JLS 15  Expressions
//=========================================================================

//-------------------------------------------------------------------------
//  JLS 15.9  Class Instance Creation Expressions
//-------------------------------------------------------------------------

/*

<classCreator>
    <typeArgs> (?)
    <annotations>
    <arguments>
    :#components
        <annotations>
        :+-id
        ?OR
            <typeArgs>
            :-diamond
    ?<declarations>

*/

ClassCreator
    = TypeArguments? Annotations ClassTypeWithDiamond Arguments ClassBody? ;

ClassTypeWithDiamond :# components
    = (Annotations Identifier:+-id TypeArgumentsOrDiamond?) ,+ '.' ;

TypeArgumentsOrDiamond
    = TypeArguments
    / (LPOINT RPOINT !'.'):-diamond ;  // Must be last

//-------------------------------------------------------------------------
//  JLS 15.10  Array Creation and Access Expressions
//-------------------------------------------------------------------------

/*

<arrayCreator>
    <stemType>
    ?:#dimExprs
        <annotations>
        <expression>
    <dims>
    ?<arrayInitializer>

*/

// NOTE:-arrays with an initializer cannot have dimension expressions

ArrayCreator
    = StemType DimExpr+ Dims
    / StemType DimsAlo ArrayInitializer ;

DimExpr :# dimExprs
    = Annotations '[' Expression ']' ;

//-------------------------------------------------------------------------
//  JLS 15.12  Method Invocation Expressions
//-------------------------------------------------------------------------

/*

<arguments>
    #arguments
        <expression>

*/

Arguments #$
    = '(' Expression , ',' ')' ;

//-------------------------------------------------------------------------
//  JLS 15.27  Lambda Expressions
//-------------------------------------------------------------------------

/*

<lambda>
    :~lambda
        OR
            :+-id
            <parameters>
            :+#inferredParameters
        :-lambdaBody
            OR
                <expression>
                <statements>

*/

LambdaExpression :~ lambda
    = LambdaParameters '->'  (Expression / Block) :- lambdaBody ;

LambdaParameters
    = Identifier:+-id
    / FormalParameters
    / '(' Identifier :+# inferredParameters ,+ ',' ')' ;

// ===============================================================================

E = Expression ;

Expression ~ expression = `expr {

    @+_left_recur
    -> Assignment = Assignment
    -> LambdaExpression

    @+_left_recur
    -> ConditionalExpression

    //// BINARY OPERATORS

    @+_left_assoc ->'op||' :~$ = E '||' E
    @+_left_assoc ->'op&&' :~$ = E '&&' E
    @+_left_assoc ->'op|'  :~$ = E '|'  E
    @+_left_assoc ->'op^'  :~$ = E '^'  E
    @+_left_assoc ->'op&'  :~$ = E '&'  E

    @+_left_assoc
    ->'op==' :~$ = E '==' E
    ->'op!=' :~$ = E '!=' E

    @+_left_assoc
    ->'op<='         :~$ = E '<=' E
    ->'op>='         :~$ = E '>=' E
    ->'op<'          :~$ = E '<'  E
    ->'op>'          :~$ = E '>'  E
    -> InstanceOf   :~$ = E INSTANCEOF E

    @+_left_assoc
    ->'op<<'  :~$ = E '<<' E
    ->'op>>'  :~$ = E '>>' E
    ->'op>>>' :~$ = E '>>>' E

    @+_left_assoc
    ->'op+' :~$ = E '+' E
    ->'op-' :~$ = E '-' E

    @+_left_assoc
    ->'op*' :~$ = E '*' E
    ->'op/' :~$ = E '/' E
    ->'op%' :~$ = E '%' E


    //// PREFIX OPERATORS

    @+
    ->'++x'   :~$ = '++' E
    ->'--x'   :~$ = '--' E
    ->'op+'   :~$ = '+' E
    ->'op-'   :~$ = '-' E
    ->'op~'   :~$ = '~' E
    ->'op!'   :~$ = '!' E

    -> CastExpression

    // Cast do not conflict with method call ((expr)(arguments)) the precedence of method call
    // is lower.


    //// POSTFIX EXPRESSIONS

    @+_left_assoc
    -> 'x++'            :~$ = E '++'
    -> 'x--'            :~$ = E '--'
    -> DotTypeArgsCall  :~$ = E-op '.' TypeArguments Identifier :+-id drop Arguments
    -> MethodCall       :~$ = (E-op drop Arguments)
    -> DotNew           :~$ = E-op '.' NEW drop ClassCreator
    -> DotThis          :~$ = E '.' THIS
    -> DotSuper         :~$ = E '.' SUPER
    -> DotClass         :~$ = E '.' CLASS
    -> DotIden          :~$ = E-op '.' Identifier:+-id
    -> ArrayAccess      :~$ = E-op '[' drop E-subscript ']'
    -> MethodRef        :~$ = E-op '::' TypeArguments? Identifier:+-id
    -> NewRef           :~$ = TypeArguments? NEW

    //// POSTFIX TYPES

    -> TypeWithArgs     :~$ = E-op TypeArguments
    -> ArrayType        :~$ = E '[' ']'


    //// PRIMARY EXPRESSIONS

    @+
    -> Parens           :~$ = '(' drop Expression ')'
    -> ThisCall         :~$ = THIS Arguments
    -> THIS :~$
    -> SuperCall        :~$ = SUPER Arguments
    -> SUPER :~$
    -> CtorCall         :~$ = NEW drop ClassCreator
    -> ArrayCtorCall    :~$ = NEW drop ArrayCreator
    -> Iden             :~$ = Identifier
    -> Literal


    //// PRIMARY TYPES

    -> BasicType
    -> VOID :~$
    };

// ===============================================================================

/*

<assignment>
    :~assignment
        -l
            <expression>
        :+-op
        -r
            <expression>

<conditionalExpr>
    ~conditionalExpr
        -cond
            <expression>
        -if
            <expression>
        -else
            <expression>
<cast>
    :~cast
        #types
            <type>
        -op
            <expression>

*/

Assignment :~ assignment
    = LValue-l AssignmentOperator:+-op Expression-r ;

LValue
    = `filter { Expression; allow: Iden, DotIden, ArrayAccess; } ;

AssignmentOperator
    = '=' / '*=' / '/=' / '%=' / '+=' / '-=' / '<<=' / '>>=' / '>>>=' / '&=' / '^=' / '|=' ;

ConditionalExpression :~ conditionalExpr
    = Expression-cond '?' drop Expression-if ':' Expression-else ;

// NOTE:-first must be reference type or primitive type
//       further allowed only w/ reference type and must be class types

CastExpression :~ cast
    = '(' Type # types ,+ '&' ')' Expression-op;


/*

INFIX
    -l
        <expression>
    -r
        <expression>

PREFIX
    -op
        <expression>

:~dotTypeArgs
    -op
        <expression>
    <typeArgs>
    :+-id
    <arguments>

:~call
    -op
        <expression>
    <arguments>

:~dotIden
    -op
        <expression>
    :+-id

:~arrayAccess
    -op
        <expression>
    -subscript
        <expression>

:~methodRef
    -op
        <expression>
    <typeArguments>
    :+-id

:~newRef
    -op
        <expression>
    <typeArguments>

:~typeWithArgs
    -op
        <expression>
    <typeArguments>

OTHER SUFFIX
    -op
        <expression>

:~thisCall
    <arguments>

:~superCall
    <arguments>

:~ctorCall
    <classCreator>

:~arrayCtorCall
    <arrayCreator>

*/

// ===============================================================================